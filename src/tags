!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACTIVATIONS_H	activations.h	2;"	d
ACTIVATION_LAYER_H	activation_layer.h	2;"	d
ADDRPOINTER	http_stream.cpp	36;"	d	file:
AI2	convolutional_layer.c	23;"	d	file:
ALEXNET_NSEC	multidnn.h	35;"	d
ALEXNET_PRIOR	multidnn.h	36;"	d
ALEXNET_SEC	multidnn.h	34;"	d
ARGS	multidnn.h	/^typedef struct ARGS {$/;"	s
ASN1_STRING_get0_data	httplib.h	/^inline const unsigned char *ASN1_STRING_get0_data(const ASN1_STRING *asn1) {$/;"	f
AVGPOOL_LAYER_H	avgpool_layer.h	2;"	d
Args	multidnn.h	/^} Args;$/;"	t	typeref:struct:ARGS
BADARG	getopt.h	93;"	d
BADCH	getopt.h	92;"	d
BASE_LAYER_H	layer.h	2;"	d
BATCHNORM_LAYER_H	batchnorm_layer.h	2;"	d
BILLION	gettimeofday.h	10;"	d
BLAS_H	blas.h	2;"	d
BLOCK	dark_cuda.h	18;"	d
BLOCK_TRANSPOSE32	dark_cuda.h	21;"	d
BOX_H	box.h	2;"	d
BattleRoyaleWithCheese	compare.c	/^void BattleRoyaleWithCheese(char *filename, char *weightfile)$/;"	f
BboxContainer	csharp/YoloCSharpWrapper.cs	/^        public struct BboxContainer$/;"	s	class:Darknet.YoloWrapper
BufferStream	httplib.h	/^class BufferStream : public Stream {$/;"	c	namespace:httplib
CHECK_CUBLAS	dark_cuda.h	61;"	d
CHECK_CUDA	dark_cuda.h	60;"	d
CHECK_CUDNN	dark_cuda.h	96;"	d
CLA	multidnn.h	66;"	d
CLASSIFIER_CNT	multidnn.h	46;"	d
CLASSIFIER_H	classifier.h	2;"	d
CLASSIFIER_PERIOD	multidnn.h	25;"	d
CLOCK_REALTIME	gettimeofday.h	9;"	d
COL2IM_H	col2im.h	2;"	d
CONNECTED_LAYER_H	connected_layer.h	2;"	d
CONVOLUTIONAL_LAYER_H	convolutional_layer.h	2;"	d
CONV_LSTM_LAYER_H	conv_lstm_layer.h	2;"	d
COST_LAYER_H	cost_layer.h	2;"	d
CPPHTTPLIB_HTTPLIB_H	httplib.h	9;"	d
CPPHTTPLIB_KEEPALIVE_MAX_COUNT	httplib.h	24;"	d
CPPHTTPLIB_KEEPALIVE_TIMEOUT_SECOND	httplib.h	16;"	d
CPPHTTPLIB_KEEPALIVE_TIMEOUT_USECOND	httplib.h	20;"	d
CPPHTTPLIB_PAYLOAD_MAX_LENGTH	httplib.h	44;"	d
CPPHTTPLIB_READ_TIMEOUT_SECOND	httplib.h	28;"	d
CPPHTTPLIB_READ_TIMEOUT_USECOND	httplib.h	32;"	d
CPPHTTPLIB_RECV_BUFSIZ	httplib.h	48;"	d
CPPHTTPLIB_REDIRECT_MAX_COUNT	httplib.h	40;"	d
CPPHTTPLIB_REQUEST_URI_MAX_LENGTH	httplib.h	36;"	d
CPPHTTPLIB_THREAD_POOL_COUNT	httplib.h	52;"	d
CRNN_LAYER_H	crnn_layer.h	3;"	d
CROP_LAYER_H	crop_layer.h	2;"	d
CV_AA	image_opencv.cpp	77;"	d	file:
CV_FILLED	image_opencv.cpp	73;"	d	file:
CV_RGB	image_opencv.cpp	69;"	d	file:
CYCLE_IDX	avees.c	63;"	d	file:
CYCLE_OFFSET	avees.c	62;"	d	file:
Client	httplib.h	/^class Client {$/;"	c	namespace:httplib
Client	httplib.h	/^inline Client::Client(const char *host, int port, time_t timeout_sec)$/;"	f	class:httplib::Client
DARKCUDA_H	dark_cuda.h	2;"	d
DARKNET19_NSEC	multidnn.h	39;"	d
DARKNET19_PRIOR	multidnn.h	40;"	d
DARKNET19_SEC	multidnn.h	38;"	d
DARKNET_LOC	utils.h	18;"	d
DATA_H	data.h	2;"	d
DECONVOLUTIONAL_LAYER_H	deconvolutional_layer.h	2;"	d
DEMO_CLASSI	multidnn.h	/^typedef struct DEMO_CLASSI {$/;"	s
DEMO_DETECTOR	multidnn.h	/^typedef struct DEMO_DETECTOR {$/;"	s
DEMO_H	avees.h	2;"	d
DEMO_H	demo.h	2;"	d
DENSENET201_NSEC	multidnn.h	43;"	d
DENSENET201_PRIOR	multidnn.h	44;"	d
DENSENET201_SEC	multidnn.h	42;"	d
DET	multidnn.h	65;"	d
DETECTION_LAYER_H	detection_layer.h	2;"	d
DETECTOR_CNT	multidnn.h	63;"	d
DETECTOR_PERIOD	multidnn.h	24;"	d
DOABS	region_layer.c	12;"	d	file:
DROPOUT_LAYER_H	dropout_layer.h	2;"	d
Darknet	csharp/YoloCSharpWrapper.cs	/^namespace Darknet$/;"	n
Delete	httplib.h	/^inline Server &Server::Delete(const char *pattern, Handler handler) {$/;"	f	class:httplib::Server
Delete	httplib.h	/^inline std::shared_ptr<Response> Client::Delete(const char *path) {$/;"	f	class:httplib::Client
Delete	httplib.h	/^inline std::shared_ptr<Response> Client::Delete(const char *path,$/;"	f	class:httplib::Client
DemoClassi	multidnn.h	/^} DemoClassi;$/;"	t	typeref:struct:DEMO_CLASSI
DemoDetector	multidnn.h	/^} DemoDetector;$/;"	t	typeref:struct:DEMO_DETECTOR
Detect	csharp/YoloCSharpWrapper.cs	/^        public bbox_t[] Detect(byte[] imageData)$/;"	m	class:Darknet.YoloWrapper
Detect	csharp/YoloCSharpWrapper.cs	/^        public bbox_t[] Detect(string filename)$/;"	m	class:Darknet.YoloWrapper
DetectImage	csharp/YoloCSharpWrapper.cs	/^        private static extern int DetectImage(IntPtr pArray, int nSize, ref BboxContainer container);$/;"	m	class:Darknet.YoloWrapper	file:
DetectImage	csharp/YoloCSharpWrapper.cs	/^        private static extern int DetectImage(string filename, ref BboxContainer container);$/;"	m	class:Darknet.YoloWrapper	file:
Detector	yolo_v2_class.cpp	/^LIB_API Detector::Detector(std::string cfg_filename, std::string weight_filename, int gpu_id, int batch_size)$/;"	f	class:Detector
Dispose	csharp/YoloCSharpWrapper.cs	/^        public void Dispose()$/;"	m	class:Darknet.YoloWrapper
DisposeYolo	csharp/YoloCSharpWrapper.cs	/^        private static extern int DisposeYolo();$/;"	m	class:Darknet.YoloWrapper	file:
EMSG	getopt.h	/^static char EMSG[] = "";$/;"	v
EMSG	getopt.h	105;"	d
FLAG_ALLARGS	getopt.h	88;"	d
FLAG_LONGONLY	getopt.h	89;"	d
FLAG_PERMUTE	getopt.h	87;"	d
FULL_MASK	dark_cuda.h	19;"	d
F_OK	darkunistd.h	25;"	d
GAUSSIAN_YOLO_LAYER_H	gaussian_yolo_layer.h	3;"	d
GEMM_H	gemm.h	2;"	d
GPU	yolo_console_dll.cpp	32;"	d	file:
GRU_LAYER_H	gru_layer.h	3;"	d
Get	httplib.h	/^Client::Get(const char *path, const Headers &headers, Progress progress) {$/;"	f	class:httplib::Client
Get	httplib.h	/^inline Server &Server::Get(const char *pattern, Handler handler) {$/;"	f	class:httplib::Server
Get	httplib.h	/^inline std::shared_ptr<Response> Client::Get(const char *path) {$/;"	f	class:httplib::Client
Get	httplib.h	/^inline std::shared_ptr<Response> Client::Get(const char *path,$/;"	f	class:httplib::Client
Get	httplib.h	/^inline void Get(std::vector<Request> &requests, const char *path) {$/;"	f	namespace:httplib
Get	httplib.h	/^inline void Get(std::vector<Request> &requests, const char *path,$/;"	f	namespace:httplib
HAVE_DECL_GETOPT	getopt.h	220;"	d
HTTP_STREAM_H	http_stream.h	2;"	d
HW_ABM	gemm.c	/^static int HW_ABM;      \/\/ Advanced Bit Manipulation$/;"	v	file:
HW_ADX	gemm.c	/^static int HW_MMX, HW_x64, HW_RDRAND, HW_BMI1, HW_BMI2, HW_ADX, HW_PREFETCHWT1;$/;"	v	file:
HW_AES	gemm.c	/^static int HW_SSE, HW_SSE2, HW_SSE3, HW_SSSE3, HW_SSE41, HW_SSE42, HW_SSE4a, HW_AES, HW_SHA;$/;"	v	file:
HW_AVX	gemm.c	/^static int HW_AVX, HW_XOP, HW_FMA3, HW_FMA4, HW_AVX2;$/;"	v	file:
HW_AVX2	gemm.c	/^static int HW_AVX, HW_XOP, HW_FMA3, HW_FMA4, HW_AVX2;$/;"	v	file:
HW_AVX512BW	gemm.c	/^static int HW_AVX512BW;   \/\/  AVX512 Byte + Word$/;"	v	file:
HW_AVX512CD	gemm.c	/^static int HW_AVX512CD;   \/\/  AVX512 Conflict Detection$/;"	v	file:
HW_AVX512DQ	gemm.c	/^static int HW_AVX512DQ;   \/\/  AVX512 Doubleword + Quadword$/;"	v	file:
HW_AVX512ER	gemm.c	/^static int HW_AVX512ER;   \/\/  AVX512 Exponential + Reciprocal$/;"	v	file:
HW_AVX512F	gemm.c	/^static int HW_AVX512F;    \/\/  AVX512 Foundation$/;"	v	file:
HW_AVX512IFMA	gemm.c	/^static int HW_AVX512IFMA; \/\/  AVX512 Integer 52-bit Fused Multiply-Add$/;"	v	file:
HW_AVX512PF	gemm.c	/^static int HW_AVX512PF;   \/\/  AVX512 Prefetch$/;"	v	file:
HW_AVX512VBMI	gemm.c	/^static int HW_AVX512VBMI; \/\/  AVX512 Vector Byte Manipulation Instructions$/;"	v	file:
HW_AVX512VL	gemm.c	/^static int HW_AVX512VL;   \/\/  AVX512 Vector Length Extensions$/;"	v	file:
HW_BMI1	gemm.c	/^static int HW_MMX, HW_x64, HW_RDRAND, HW_BMI1, HW_BMI2, HW_ADX, HW_PREFETCHWT1;$/;"	v	file:
HW_BMI2	gemm.c	/^static int HW_MMX, HW_x64, HW_RDRAND, HW_BMI1, HW_BMI2, HW_ADX, HW_PREFETCHWT1;$/;"	v	file:
HW_FMA3	gemm.c	/^static int HW_AVX, HW_XOP, HW_FMA3, HW_FMA4, HW_AVX2;$/;"	v	file:
HW_FMA4	gemm.c	/^static int HW_AVX, HW_XOP, HW_FMA3, HW_FMA4, HW_AVX2;$/;"	v	file:
HW_MMX	gemm.c	/^static int HW_MMX, HW_x64, HW_RDRAND, HW_BMI1, HW_BMI2, HW_ADX, HW_PREFETCHWT1;$/;"	v	file:
HW_PREFETCHWT1	gemm.c	/^static int HW_MMX, HW_x64, HW_RDRAND, HW_BMI1, HW_BMI2, HW_ADX, HW_PREFETCHWT1;$/;"	v	file:
HW_RDRAND	gemm.c	/^static int HW_MMX, HW_x64, HW_RDRAND, HW_BMI1, HW_BMI2, HW_ADX, HW_PREFETCHWT1;$/;"	v	file:
HW_SHA	gemm.c	/^static int HW_SSE, HW_SSE2, HW_SSE3, HW_SSSE3, HW_SSE41, HW_SSE42, HW_SSE4a, HW_AES, HW_SHA;$/;"	v	file:
HW_SSE	gemm.c	/^static int HW_SSE, HW_SSE2, HW_SSE3, HW_SSSE3, HW_SSE41, HW_SSE42, HW_SSE4a, HW_AES, HW_SHA;$/;"	v	file:
HW_SSE2	gemm.c	/^static int HW_SSE, HW_SSE2, HW_SSE3, HW_SSSE3, HW_SSE41, HW_SSE42, HW_SSE4a, HW_AES, HW_SHA;$/;"	v	file:
HW_SSE3	gemm.c	/^static int HW_SSE, HW_SSE2, HW_SSE3, HW_SSSE3, HW_SSE41, HW_SSE42, HW_SSE4a, HW_AES, HW_SHA;$/;"	v	file:
HW_SSE41	gemm.c	/^static int HW_SSE, HW_SSE2, HW_SSE3, HW_SSSE3, HW_SSE41, HW_SSE42, HW_SSE4a, HW_AES, HW_SHA;$/;"	v	file:
HW_SSE42	gemm.c	/^static int HW_SSE, HW_SSE2, HW_SSE3, HW_SSSE3, HW_SSE41, HW_SSE42, HW_SSE4a, HW_AES, HW_SHA;$/;"	v	file:
HW_SSE4a	gemm.c	/^static int HW_SSE, HW_SSE2, HW_SSE3, HW_SSSE3, HW_SSE41, HW_SSE42, HW_SSE4a, HW_AES, HW_SHA;$/;"	v	file:
HW_SSSE3	gemm.c	/^static int HW_SSE, HW_SSE2, HW_SSE3, HW_SSSE3, HW_SSE41, HW_SSE42, HW_SSE4a, HW_AES, HW_SHA;$/;"	v	file:
HW_XOP	gemm.c	/^static int HW_AVX, HW_XOP, HW_FMA3, HW_FMA4, HW_AVX2;$/;"	v	file:
HW_x64	gemm.c	/^static int HW_MMX, HW_x64, HW_RDRAND, HW_BMI1, HW_BMI2, HW_ADX, HW_PREFETCHWT1;$/;"	v	file:
Head	httplib.h	/^inline std::shared_ptr<Response> Client::Head(const char *path) {$/;"	f	class:httplib::Client
Head	httplib.h	/^inline std::shared_ptr<Response> Client::Head(const char *path,$/;"	f	class:httplib::Client
HttpVersion	httplib.h	/^enum class HttpVersion { v1_0 = 0, v1_1 };$/;"	c	namespace:httplib
IDENTICAL_INTERPRETATION	getopt.c	160;"	d	file:
IDENTICAL_INTERPRETATION	getopt.c	269;"	d	file:
IM2COL_H	im2col.h	2;"	d
IMAGE_H	image.h	2;"	d
IMAGE_OPENCV_H	image_opencv.h	2;"	d
INORDER	getopt.h	94;"	d
InitializeYolo	csharp/YoloCSharpWrapper.cs	/^        private static extern int InitializeYolo(string configurationFilename, string weightsFilename, int gpu);$/;"	m	class:Darknet.YoloWrapper	file:
JSON_sender	http_stream.cpp	/^    JSON_sender(int port = 0, int _timeout = 400000)$/;"	f	class:JSON_sender
JSON_sender	http_stream.cpp	/^class JSON_sender$/;"	c	file:
LIST_H	list.h	2;"	d
LOCAL_LAYER_H	local_layer.h	2;"	d
LSTM_LAYER_H	lstm_layer.h	2;"	d
MAJOR_VERSION	version.h	1;"	d
MATRIX_H	matrix.h	2;"	d
MAXPOOL_LAYER_H	maxpool_layer.h	2;"	d
MEAS	demo.c	58;"	d	file:
MEASUREMENT	avees.c	60;"	d	file:
MEASUREMENT	multidnn.h	13;"	d
MEASUREMENTC_FILE	multidnn.h	22;"	d
MEASUREMENTD_FILE	multidnn.h	21;"	d
MEASUREMENT_FILE	avees.c	65;"	d	file:
MEASUREMENT_ITERATION	multidnn.h	17;"	d
MEASUREMENT_PATH	avees.c	64;"	d	file:
MEASUREMENT_PATH	multidnn.h	20;"	d
MEAS_	classifier.c	16;"	d	file:
MEAS_THRESHOLD	multidnn.h	18;"	d
MINOR_VERSION	version.h	2;"	d
MJPG_sender	http_stream.cpp	/^    MJPG_sender(int port = 0, int _timeout = 400000, int _quality = 30)$/;"	f	class:MJPG_sender
MJPG_sender	http_stream.cpp	/^class MJPG_sender$/;"	c	file:
MULTI_DNN	multidnn.h	/^typedef struct MULTI_DNN {$/;"	s
M_PI	box.c	8;"	d	file:
M_PI	gaussian_yolo_layer.c	20;"	d	file:
M_PI	utils.h	11;"	d
MaxObjects	csharp/YoloCSharpWrapper.cs	/^        private const int MaxObjects = 1000;$/;"	f	class:Darknet.YoloWrapper	file:
MultiDNN	multidnn.h	/^} MultiDNN;$/;"	t	typeref:struct:MULTI_DNN
MultipartFile	httplib.h	/^struct MultipartFile {$/;"	s	namespace:httplib
MultipartFormData	httplib.h	/^struct MultipartFormData {$/;"	s	namespace:httplib
NETWORK_H	network.h	3;"	d
NFRAMES	yolo_v2_class.cpp	26;"	d	file:
NI_MAXHOST	http_stream.cpp	576;"	d	file:
NI_NUMERICHOST	http_stream.cpp	580;"	d	file:
NOMINMAX	httplib.h	89;"	d
NORMALIZATION_LAYER_H	normalization_layer.h	2;"	d
NUMCHARS	data.c	14;"	d	file:
NoThread	httplib.h	/^  NoThread() {}$/;"	f	class:httplib::NoThread
NoThread	httplib.h	/^class NoThread : public TaskQueue {$/;"	c	namespace:httplib
OCV_D	image_opencv.cpp	45;"	d	file:
OPENCV_VERSION	image_opencv.cpp	53;"	d	file:
OPENCV_VERSION	yolo_console_dll.cpp	156;"	d	file:
OPENCV_VERSION	yolo_console_dll.cpp	170;"	d	file:
OPTION_LIST_H	option_list.h	2;"	d
Options	httplib.h	/^inline Server &Server::Options(const char *pattern, Handler handler) {$/;"	f	class:httplib::Server
Options	httplib.h	/^inline std::shared_ptr<Response> Client::Options(const char *path) {$/;"	f	class:httplib::Client
Options	httplib.h	/^inline std::shared_ptr<Response> Client::Options(const char *path,$/;"	f	class:httplib::Client
PARSER_H	parser.h	2;"	d
PATCH_VERSION	version.h	3;"	d
POPCNT	gemm.c	22;"	d	file:
POPCNT	gemm.c	27;"	d	file:
POPCNT	gemm.c	35;"	d	file:
POPCNT	gemm.c	40;"	d	file:
POPCNT64	gemm.c	23;"	d	file:
POPCNT64	gemm.c	28;"	d	file:
POPCNT64	gemm.c	36;"	d	file:
POPCNT64	gemm.c	41;"	d	file:
PORT	http_stream.cpp	35;"	d	file:
PRINT_ERROR	getopt.h	85;"	d
PUT_IN_REGISTER	convolutional_layer.c	17;"	d	file:
PUT_IN_REGISTER	convolutional_layer.c	19;"	d	file:
PUT_IN_REGISTER	cpu_gemm.c	3;"	d	file:
PUT_IN_REGISTER	cpu_gemm.c	5;"	d	file:
PUT_IN_REGISTER	gemm.c	48;"	d	file:
PUT_IN_REGISTER	gemm.c	50;"	d	file:
P_constrastive	blas.c	/^float P_constrastive(size_t i, size_t l, int *labels, size_t num_of_samples, float **z, unsigned int feature_size, float temperature, float *cos_sim, float *exp_cos_sim)$/;"	f
P_constrastive_f	blas.c	/^float P_constrastive_f(size_t i, size_t l, int *labels, float **z, unsigned int feature_size, float temperature, contrastive_params *contrast_p, int contrast_p_size)$/;"	f
P_constrastive_f_det	blas.c	/^float P_constrastive_f_det(size_t il, int *labels, float **z, unsigned int feature_size, float temperature, contrastive_params *contrast_p, int contrast_p_size)$/;"	f
Patch	httplib.h	/^Client::Patch(const char *path, const Headers &headers, const std::string &body,$/;"	f	class:httplib::Client
Patch	httplib.h	/^Client::Patch(const char *path, const Headers &headers, size_t content_length,$/;"	f	class:httplib::Client
Patch	httplib.h	/^inline Server &Server::Patch(const char *pattern, Handler handler) {$/;"	f	class:httplib::Server
Patch	httplib.h	/^inline Server &Server::Patch(const char *pattern,$/;"	f	class:httplib::Server
Patch	httplib.h	/^inline std::shared_ptr<Response> Client::Patch(const char *path,$/;"	f	class:httplib::Client
Post	httplib.h	/^Client::Post(const char *path, const Headers &headers, const std::string &body,$/;"	f	class:httplib::Client
Post	httplib.h	/^Client::Post(const char *path, const Headers &headers, size_t content_length,$/;"	f	class:httplib::Client
Post	httplib.h	/^Client::Post(const char *path, const Headers &headers,$/;"	f	class:httplib::Client
Post	httplib.h	/^Client::Post(const char *path, const MultipartFormDataItems &items,$/;"	f	class:httplib::Client
Post	httplib.h	/^Client::Post(const char *path, const Params &params, bool compress) {$/;"	f	class:httplib::Client
Post	httplib.h	/^inline Server &Server::Post(const char *pattern, Handler handler) {$/;"	f	class:httplib::Server
Post	httplib.h	/^inline Server &Server::Post(const char *pattern,$/;"	f	class:httplib::Server
Post	httplib.h	/^inline std::shared_ptr<Response> Client::Post(const char *path,$/;"	f	class:httplib::Client
Post	httplib.h	/^inline void Post(std::vector<Request> &requests, const char *path,$/;"	f	namespace:httplib
Put	httplib.h	/^Client::Put(const char *path, const Headers &headers, const std::string &body,$/;"	f	class:httplib::Client
Put	httplib.h	/^Client::Put(const char *path, const Headers &headers, size_t content_length,$/;"	f	class:httplib::Client
Put	httplib.h	/^inline Server &Server::Put(const char *pattern, Handler handler) {$/;"	f	class:httplib::Server
Put	httplib.h	/^inline Server &Server::Put(const char *pattern,$/;"	f	class:httplib::Server
Put	httplib.h	/^inline std::shared_ptr<Response> Client::Put(const char *path,$/;"	f	class:httplib::Client
QUANTUM_ITERATION	multidnn.h	15;"	d
QUANTUM_NSEC	multidnn.h	31;"	d
QUANTUM_PRIOR	multidnn.h	32;"	d
QUANTUM_SEC	multidnn.h	30;"	d
REGION_LAYER_H	region_layer.h	2;"	d
REORG_LAYER_H	reorg_layer.h	2;"	d
REORG_OLD_LAYER_H	reorg_old_layer.h	2;"	d
REPLACE_GETOPT	getopt.h	76;"	d
REPRESENTATION_LAYER_H	representation_layer.h	2;"	d
RNN_LAYER_H	rnn_layer.h	3;"	d
ROUTE_LAYER_H	route_layer.h	2;"	d
RS_SCALE	utils.c	963;"	d	file:
R_OK	darkunistd.h	22;"	d
Request	httplib.h	/^struct Request {$/;"	s	namespace:httplib
Response	httplib.h	/^  Response() : status(-1), content_length(0) {}$/;"	f	struct:httplib::Response
Response	httplib.h	/^struct Response {$/;"	s	namespace:httplib
SAM_CHANNELS_LAYER_H	sam_layer.h	2;"	d
SCALE_CHANNELS_LAYER_H	scale_channels_layer.h	2;"	d
SECRET_NUM	softmax_layer.c	13;"	d	file:
SHORTCUT_LAYER_H	shortcut_layer.h	2;"	d
SOFTMAX_LAYER_H	softmax_layer.h	2;"	d
SO_OPENTYPE	httplib.h	1251;"	d
SO_SYNCHRONOUS_NONALERT	httplib.h	1250;"	d
SSLClient	httplib.h	/^class SSLClient : public Client {$/;"	c	namespace:httplib
SSLClient	httplib.h	/^inline SSLClient::SSLClient(const char *host, int port, time_t timeout_sec,$/;"	f	class:httplib::SSLClient
SSLInit	httplib.h	/^  SSLInit() {$/;"	f	class:httplib::detail::SSLInit
SSLInit	httplib.h	/^class SSLInit {$/;"	c	namespace:httplib::detail
SSLServer	httplib.h	/^class SSLServer : public Server {$/;"	c	namespace:httplib
SSLServer	httplib.h	/^inline SSLServer::SSLServer(const char *cert_path, const char *private_key_path,$/;"	f	class:httplib::SSLServer
SSLSocketStream	httplib.h	/^class SSLSocketStream : public Stream {$/;"	c	namespace:httplib
SSLSocketStream	httplib.h	/^inline SSLSocketStream::SSLSocketStream(socket_t sock, SSL *ssl,$/;"	f	class:httplib::SSLSocketStream
SSLThreadLocks	httplib.h	/^  SSLThreadLocks() {$/;"	f	class:httplib::detail::SSLThreadLocks
SSLThreadLocks	httplib.h	/^class SSLThreadLocks {$/;"	c	namespace:httplib::detail
STB_IMAGE_IMPLEMENTATION	image.cpp	15;"	d	file:
STB_IMAGE_WRITE_IMPLEMENTATION	image.cpp	19;"	d	file:
STDERR_FILENO	darkunistd.h	43;"	d
STDIN_FILENO	darkunistd.h	41;"	d
STDOUT_FILENO	darkunistd.h	42;"	d
S_ISDIR	httplib.h	85;"	d
S_ISREG	httplib.h	81;"	d
Server	httplib.h	/^class Server {$/;"	c	namespace:httplib
Server	httplib.h	/^inline Server::Server()$/;"	f	class:httplib::Server
SocketStream	httplib.h	/^class SocketStream : public Stream {$/;"	c	namespace:httplib
SocketStream	httplib.h	/^inline SocketStream::SocketStream(socket_t sock, time_t read_timeout_sec,$/;"	f	class:httplib::SocketStream
SortMaster3000	compare.c	/^void SortMaster3000(char *filename, char *weightfile)$/;"	f
Stream	httplib.h	/^class Stream {$/;"	c	namespace:httplib
THREAD_SLEEP_NSEC	multidnn.h	69;"	d
THREAD_SLEEP_SEC	multidnn.h	68;"	d
THRESH	demo.c	59;"	d	file:
THRESH_	classifier.c	17;"	d	file:
TILE_K	gemm.c	46;"	d	file:
TILE_M	gemm.c	44;"	d	file:
TILE_N	gemm.c	45;"	d	file:
TREE_H	tree.h	2;"	d
TaskQueue	httplib.h	/^class TaskQueue {$/;"	c	namespace:httplib
ThreadPool	httplib.h	/^  explicit ThreadPool(size_t n) : shutdown_(false) {$/;"	f	class:httplib::ThreadPool
ThreadPool	httplib.h	/^class ThreadPool : public TaskQueue {$/;"	c	namespace:httplib
Threads	httplib.h	/^  Threads() : running_threads_(0) {}$/;"	f	class:httplib::Threads
Threads	httplib.h	/^class Threads : public TaskQueue {$/;"	c	namespace:httplib
UPSAMPLE_LAYER_H	upsample_layer.h	2;"	d
USET	conv_lstm_layer.h	7;"	d
USET	lstm_layer.h	7;"	d
USET	rnn_layer.h	8;"	d
UTILS_H	utils.h	2;"	d
WARP_SIZE	dark_cuda.h	20;"	d
WIN32_LEAN_AND_MEAN	getopt.h	69;"	d
WIN32_LEAN_AND_MEAN	gettimeofday.h	2;"	d
WIN32_LEAN_AND_MEAN	http_stream.cpp	29;"	d	file:
WSA_FLAG_NO_HANDLE_INHERIT	httplib.h	97;"	d
WSInit	httplib.h	/^  WSInit() {$/;"	f	class:httplib::detail::WSInit
WSInit	httplib.h	/^class WSInit {$/;"	c	namespace:httplib::detail
W_OK	darkunistd.h	23;"	d
X_OK	darkunistd.h	24;"	d
YOLOV2T_NSEC	multidnn.h	56;"	d
YOLOV2T_SEC	multidnn.h	55;"	d
YOLOV2_NSEC	multidnn.h	50;"	d
YOLOV2_SEC	multidnn.h	49;"	d
YOLOV3T_NSEC	multidnn.h	58;"	d
YOLOV3T_SEC	multidnn.h	57;"	d
YOLOV3_NSEC	multidnn.h	52;"	d
YOLOV3_SEC	multidnn.h	51;"	d
YOLOV4T_NSEC	multidnn.h	60;"	d
YOLOV4T_SEC	multidnn.h	59;"	d
YOLOV4_NSEC	multidnn.h	54;"	d
YOLOV4_SEC	multidnn.h	53;"	d
YOLO_LAYER_H	yolo_layer.h	2;"	d
YOLO_PRIOR	multidnn.h	62;"	d
YoloLibraryName	csharp/YoloCSharpWrapper.cs	/^        private const string YoloLibraryName = "darknet.dll";$/;"	f	class:Darknet.YoloWrapper	file:
YoloWrapper	csharp/YoloCSharpWrapper.cs	/^        public YoloWrapper(string configurationFilename, string weightsFilename, int gpu)$/;"	m	class:Darknet.YoloWrapper
YoloWrapper	csharp/YoloCSharpWrapper.cs	/^    public class YoloWrapper : IDisposable$/;"	c	namespace:Darknet
ZED_STEREO_2_COMPAT_MODE	yolo_console_dll.cpp	29;"	d	file:
_CRT_NONSTDC_NO_DEPRECATE	httplib.h	65;"	d
_CRT_SECURE_NO_WARNINGS	httplib.h	61;"	d
_GNU_SOURCE	image.cpp	2;"	d	file:
_GNU_SOURCE	utils.c	2;"	d	file:
_INIT_W32DATA	http_stream.cpp	/^    _INIT_W32DATA() { WSAStartup(MAKEWORD(2, 1), &w); }$/;"	f	struct:_INIT_W32DATA
_INIT_W32DATA	http_stream.cpp	/^struct _INIT_W32DATA$/;"	s	file:
_UNISTD_H	darkunistd.h	3;"	d
_USE_MATH_DEFINES	image.cpp	10;"	d	file:
_USE_MATH_DEFINES	utils.c	9;"	d	file:
_WINSOCK_DEPRECATED_NO_WARNINGS	http_stream.cpp	30;"	d	file:
_XOPEN_SOURCE	http_stream.cpp	1;"	d	file:
__COMPAR_FN_T	detector.c	14;"	d	file:
__DATE__	dark_cuda.h	35;"	d
__FILE__	dark_cuda.h	51;"	d
__FUNCTION__	dark_cuda.h	43;"	d
__GETOPT_H__	getopt.h	60;"	d
__GETOPT_LONG_H__	getopt.h	182;"	d
__LINE__	dark_cuda.h	47;"	d
__TIME__	dark_cuda.h	39;"	d
__compar_fn_t	detector.c	/^typedef int (*__compar_fn_t)(const void*, const void*);$/;"	t	file:
__progname	getopt.h	97;"	d
_dn_castu32_f32	gemm.c	/^static inline float _dn_castu32_f32(uint32_t a) {$/;"	f	file:
_init_once	http_stream.cpp	/^} _init_once;$/;"	v	typeref:struct:_INIT_W32DATA
_mm256_extract_epi32	gemm.c	/^static inline __int32 _mm256_extract_epi32(__m256i a, const int index) {$/;"	f	file:
_mm256_extract_epi64	gemm.c	/^static inline __int32 _mm256_extract_epi64(__m256i a, const int index) {$/;"	f	file:
_mm256_extract_float32	gemm.c	/^static inline float _mm256_extract_float32(__m256 a, const int index) {$/;"	f	file:
_vwarnx	getopt.c	/^_vwarnx(const char* fmt, va_list ap)$/;"	f	file:
_write	http_stream.cpp	/^    int _write(int sock, char const*const s, int len)$/;"	f	class:JSON_sender	file:
_write	http_stream.cpp	/^    int _write(int sock, char const*const s, int len)$/;"	f	class:MJPG_sender	file:
a_ptr	yolo_console_dll.cpp	/^    std::atomic<T *> a_ptr;$/;"	m	class:send_one_replaceable_object_t	file:
abs_mean	nightmare.c	/^float abs_mean(float *x, int n)$/;"	f
access	darkunistd.h	27;"	d
activate	activations.c	/^float activate(float x, ACTIVATION a)$/;"	f
activate_array	activations.c	/^void activate_array(float *x, const int n, const ACTIVATION a)$/;"	f
activate_array_cpu_custom	gemm.c	/^void activate_array_cpu_custom(float *x, const int n, const ACTIVATION a)$/;"	f
activate_array_hard_mish	activations.c	/^void activate_array_hard_mish(float *x, const int n, float * activation_input, float * output)$/;"	f
activate_array_mish	activations.c	/^void activate_array_mish(float *x, const int n, float * activation_input, float * output)$/;"	f
activate_array_normalize_channels	activations.c	/^void activate_array_normalize_channels(float *x, const int n, int batch, int channels, int wh_step, float *output)$/;"	f
activate_array_normalize_channels_softmax	activations.c	/^void activate_array_normalize_channels_softmax(float *x, const int n, int batch, int channels, int wh_step, float *output, int use_max_val)$/;"	f
activate_array_swish	activations.c	/^void activate_array_swish(float *x, const int n, float * output_sigmoid, float * output)$/;"	f
add_bias	convolutional_layer.c	/^void add_bias(float *output, float *biases, int batch, int n, int size)$/;"	f
add_pixel	image.cpp	/^static void add_pixel(image m, int x, int y, int c, float val)$/;"	f	file:
after_prediction	multidnn.h	/^    double after_prediction[MEASUREMENT_ITERATION];$/;"	m	struct:MULTI_DNN
alphanum_to_int	utils.c	/^int alphanum_to_int(char c)$/;"	f
ambig	getopt.h	/^static const char ambig[] = "ambiguous option -- %.*s";$/;"	v
anchors_comparator	detector.c	/^int anchors_comparator(const void *pa, const void *pb)$/;"	f
anchors_data_comparator	detector.c	/^int anchors_data_comparator(const float **pa, const float **pb)$/;"	f
anchors_t	detector.c	/^} anchors_t;$/;"	t	typeref:struct:__anon12	file:
append	httplib.h	/^  void append(char c) {$/;"	f	class:httplib::detail::stream_line_reader
argc	multidnn.h	/^    int argc;$/;"	m	struct:ARGS
args_swap	data.c	/^static load_args * args_swap = NULL;$/;"	v	file:
argv	multidnn.h	/^    char **argv;$/;"	m	struct:ARGS
asm_cpuid	gemm.c	/^void asm_cpuid(uint32_t* abcd, uint32_t eax)$/;"	f
assignments	matrix.h	/^    int *assignments;$/;"	m	struct:__anon1
assisted_excitation_forward	convolutional_layer.c	/^void assisted_excitation_forward(convolutional_layer l, network_state state)$/;"	f
avees_demo	avees.c	/^void avees_demo(char *cfgfile, char *weightfile, float thresh, float hier_thresh, int cam_index, const char *filename, char **names, int classes, int avgframes,$/;"	f
avees_detect_in_thread	avees.c	/^void *avees_detect_in_thread(void *ptr)$/;"	f
avees_detect_in_thread_sync	avees.c	/^void *avees_detect_in_thread_sync(void *ptr)$/;"	f
avees_fetch_in_thread	avees.c	/^void *avees_fetch_in_thread(void *ptr)$/;"	f
avees_fetch_in_thread_sync	avees.c	/^void *avees_fetch_in_thread_sync(void *ptr)$/;"	f
avees_frame	avees.c	/^struct frame_data avees_frame[3];$/;"	v	typeref:struct:frame_data
avees_get_wall_time	avees.c	/^double avees_get_wall_time()$/;"	f
average	darknet.c	/^void average(int argc, char *argv[])$/;"	f
averages_gaussian_yolo_deltas	gaussian_yolo_layer.c	/^void averages_gaussian_yolo_deltas(int class_index, int box_index, int stride, int classes, float *delta)$/;"	f
averages_yolo_deltas	yolo_layer.c	/^void averages_yolo_deltas(int class_index, int box_index, int stride, int classes, float *delta)$/;"	f
avg	yolo_v2_class.cpp	/^    float *avg;$/;"	m	struct:detector_gpu_t	file:
avg_flipped_yolo	yolo_layer.c	/^void avg_flipped_yolo(layer l)$/;"	f
avg_frames	avees.c	/^static int avg_frames;$/;"	v	file:
avg_frames	demo.c	/^static int avg_frames;$/;"	v	file:
avg_frames	multidnn.c	/^static int avg_frames;$/;"	v	file:
avgframes	multidnn.h	/^    int avgframes;$/;"	m	struct:DEMO_DETECTOR
avgpool_layer	avgpool_layer.h	/^typedef layer avgpool_layer;$/;"	t
axpy_cpu	blas.c	/^void axpy_cpu(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)$/;"	f
b	detector.c	/^    box b;$/;"	m	struct:__anon11	file:
b	yolo_layer.c	/^    int b;$/;"	m	struct:train_yolo_args	file:
back	list.h	/^    node *back;$/;"	m	struct:list
backward_activation_layer	activation_layer.c	/^void backward_activation_layer(layer l, network_state state)$/;"	f
backward_activation_layer_gpu	activation_layer.c	/^void backward_activation_layer_gpu(layer l, network_state state)$/;"	f
backward_avgpool_layer	avgpool_layer.c	/^void backward_avgpool_layer(const avgpool_layer l, network_state state)$/;"	f
backward_batchnorm_layer	batchnorm_layer.c	/^void backward_batchnorm_layer(const layer l, network_state state)$/;"	f
backward_batchnorm_layer_gpu	batchnorm_layer.c	/^void backward_batchnorm_layer_gpu(layer l, network_state state)$/;"	f
backward_bias	convolutional_layer.c	/^void backward_bias(float *bias_updates, float *delta, int batch, int n, int size)$/;"	f
backward_connected_layer	connected_layer.c	/^void backward_connected_layer(connected_layer l, network_state state)$/;"	f
backward_connected_layer_gpu	connected_layer.c	/^void backward_connected_layer_gpu(connected_layer l, network_state state)$/;"	f
backward_contrastive_layer	softmax_layer.c	/^void backward_contrastive_layer(contrastive_layer l, network_state state)$/;"	f
backward_contrastive_layer_gpu	softmax_layer.c	/^void backward_contrastive_layer_gpu(contrastive_layer layer, network_state state)$/;"	f
backward_conv_lstm_layer	conv_lstm_layer.c	/^void backward_conv_lstm_layer(layer l, network_state state)$/;"	f
backward_conv_lstm_layer_gpu	conv_lstm_layer.c	/^void backward_conv_lstm_layer_gpu(layer l, network_state state)$/;"	f
backward_convolutional_layer	convolutional_layer.c	/^void backward_convolutional_layer(convolutional_layer l, network_state state)$/;"	f
backward_cost_layer	cost_layer.c	/^void backward_cost_layer(const cost_layer l, network_state state)$/;"	f
backward_cost_layer_gpu	cost_layer.c	/^void backward_cost_layer_gpu(const cost_layer l, network_state state)$/;"	f
backward_crnn_layer	crnn_layer.c	/^void backward_crnn_layer(layer l, network_state state)$/;"	f
backward_crnn_layer_gpu	crnn_layer.c	/^void backward_crnn_layer_gpu(layer l, network_state state)$/;"	f
backward_crop_layer	crop_layer.c	/^void backward_crop_layer(const crop_layer l, network_state state){}$/;"	f
backward_crop_layer_gpu	crop_layer.c	/^void backward_crop_layer_gpu(const crop_layer l, network_state state){}$/;"	f
backward_deconvolutional_layer	deconvolutional_layer.c	/^void backward_deconvolutional_layer(deconvolutional_layer l, network_state state)$/;"	f
backward_detection_layer	detection_layer.c	/^void backward_detection_layer(const detection_layer l, network_state state)$/;"	f
backward_detection_layer_gpu	detection_layer.c	/^void backward_detection_layer_gpu(detection_layer l, network_state state)$/;"	f
backward_dropout_layer	dropout_layer.c	/^void backward_dropout_layer(dropout_layer l, network_state state)$/;"	f
backward_gaussian_yolo_layer	gaussian_yolo_layer.c	/^void backward_gaussian_yolo_layer(const layer l, network_state state)$/;"	f
backward_gaussian_yolo_layer_gpu	gaussian_yolo_layer.c	/^void backward_gaussian_yolo_layer_gpu(const layer l, network_state state)$/;"	f
backward_gru_layer	gru_layer.c	/^void backward_gru_layer(layer l, network_state state)$/;"	f
backward_gru_layer_gpu	gru_layer.c	/^void backward_gru_layer_gpu(layer l, network_state state)$/;"	f
backward_history_layer	conv_lstm_layer.c	/^void backward_history_layer(layer l, network_state state)$/;"	f
backward_history_layer_gpu	conv_lstm_layer.c	/^void backward_history_layer_gpu(const layer l, network_state state)$/;"	f
backward_implicit_layer	representation_layer.c	/^void backward_implicit_layer(const layer l, network_state state)$/;"	f
backward_implicit_layer_gpu	representation_layer.c	/^void backward_implicit_layer_gpu(const layer l, network_state state)$/;"	f
backward_local_avgpool_layer	maxpool_layer.c	/^void backward_local_avgpool_layer(const maxpool_layer l, network_state state)$/;"	f
backward_local_layer	local_layer.c	/^void backward_local_layer(local_layer l, network_state state)$/;"	f
backward_local_layer_gpu	local_layer.c	/^void backward_local_layer_gpu(local_layer l, network_state state)$/;"	f
backward_lstm_layer	lstm_layer.c	/^void backward_lstm_layer(layer l, network_state state)$/;"	f
backward_lstm_layer_gpu	lstm_layer.c	/^void backward_lstm_layer_gpu(layer l, network_state state)$/;"	f
backward_maxpool_layer	maxpool_layer.c	/^void backward_maxpool_layer(const maxpool_layer l, network_state state)$/;"	f
backward_network	network.c	/^void backward_network(network net, network_state state)$/;"	f
backward_normalization_layer	normalization_layer.c	/^void backward_normalization_layer(const layer layer, network_state state)$/;"	f
backward_normalization_layer_gpu	normalization_layer.c	/^void backward_normalization_layer_gpu(const layer layer, network_state state)$/;"	f
backward_region_layer	region_layer.c	/^void backward_region_layer(const region_layer l, network_state state)$/;"	f
backward_region_layer_gpu	region_layer.c	/^void backward_region_layer_gpu(region_layer l, network_state state)$/;"	f
backward_reorg_layer	reorg_layer.c	/^void backward_reorg_layer(const layer l, network_state state)$/;"	f
backward_reorg_layer_gpu	reorg_layer.c	/^void backward_reorg_layer_gpu(layer l, network_state state)$/;"	f
backward_reorg_old_layer	reorg_old_layer.c	/^void backward_reorg_old_layer(const layer l, network_state state)$/;"	f
backward_reorg_old_layer_gpu	reorg_old_layer.c	/^void backward_reorg_old_layer_gpu(layer l, network_state state)$/;"	f
backward_rnn_layer	rnn_layer.c	/^void backward_rnn_layer(layer l, network_state state)$/;"	f
backward_rnn_layer_gpu	rnn_layer.c	/^void backward_rnn_layer_gpu(layer l, network_state state)$/;"	f
backward_route_layer	route_layer.c	/^void backward_route_layer(const route_layer l, network_state state)$/;"	f
backward_route_layer_gpu	route_layer.c	/^void backward_route_layer_gpu(const route_layer l, network_state state)$/;"	f
backward_sam_layer	sam_layer.c	/^void backward_sam_layer(const layer l, network_state state)$/;"	f
backward_sam_layer_gpu	sam_layer.c	/^void backward_sam_layer_gpu(const layer l, network_state state)$/;"	f
backward_scale_channels_layer	scale_channels_layer.c	/^void backward_scale_channels_layer(const layer l, network_state state)$/;"	f
backward_scale_channels_layer_gpu	scale_channels_layer.c	/^void backward_scale_channels_layer_gpu(const layer l, network_state state)$/;"	f
backward_scale_cpu	batchnorm_layer.c	/^void backward_scale_cpu(float *x_norm, float *delta, int batch, int n, int size, float *scale_updates)$/;"	f
backward_shortcut_layer	shortcut_layer.c	/^void backward_shortcut_layer(const layer l, network_state state)$/;"	f
backward_shortcut_layer_gpu	shortcut_layer.c	/^void backward_shortcut_layer_gpu(const layer l, network_state state)$/;"	f
backward_shortcut_multilayer_cpu	blas.c	/^void backward_shortcut_multilayer_cpu(int size, int src_outputs, int batch, int n, int *outputs_of_layers,$/;"	f
backward_softmax_layer	softmax_layer.c	/^void backward_softmax_layer(const softmax_layer l, network_state net)$/;"	f
backward_softmax_layer_gpu	softmax_layer.c	/^void backward_softmax_layer_gpu(const softmax_layer layer, network_state state)$/;"	f
backward_upsample_layer	upsample_layer.c	/^void backward_upsample_layer(const layer l, network_state state)$/;"	f
backward_upsample_layer_gpu	upsample_layer.c	/^void backward_upsample_layer_gpu(const layer l, network_state state)$/;"	f
backward_yolo_layer	yolo_layer.c	/^void backward_yolo_layer(const layer l, network_state state)$/;"	f
backward_yolo_layer_gpu	yolo_layer.c	/^void backward_yolo_layer_gpu(const layer l, network_state state)$/;"	f
base64_encode	httplib.h	/^inline std::string base64_encode(const std::string &in) {$/;"	f	namespace:httplib::detail
base_dirs_	httplib.h	/^  std::vector<std::pair<std::string, std::string>> base_dirs_;$/;"	m	class:httplib::Server
basecfg	utils.c	/^char *basecfg(char *cfgfile)$/;"	f
batch	parser.c	/^    int batch;$/;"	m	struct:size_params	file:
bbox_comparator	compare.c	/^int bbox_comparator(const void *a, const void *b)$/;"	f
bbox_fight	compare.c	/^void bbox_fight(network net, sortable_bbox *a, sortable_bbox *b, int classes, int class_id)$/;"	f
bbox_t	csharp/YoloCSharpWrapper.cs	/^        public struct bbox_t$/;"	s	class:Darknet.YoloWrapper
bbox_update	compare.c	/^void bbox_update(sortable_bbox *a, sortable_bbox *b, int class_id, int result)$/;"	f
before_prediction	multidnn.h	/^    double before_prediction[MEASUREMENT_ITERATION];$/;"	m	struct:MULTI_DNN
benchmark	multidnn.h	/^    int benchmark;$/;"	m	struct:DEMO_CLASSI
benchmark	multidnn.h	/^    int benchmark;$/;"	m	struct:DEMO_DETECTOR
benchmark_layers	multidnn.h	/^    int benchmark_layers; $/;"	m	struct:DEMO_DETECTOR
benchmark_layers	multidnn.h	/^    int benchmark_layers;$/;"	m	struct:DEMO_CLASSI
best_3d_shift	image.cpp	/^int best_3d_shift(image a, image b, int min, int max)$/;"	f
best_3d_shift_r	image.cpp	/^int best_3d_shift_r(image a, image b, int min, int max)$/;"	f
best_class	box.h	/^	int best_class;$/;"	m	struct:detection_with_class
bilinear_interpolate	image.cpp	/^float bilinear_interpolate(image im, float x, float y, int c)$/;"	f
binarize_cpu	convolutional_layer.c	/^void binarize_cpu(float *input, int n, float *binary)$/;"	f
binarize_image	image.cpp	/^image binarize_image(image im)$/;"	f
binarize_input	convolutional_layer.c	/^void binarize_input(float *input, int n, int size, float *binary)$/;"	f
binarize_weights	convolutional_layer.c	/^void binarize_weights(float *weights, int n, int size, float *binary)$/;"	f
binary_align_weights	convolutional_layer.c	/^void binary_align_weights(convolutional_layer *l)$/;"	f
binary_int32_printf	gemm.c	/^void binary_int32_printf(uint32_t src) {$/;"	f
binary_int64_printf	gemm.c	/^void binary_int64_printf(uint64_t src) {$/;"	f
binary_transpose_align_input	convolutional_layer.c	/^size_t binary_transpose_align_input(int k, int n, float *b, char **t_bit_input, size_t ldb_align, int bit_align)$/;"	f
bind_internal	httplib.h	/^inline int Server::bind_internal(const char *host, int port, int socket_flags) {$/;"	f	class:httplib::Server
bind_to_any_port	httplib.h	/^inline int Server::bind_to_any_port(const char *host, int socket_flags) {$/;"	f	class:httplib::Server
bind_to_port	httplib.h	/^inline bool Server::bind_to_port(const char *host, int port, int socket_flags) {$/;"	f	class:httplib::Server
bit_to_float	convolutional_layer.c	/^void bit_to_float(unsigned char *src, float *dst, size_t size, size_t filters, float *mean_arr) {$/;"	f
blasHandle	dark_cuda.c	/^static cublasHandle_t blasHandle[16];$/;"	v	file:
blasInit	dark_cuda.c	/^static int blasInit[16] = { 0 };$/;"	v	file:
blas_handle	dark_cuda.c	/^cublasHandle_t blas_handle()$/;"	f
blend_image	image.cpp	/^image blend_image(image fore, image back, float alpha)$/;"	f
blend_images	data.c	/^void blend_images(image new_img, float alpha, image old_img, float beta)$/;"	f
blend_images_cv	image_opencv.cpp	/^extern "C" void blend_images_cv(image new_img, float alpha, image old_img, float beta)$/;"	f
blend_truth	data.c	/^void blend_truth(float *new_truth, int boxes, int truth_size, float *old_truth)$/;"	f
blend_truth_mosaic	data.c	/^void blend_truth_mosaic(float *new_truth, int boxes, int truth_size, float *old_truth, int w, int h, float cut_x, float cut_y, int i_mixup,$/;"	f
blur_image	image_opencv.cpp	/^extern "C" image blur_image(image src_img, int ksize)$/;"	f
board_to_string	go.c	/^void board_to_string(char *s, float *board)$/;"	f
body	httplib.h	/^  std::string body;$/;"	m	struct:httplib::Request
body	httplib.h	/^  std::string body;$/;"	m	struct:httplib::Response
border_image	image.cpp	/^image border_image(image a, int border)$/;"	f
box_c	box.c	/^boxabs box_c(box a, box b) {$/;"	f
box_ciou	box.c	/^float box_ciou(box a, box b)$/;"	f
box_diou	box.c	/^float box_diou(box a, box b)$/;"	f
box_diounms	box.c	/^float box_diounms(box a, box b, float beta1)$/;"	f
box_giou	box.c	/^float box_giou(box a, box b)$/;"	f
box_intersection	box.c	/^float box_intersection(box a, box b)$/;"	f
box_iou	box.c	/^float box_iou(box a, box b)$/;"	f
box_iou_kind	box.c	/^float box_iou_kind(box a, box b, IOU_LOSS iou_kind)$/;"	f
box_prob	detector.c	/^} box_prob;$/;"	t	typeref:struct:__anon11	file:
box_rmse	box.c	/^float box_rmse(box a, box b)$/;"	f
box_to_boxabs	utils.c	/^boxabs box_to_boxabs(const box* b, const int img_w, const int img_h, const int bounds_check)$/;"	f
box_union	box.c	/^float box_union(box a, box b)$/;"	f
buff_index	avees.c	/^static int buff_index;$/;"	v	file:
buffer	httplib.h	/^  std::string buffer;$/;"	m	class:httplib::BufferStream
built_with_cuda	yolo_v2_class.cpp	/^bool built_with_cuda(){$/;"	f
built_with_cudnn	yolo_v2_class.cpp	/^bool built_with_cudnn(){$/;"	f
built_with_opencv	yolo_v2_class.cpp	/^bool built_with_opencv(){$/;"	f
c	parser.c	/^    int c;$/;"	m	struct:size_params	file:
ca_cert_dir_path_	httplib.h	/^  std::string ca_cert_dir_path_;$/;"	m	class:httplib::SSLClient
ca_cert_file_path_	httplib.h	/^  std::string ca_cert_file_path_;$/;"	m	class:httplib::SSLClient
caffe_set	col2im.c	/^void caffe_set(const int N, const float alpha, float* Y) {$/;"	f
calc_anchors	detector.c	/^void calc_anchors(char *datacfg, int num_of_clusters, int width, int height, int show)$/;"	f
calculate_binary_weights	network.c	/^void calculate_binary_weights(network net)$/;"	f
calculate_liberties	go.c	/^int *calculate_liberties(float *board)$/;"	f
calculate_loss	nightmare.c	/^void calculate_loss(float *output, float *delta, int n, float thresh)$/;"	f
callback_mouse_click	image_opencv.cpp	/^void callback_mouse_click(int event, int x, int y, int flags, void* user_data)$/;"	f
calloc_error	utils.c	/^void calloc_error(const size_t size, const char * const filename, const char * const funcname, const int line)$/;"	f
cam_index	multidnn.h	/^    int cam_index;$/;"	m	struct:DEMO_CLASSI
cam_index	multidnn.h	/^    int cam_index;$/;"	m	struct:DEMO_DETECTOR
can_compress	httplib.h	/^inline bool can_compress(const std::string &content_type) {$/;"	f	namespace:httplib::detail
candidates	csharp/YoloCSharpWrapper.cs	/^            public bbox_t[] candidates;$/;"	f	struct:Darknet.YoloWrapper.BboxContainer
cap	avees.c	/^static cap_cv *cap;$/;"	v	file:
cap	demo.c	/^static cap_cv *cap;$/;"	v	file:
cap	multidnn.c	/^static cap_cv *cap;$/;"	v	file:
cap_cv	image_opencv.h	/^typedef void* cap_cv;$/;"	t
centers	matrix.h	/^    matrix centers;$/;"	m	struct:__anon1
cfgfile	multidnn.h	/^    char *cfgfile;$/;"	m	struct:DEMO_CLASSI
cfgfile	multidnn.h	/^    char *cfgfile;$/;"	m	struct:DEMO_DETECTOR
change_leaves	tree.c	/^void change_leaves(tree *t, char *leaf_list)$/;"	f
chdir	darkunistd.h	34;"	d
check_array_is_inf	utils.c	/^int check_array_is_inf(float *arr, int size)$/;"	f
check_array_is_nan	utils.c	/^int check_array_is_nan(float *arr, int size)$/;"	f
check_classes_id	http_stream.cpp	/^int check_classes_id(detection det1, detection det2, float thresh)$/;"	f
check_cpu_features	gemm.c	/^void check_cpu_features(void) {$/;"	f
check_cuda	yolo_v2_class.cpp	/^void check_cuda(cudaError_t status) {$/;"	f
check_error	dark_cuda.c	/^void check_error(cudaError_t status)$/;"	f
check_error_extended	dark_cuda.c	/^void check_error_extended(cudaError_t status, const char *file, int line, const char *date_time)$/;"	f
check_host_name	httplib.h	/^inline bool SSLClient::check_host_name(const char *pattern,$/;"	f	class:httplib::SSLClient
check_mistakes	detector.c	/^int check_mistakes = 0;$/;"	v
check_prob	http_stream.cpp	/^int check_prob(detection det, float thresh)$/;"	f
check_sim	blas.c	/^int check_sim(size_t i, size_t j, contrastive_params *contrast_p, int contrast_p_size)$/;"	f
ci	httplib.h	/^struct ci {$/;"	s	namespace:httplib::detail
cla_count	multidnn.c	/^volatile int cla_count = 0;$/;"	v
class_count	yolo_layer.c	/^    int class_count;$/;"	m	struct:train_yolo_args	file:
class_id	box.c	/^    int class_id;$/;"	m	struct:__anon5	file:
class_id	compare.c	/^    int class_id;$/;"	m	struct:__anon8	file:
class_id	detector.c	/^    int class_id;$/;"	m	struct:__anon11	file:
classes	compare.c	/^    int classes;$/;"	m	struct:__anon8	file:
classes	multidnn.h	/^    int classes;$/;"	m	struct:DEMO_DETECTOR
classification_display_flag	multidnn.c	/^volatile int classification_display_flag;$/;"	v
classification_idx	multidnn.c	/^int classification_idx;$/;"	v
clip_value	gaussian_yolo_layer.c	/^static inline float clip_value(float val, const float max_val)$/;"	f	file:
clip_value	softmax_layer.c	/^static inline float clip_value(float val, const float max_val)$/;"	f	file:
clip_value	yolo_layer.c	/^static inline float clip_value(float val, const float max_val)$/;"	f	file:
clock_gettime	gettimeofday.c	/^int clock_gettime(int dummy, struct timespec* ct)$/;"	f
close_all	http_stream.cpp	/^    void close_all()$/;"	f	class:JSON_sender
close_all	http_stream.cpp	/^    void close_all()$/;"	f	class:MJPG_sender
close_all_sockets	http_stream.cpp	/^    int close_all_sockets;$/;"	m	class:JSON_sender	file:
close_all_sockets	http_stream.cpp	/^    int close_all_sockets;$/;"	m	class:MJPG_sender	file:
close_socket	http_stream.cpp	/^static int close_socket(SOCKET s) {$/;"	f	file:
close_socket	httplib.h	/^inline int close_socket(socket_t sock) {$/;"	f	namespace:httplib::detail
closest_center	matrix.c	/^int closest_center(float *datum, matrix centers)$/;"	f
coco_classes	coco.c	/^char *coco_classes[] = {"person","bicycle","car","motorcycle","airplane","bus","train","truck","boat","traffic light","fire hydrant","stop sign","parking meter","bench","bird","cat","dog","horse","sheep","cow","elephant","bear","zebra","giraffe","backpack","umbrella","handbag","tie","suitcase","frisbee","skis","snowboard","sports ball","kite","baseball bat","baseball glove","skateboard","surfboard","tennis racket","bottle","wine glass","cup","fork","knife","spoon","bowl","banana","apple","sandwich","orange","broccoli","carrot","hot dog","pizza","donut","cake","chair","couch","potted plant","bed","dining table","toilet","tv","laptop","mouse","remote","keyboard","cell phone","microwave","oven","toaster","sink","refrigerator","book","clock","vase","scissors","teddy bear","hair drier","toothbrush"};$/;"	v
coco_ids	coco.c	/^int coco_ids[] = {1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,70,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90};$/;"	v
coco_ids	detector.c	/^static int coco_ids[] = { 1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,70,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90 };$/;"	v	file:
col2im_add_pixel	col2im.c	/^void col2im_add_pixel(float *im, int height, int width, int channels,$/;"	f
col2im_cpu	col2im.c	/^void col2im_cpu(float* data_col,$/;"	f
col2im_cpu_ext	col2im.c	/^void col2im_cpu_ext(const float* data_col, const int channels,$/;"	f
collapse_image_layers	image.cpp	/^image collapse_image_layers(image source, int border)$/;"	f
collapse_images_horz	image.cpp	/^image collapse_images_horz(image *ims, int n)$/;"	f
collapse_images_vert	image.cpp	/^image collapse_images_vert(image *ims, int n)$/;"	f
colors	image.cpp	/^float colors[6][3] = { {1,0,1}, {0,0,1},{0,1,1},{0,1,0},{1,1,0},{1,0,0} };$/;"	v
combine_train_valid_networks	network.c	/^network combine_train_valid_networks(network net_train, network net_map)$/;"	f
compare_by_lefts	image.cpp	/^int compare_by_lefts(const void *a_ptr, const void *b_ptr) {$/;"	f
compare_by_probs	image.cpp	/^int compare_by_probs(const void *a_ptr, const void *b_ptr) {$/;"	f
compare_gaussian_yolo_class	gaussian_yolo_layer.c	/^int compare_gaussian_yolo_class(float *output, int classes, int class_index, int stride, float objectness, int class_id, float conf_thresh)$/;"	f
compare_networks	network.c	/^void compare_networks(network n1, network n2, data test)$/;"	f
compare_yolo_class	yolo_layer.c	/^int compare_yolo_class(float *output, int classes, int class_index, int stride, float objectness, int class_id, float conf_thresh)$/;"	f
comparison_fn_t	detector.c	/^typedef __compar_fn_t comparison_fn_t;$/;"	t	file:
complete_time	multidnn.h	/^    double complete_time[MEASUREMENT_ITERATION];$/;"	m	struct:MULTI_DNN
composite_3d	image.cpp	/^void composite_3d(char *f1, char *f2, char *out, int delta)$/;"	f
composite_image	image.cpp	/^void composite_image(image source, image dest, int dx, int dy)$/;"	f
compress	httplib.h	/^inline bool compress(std::string &content) {$/;"	f	namespace:httplib::detail
concat_data	data.c	/^data concat_data(data d1, data d2)$/;"	f
concat_datas	data.c	/^data concat_datas(data *d, int n)$/;"	f
concat_matrix	data.c	/^matrix concat_matrix(matrix m1, matrix m2)$/;"	f
cond_	httplib.h	/^  std::condition_variable cond_;$/;"	m	class:httplib::ThreadPool
connected_layer	connected_layer.h	/^typedef layer connected_layer;$/;"	t
const_cpu	blas.c	/^void const_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
constrain	utils.c	/^float constrain(float min, float max, float a)$/;"	f
constrain_cpu	blas.c	/^void constrain_cpu(int size, float ALPHA, float *X)$/;"	f
constrain_image	image.cpp	/^void constrain_image(image im)$/;"	f
constrain_int	utils.c	/^int constrain_int(int a, int min, int max)$/;"	f
consume_frame	image_opencv.cpp	/^extern "C" void consume_frame(cap_cv *cap){$/;"	f
content	httplib.h	/^  std::string content;$/;"	m	struct:httplib::MultipartFormData
content_length	httplib.h	/^  size_t content_length;$/;"	m	struct:httplib::Request
content_length	httplib.h	/^  size_t content_length;$/;"	m	struct:httplib::Response
content_provider	httplib.h	/^  ContentProvider content_provider;$/;"	m	struct:httplib::Request
content_provider	httplib.h	/^  ContentProviderWithCloser content_provider;$/;"	m	struct:httplib::Response
content_provider_resource_releaser	httplib.h	/^  std::function<void()> content_provider_resource_releaser;$/;"	m	struct:httplib::Response
content_receiver	httplib.h	/^  ContentReceiver content_receiver;$/;"	m	struct:httplib::Request
content_type	httplib.h	/^  std::string content_type;$/;"	m	struct:httplib::MultipartFile
content_type	httplib.h	/^  std::string content_type;$/;"	m	struct:httplib::MultipartFormData
contrastive_layer	softmax_layer.h	/^typedef layer contrastive_layer;$/;"	t
convolution_2d	gemm.c	/^void convolution_2d(int w, int h, int ksize, int n, int c, int pad, int stride,$/;"	f
convolution_2d_old	gemm.c	/^void convolution_2d_old(int w, int h, int ksize, int n, int c, int pad, int stride,$/;"	f
convolution_repacked	gemm.c	/^void convolution_repacked(uint32_t *packed_input, uint32_t *packed_weights, float *output,$/;"	f
convolutional_layer	convolutional_layer.h	/^typedef layer convolutional_layer;$/;"	t
convolutional_out_height	convolutional_layer.c	/^int convolutional_out_height(convolutional_layer l)$/;"	f
convolutional_out_width	convolutional_layer.c	/^int convolutional_out_width(convolutional_layer l)$/;"	f
copy	matrix.c	/^void copy(float *x, float *y, int n)$/;"	f
copy_cpu	blas.c	/^void copy_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
copy_cudnn_descriptors	network.c	/^void copy_cudnn_descriptors(layer src, layer *dst)$/;"	f
copy_image	image.cpp	/^image copy_image(image p)$/;"	f
copy_image_from_bytes	image.cpp	/^LIB_API void copy_image_from_bytes(image im, char *pdata)$/;"	f
copy_image_inplace	image.cpp	/^void copy_image_inplace(image src, image dst)$/;"	f
copy_string	utils.c	/^char *copy_string(char *s)$/;"	f
copy_weights_net	network.c	/^void copy_weights_net(network net_train, network *net_map)$/;"	f
correct_boxes	data.c	/^void correct_boxes(box_label *boxes, int n, float dx, float dy, float sx, float sy, int flip)$/;"	f
correct_gaussian_yolo_boxes	gaussian_yolo_layer.c	/^void correct_gaussian_yolo_boxes(detection *dets, int n, int w, int h, int netw, int neth, int relative, int letter)$/;"	f
correct_region_boxes	region_layer.c	/^void correct_region_boxes(detection *dets, int n, int w, int h, int netw, int neth, int relative)$/;"	f
correct_yolo_boxes	yolo_layer.c	/^void correct_yolo_boxes(detection *dets, int n, int w, int h, int netw, int neth, int relative, int letter)$/;"	f
cosine_similarity	blas.c	/^float cosine_similarity(float *A, float *B, unsigned int feature_size)$/;"	f
cost_layer	cost_layer.h	/^typedef layer cost_layer;$/;"	t
count	multidnn.h	/^    int count;$/;"	m	struct:MULTI_DNN
count	yolo_layer.c	/^    int count;$/;"	m	struct:train_yolo_args	file:
count256	gemm.c	/^static inline __m256i count256(__m256i v) {$/;"	f	file:
count_fields	utils.c	/^int count_fields(char *line)$/;"	f
cpu_gemm	cpu_gemm.c	/^void cpu_gemm(int TA, int TB, int M, int N, int K, float ALPHA,$/;"	f
cpu_gemm_nn	cpu_gemm.c	/^void cpu_gemm_nn(int TA, int TB, int M, int N, int K, float ALPHA,$/;"	f
cpu_gemm_nt	cpu_gemm.c	/^void cpu_gemm_nt(int TA, int TB, int M, int N, int K, float ALPHA,$/;"	f
cpu_gemm_tn	cpu_gemm.c	/^void cpu_gemm_tn(int TA, int TB, int M, int N, int K, float ALPHA,$/;"	f
cpu_gemm_tt	cpu_gemm.c	/^void cpu_gemm_tt(int TA, int TB, int M, int N, int K, float ALPHA,$/;"	f
cpuid	gemm.c	/^void cpuid(int info[4], int InfoType) {$/;"	f
cpuid	gemm.c	610;"	d	file:
create_client_socket	httplib.h	/^inline socket_t Client::create_client_socket() const {$/;"	f	class:httplib::Client
create_convolutional_cudnn_tensors	convolutional_layer.c	/^void create_convolutional_cudnn_tensors(layer *l)$/;"	f
create_maxpool_cudnn_tensors	maxpool_layer.c	/^void create_maxpool_cudnn_tensors(layer *l)$/;"	f
create_server_socket	httplib.h	/^inline socket_t Server::create_server_socket(const char *host, int port,$/;"	f	class:httplib::Server
create_socket	httplib.h	/^socket_t create_socket(const char *host, int port, Fn fn,$/;"	f	namespace:httplib::detail
create_video_writer	image_opencv.cpp	/^extern "C" write_cv *create_video_writer(char *out_filename, char c1, char c2, char c3, char c4, int fps, int width, int height, int is_color)$/;"	f
create_window_cv	image_opencv.cpp	/^extern "C" void create_window_cv(char const* window_name, int full_screen, int width, int height)$/;"	f
crop_image	image.cpp	/^image crop_image(image im, int dx, int dy, int w, int h)$/;"	f
crop_layer	crop_layer.h	/^typedef layer crop_layer;$/;"	t
csv_to_matrix	matrix.c	/^matrix csv_to_matrix(char *filename)$/;"	f
ctx_	httplib.h	/^  SSL_CTX *ctx_;$/;"	m	class:httplib::SSLClient
ctx_	httplib.h	/^  SSL_CTX *ctx_;$/;"	m	class:httplib::SSLServer
ctx_mutex_	httplib.h	/^  std::mutex ctx_mutex_;$/;"	m	class:httplib::SSLClient
ctx_mutex_	httplib.h	/^  std::mutex ctx_mutex_;$/;"	m	class:httplib::SSLServer
cublas_check_error	dark_cuda.c	/^void cublas_check_error(cublasStatus_t status)$/;"	f
cublas_check_error_extended	dark_cuda.c	/^void cublas_check_error_extended(cublasStatus_t status, const char *file, int line, const char *date_time)$/;"	f
cudaEventWaitDefault	dark_cuda.c	335;"	d	file:
cuda_compare	dark_cuda.c	/^float cuda_compare(float *x_gpu, float *x, size_t n, char *s)$/;"	f
cuda_debug_sync	dark_cuda.c	/^int cuda_debug_sync = 0;$/;"	v
cuda_free	dark_cuda.c	/^void cuda_free(float *x_gpu)$/;"	f
cuda_free_host	dark_cuda.c	/^void cuda_free_host(float *x_cpu)$/;"	f
cuda_get_context	dark_cuda.c	/^void *cuda_get_context()$/;"	f
cuda_get_device	dark_cuda.c	/^int cuda_get_device()$/;"	f
cuda_gridsize	dark_cuda.c	/^dim3 cuda_gridsize(size_t n){$/;"	f
cuda_make_array	dark_cuda.c	/^float *cuda_make_array(float *x, size_t n)$/;"	f
cuda_make_array_pinned	dark_cuda.c	/^float *cuda_make_array_pinned(float *x, size_t n)$/;"	f
cuda_make_array_pinned_preallocated	dark_cuda.c	/^float *cuda_make_array_pinned_preallocated(float *x, size_t n)$/;"	f
cuda_make_array_pointers	dark_cuda.c	/^void **cuda_make_array_pointers(void **x, size_t n)$/;"	f
cuda_make_int_array	dark_cuda.c	/^int *cuda_make_int_array(size_t n)$/;"	f
cuda_make_int_array_new_api	dark_cuda.c	/^int *cuda_make_int_array_new_api(int *x, size_t n)$/;"	f
cuda_pull_array	dark_cuda.c	/^void cuda_pull_array(float *x_gpu, float *x, size_t n)$/;"	f
cuda_pull_array_async	dark_cuda.c	/^void cuda_pull_array_async(float *x_gpu, float *x, size_t n)$/;"	f
cuda_push_array	dark_cuda.c	/^void cuda_push_array(float *x_gpu, float *x, size_t n)$/;"	f
cuda_random	dark_cuda.c	/^void cuda_random(float *x_gpu, size_t n)$/;"	f
cuda_set_device	dark_cuda.c	/^void cuda_set_device(int n) {}$/;"	f
cuda_set_device	dark_cuda.c	/^void cuda_set_device(int n)$/;"	f
cudnnHandle	dark_cuda.c	/^static cudnnHandle_t cudnnHandle[16];$/;"	v	file:
cudnnInit	dark_cuda.c	/^static int cudnnInit[16] = { 0 };$/;"	v	file:
cudnn_check_error	dark_cuda.c	/^void cudnn_check_error(cudnnStatus_t status)$/;"	f
cudnn_check_error_extended	dark_cuda.c	/^void cudnn_check_error_extended(cudnnStatus_t status, const char *file, int line, const char *date_time)$/;"	f
cudnn_convolutional_setup	convolutional_layer.c	/^void cudnn_convolutional_setup(layer *l, int cudnn_preference, size_t workspace_size_specify)$/;"	f
cudnn_fastest	dark_cuda.h	/^enum {cudnn_fastest, cudnn_smallest, cudnn_specify};$/;"	e	enum:__anon9
cudnn_handle	dark_cuda.c	/^cudnnHandle_t cudnn_handle()$/;"	f
cudnn_local_avgpool_setup	maxpool_layer.c	/^void cudnn_local_avgpool_setup(layer *l)$/;"	f
cudnn_maxpool_setup	maxpool_layer.c	/^void cudnn_maxpool_setup(layer *l)$/;"	f
cudnn_smallest	dark_cuda.h	/^enum {cudnn_fastest, cudnn_smallest, cudnn_specify};$/;"	e	enum:__anon9
cudnn_specify	dark_cuda.h	/^enum {cudnn_fastest, cudnn_smallest, cudnn_specify};$/;"	e	enum:__anon9
current_class_id	compare.c	/^int current_class_id = 0;$/;"	v
custom_atomic_load_int	http_stream.cpp	/^int custom_atomic_load_int(volatile int* obj)$/;"	f
custom_atomic_store_int	http_stream.cpp	/^void custom_atomic_store_int(volatile int* obj, int desr)$/;"	f
custom_attr_t	http_stream.h	/^typedef void* custom_attr_t;$/;"	t
custom_create_thread	http_stream.cpp	/^int custom_create_thread(custom_thread_t * tid, const custom_attr_t * attr, void *(*func) (void *), void *arg)$/;"	f
custom_get_region_detections	network.c	/^void custom_get_region_detections(layer l, int w, int h, int net_w, int net_h, float thresh, int *map, float hier, int relative, detection *dets, int letter)$/;"	f
custom_hash	utils.c	/^unsigned long custom_hash(char *str)$/;"	f
custom_join	http_stream.cpp	/^int custom_join(custom_thread_t tid, void **value_ptr)$/;"	f
custom_thread_t	http_stream.h	/^typedef void* custom_thread_t;$/;"	t
cv_draw_object	image_opencv.cpp	/^extern "C" void cv_draw_object(image sized, float *truth_cpu, int max_boxes, int num_truth, int *it_num_set, float *lr_set, int *boxonly, int classes, char **names)$/;"	f
cv_images	avees.c	/^static mat_cv** cv_images;$/;"	v	file:
cv_images	demo.c	/^static mat_cv** cv_images;$/;"	v	file:
cv_images	multidnn.c	/^static mat_cv** cv_images;$/;"	v	file:
cycle_time	avees.c	/^static double cycle_time;$/;"	v	file:
cycle_time_array	avees.c	/^double cycle_time_array[CYCLE_IDX];$/;"	v
cycle_time_sum	avees.c	/^double cycle_time_sum;$/;"	v
data	go.c	/^    char **data;$/;"	m	struct:__anon3	file:
datacfg	multidnn.h	/^    char *datacfg;$/;"	m	struct:DEMO_CLASSI
dbox	box.h	/^} dbox;$/;"	t	typeref:struct:__anon2
decode_box	box.c	/^box decode_box(box b, box anchor)$/;"	f
decode_url	httplib.h	/^inline std::string decode_url(const std::string &s) {$/;"	f	namespace:httplib::detail
decompress	httplib.h	/^  bool decompress(const char *data, size_t data_length, T callback) {$/;"	f	class:httplib::detail::decompressor
decompressor	httplib.h	/^  decompressor() {$/;"	f	class:httplib::detail::decompressor
decompressor	httplib.h	/^class decompressor {$/;"	c	namespace:httplib::detail
deconvolutional_layer	deconvolutional_layer.h	/^typedef layer deconvolutional_layer;$/;"	t
deconvolutional_out_height	deconvolutional_layer.c	/^int deconvolutional_out_height(deconvolutional_layer l)$/;"	f
deconvolutional_out_size	deconvolutional_layer.c	/^int deconvolutional_out_size(deconvolutional_layer l)$/;"	f
deconvolutional_out_width	deconvolutional_layer.c	/^int deconvolutional_out_width(deconvolutional_layer l)$/;"	f
deinter_cpu	blas.c	/^void deinter_cpu(int NX, float *X, int NY, float *Y, int B, float *OUT)$/;"	f
del_arg	utils.c	/^void del_arg(int argc, char **argv, int index)$/;"	f
delete_handlers_	httplib.h	/^  Handlers delete_handlers_;$/;"	m	class:httplib::Server
delete_json_sender	http_stream.cpp	/^void delete_json_sender()$/;"	f
delta_gaussian_yolo_box	gaussian_yolo_layer.c	/^float delta_gaussian_yolo_box(box truth, float *x, float *biases, int n, int index, int i, int j, int lw, int lh, int w, int h, float *delta,$/;"	f
delta_gaussian_yolo_class	gaussian_yolo_layer.c	/^void delta_gaussian_yolo_class(float *output, float *delta, int index, int class_id, int classes, int stride, float *avg_cat, float label_smooth_eps, float *classes_multipliers, float cls_normalizer)$/;"	f
delta_region_box	region_layer.c	/^float delta_region_box(box truth, float *x, float *biases, int n, int index, int i, int j, int w, int h, float *delta, float scale)$/;"	f
delta_region_class	region_layer.c	/^void delta_region_class(float *output, float *delta, int index, int class_id, int classes, tree *hier, float scale, float *avg_cat, int focal_loss)$/;"	f
delta_yolo_box	yolo_layer.c	/^ious delta_yolo_box(box truth, float *x, float *biases, int n, int index, int i, int j, int lw, int lh, int w, int h, float *delta, float scale, int stride, float iou_normalizer, IOU_LOSS iou_loss, int accumulate, float max_delta, int *rewritten_bbox, int new_coords)$/;"	f
delta_yolo_class	yolo_layer.c	/^void delta_yolo_class(float *output, float *delta, int index, int class_id, int classes, int stride, float *avg_cat, int focal_loss, float label_smooth_eps, float *classes_multipliers, float cls_normalizer)$/;"	f
demo	demo.c	/^void demo(char *cfgfile, char *weightfile, float thresh, float hier_thresh, int cam_index, const char *filename, char **names, int classes, int avgframes,$/;"	f
demo_alphabet	avees.c	/^static image **demo_alphabet;$/;"	v	file:
demo_alphabet	demo.c	/^static image **demo_alphabet;$/;"	v	file:
demo_alphabet	multidnn.c	/^static image **demo_alphabet;$/;"	v	file:
demo_art	art.c	/^void demo_art(char *cfgfile, char *weightfile, int cam_index)$/;"	f
demo_classes	avees.c	/^static int demo_classes;$/;"	v	file:
demo_classes	demo.c	/^static int demo_classes;$/;"	v	file:
demo_classes	multidnn.c	/^static int demo_classes;$/;"	v	file:
demo_classification_thread	multidnn.c	/^void *demo_classification_thread(void *arg)$/;"	f
demo_classifier	classifier.c	/^void demo_classifier(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename, int benchmark, int benchmark_layers)$/;"	f
demo_detector_thread	multidnn.c	/^void *demo_detector_thread(void *arg)$/;"	f
demo_ext_output	avees.c	/^static int demo_ext_output = 0;$/;"	v	file:
demo_ext_output	demo.c	/^static int demo_ext_output = 0;$/;"	v	file:
demo_ext_output	multidnn.c	/^static int demo_ext_output = 0;$/;"	v	file:
demo_index	avees.c	/^static int demo_index = 0;$/;"	v	file:
demo_index	demo.c	/^static int demo_index = 0;$/;"	v	file:
demo_index	multidnn.c	/^static int demo_index = 0;$/;"	v	file:
demo_index	yolo_v2_class.cpp	/^    int demo_index;$/;"	m	struct:detector_gpu_t	file:
demo_json_port	avees.c	/^static int demo_json_port = -1;$/;"	v	file:
demo_json_port	demo.c	/^static int demo_json_port = -1;$/;"	v	file:
demo_json_port	multidnn.c	/^static int demo_json_port = -1;$/;"	v	file:
demo_names	avees.c	/^static char **demo_names;$/;"	v	file:
demo_names	demo.c	/^static char **demo_names;$/;"	v	file:
demo_names	multidnn.c	/^static char **demo_names;$/;"	v	file:
demo_skip_frame	avees.c	/^static bool demo_skip_frame = false;$/;"	v	file:
demo_skip_frame	demo.c	/^static bool demo_skip_frame = false;$/;"	v	file:
demo_skip_frame	multidnn.c	/^static bool demo_skip_frame = false;$/;"	v	file:
demo_thread	multidnn.c	/^pthread_t demo_thread[2];$/;"	v
demo_thresh	avees.c	/^static float demo_thresh = 0;$/;"	v	file:
demo_thresh	demo.c	/^static float demo_thresh = 0;$/;"	v	file:
demo_thresh	multidnn.c	/^static float demo_thresh = 0;$/;"	v	file:
denormalize_connected_layer	connected_layer.c	/^void denormalize_connected_layer(layer l)$/;"	f
denormalize_convolutional_layer	convolutional_layer.c	/^void denormalize_convolutional_layer(convolutional_layer l)$/;"	f
denormalize_net	darknet.c	/^void denormalize_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
derivative	box.c	/^dbox derivative(box a, box b)$/;"	f
destroy_all_windows_cv	image_opencv.cpp	/^extern "C" void destroy_all_windows_cv() {}$/;"	f
destroy_all_windows_cv	image_opencv.cpp	/^extern "C" void destroy_all_windows_cv()$/;"	f
det	box.h	/^	detection det;$/;"	m	struct:detection_with_class
det_count	http_stream.cpp	/^    int det_count;$/;"	m	struct:detection_t	file:
det_count	multidnn.c	/^volatile int det_count = 0;$/;"	v
det_img	avees.c	/^mat_cv* det_img;$/;"	v
det_img	demo.c	/^mat_cv* det_img;$/;"	v
det_img	multidnn.c	/^mat_cv* det_img;$/;"	v
det_s	avees.c	/^static image det_s;$/;"	v	file:
det_s	demo.c	/^static image det_s;$/;"	v	file:
det_s	multidnn.c	/^static image det_s;$/;"	v	file:
detail	httplib.h	/^namespace detail {$/;"	n	namespace:httplib
detect	yolo_v2_class.cpp	/^LIB_API std::vector<bbox_t> Detector::detect(image_t img, float thresh, bool use_mean)$/;"	f	class:Detector
detect	yolo_v2_class.cpp	/^LIB_API std::vector<bbox_t> Detector::detect(std::string image_filename, float thresh, bool use_mean)$/;"	f	class:Detector
detectBatch	yolo_v2_class.cpp	/^LIB_API std::vector<std::vector<bbox_t>> Detector::detectBatch(image_t img, int batch_size, int width, int height, float thresh, bool make_nms)$/;"	f	class:Detector
detect_idx	multidnn.c	/^int detect_idx;$/;"	v
detect_image	yolo_v2_class.cpp	/^int detect_image(const char *filename, bbox_t_container &container)$/;"	f
detect_in_thread	demo.c	/^void *detect_in_thread(void *ptr)$/;"	f
detect_in_thread_sync	demo.c	/^void *detect_in_thread_sync(void *ptr)$/;"	f
detect_mat	yolo_v2_class.cpp	/^int detect_mat(const uint8_t* data, const size_t data_length, bbox_t_container &container) {$/;"	f
detect_section	multidnn.h	/^    ImageFrame detect_section;$/;"	m	struct:MULTI_DNN
detection_layer	detection_layer.h	/^typedef layer detection_layer;$/;"	t
detection_t	http_stream.cpp	/^    detection_t(detection det) : detection(det), det_count(0)$/;"	f	struct:detection_t
detection_t	http_stream.cpp	/^    detection_t(detection_t const& det) : detection(det)$/;"	f	struct:detection_t
detection_t	http_stream.cpp	/^struct detection_t : detection {$/;"	s	file:
detection_to_json	network.c	/^char *detection_to_json(detection *dets, int nboxes, int classes, char **names, long long int frame_id, char *filename)$/;"	f
detection_with_class	box.h	/^typedef struct detection_with_class {$/;"	s
detection_with_class	box.h	/^} detection_with_class;$/;"	t	typeref:struct:detection_with_class
detections_comparator	detector.c	/^int detections_comparator(const void *pa, const void *pb)$/;"	f
detector	yolo_v2_class.cpp	/^static std::unique_ptr<Detector> detector;$/;"	v	file:
detector_display_flag	multidnn.c	/^volatile int detector_display_flag;$/;"	v
detector_gpu_t	yolo_v2_class.cpp	/^struct detector_gpu_t {$/;"	s	file:
dets	avees.c	/^static detection *dets = NULL;$/;"	v	file:
dets	demo.c	/^static detection *dets = NULL;$/;"	v	file:
dets	multidnn.c	/^static detection *dets = NULL;$/;"	v	file:
dh	box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon2
dice_labels	dice.c	/^char *dice_labels[] = {"face1","face2","face3","face4","face5","face6"};$/;"	v
dintersect	box.c	/^dbox dintersect(box a, box b)$/;"	f
diou	box.c	/^dbox diou(box a, box b)$/;"	f
diounms_sort	box.c	/^void diounms_sort(detection *dets, int total, int classes, float thresh, NMS_KIND nms_kind, float beta1)$/;"	f
dispatch_request	httplib.h	/^inline bool Server::dispatch_request(Request &req, Response &res,$/;"	f	class:httplib::Server
dispatch_request_for_content_reader	httplib.h	/^Server::dispatch_request_for_content_reader(Request &req, Response &res,$/;"	f	class:httplib::Server
display_array	avees.c	/^double display_array[CYCLE_IDX];$/;"	v
display_end	multidnn.h	/^    double display_end[MEASUREMENT_ITERATION];$/;"	m	struct:MULTI_DNN
display_index	avees.c	/^static int display_index;$/;"	v	file:
display_section	multidnn.h	/^    ImageFrame display_section; $/;"	m	struct:MULTI_DNN
display_start	multidnn.h	/^    double display_start[MEASUREMENT_ITERATION];$/;"	m	struct:MULTI_DNN
display_sum	avees.c	/^double display_sum;$/;"	v
display_time	avees.c	/^static double display_time;$/;"	v	file:
dispose	yolo_v2_class.cpp	/^int dispose() {$/;"	f
dist	matrix.c	/^float dist(float *x, float *y, int n)$/;"	f
dist_array	utils.c	/^float dist_array(float *a, float *b, int n, int sub)$/;"	f
dist_to_closest_center	matrix.c	/^float dist_to_closest_center(float *datum, matrix centers)$/;"	f
distance_from_edge	data.h	/^static inline float distance_from_edge(int x, int max)$/;"	f
distort_image	image.cpp	/^void distort_image(image im, float hue, float sat, float val)$/;"	f
dnn_buffer	multidnn.c	/^volatile MultiDNN dnn_buffer[3];$/;"	v
do_kmeans	matrix.c	/^model do_kmeans(matrix data, int k)$/;"	f
do_nms	box.c	/^void do_nms(box *boxes, float **probs, int total, int classes, float thresh)$/;"	f
do_nms_obj	box.c	/^void do_nms_obj(detection *dets, int total, int classes, float thresh)$/;"	f
do_nms_sort	box.c	/^void do_nms_sort(detection *dets, int total, int classes, float thresh)$/;"	f
do_nms_sort_v2	box.c	/^void do_nms_sort_v2(box *boxes, float **probs, int total, int classes, float thresh)$/;"	f
dont_show	multidnn.h	/^    int dont_show;$/;"	m	struct:DEMO_DETECTOR
dontdraw_bbox	multidnn.h	/^    int dontdraw_bbox;$/;"	m	struct:DEMO_DETECTOR
dot_cpu	blas.c	/^float dot_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
double_rand	utils.c	/^double double_rand(void)$/;"	f
draw_bbox	image.cpp	/^void draw_bbox(image a, box bbox, int w, float r, float g, float b)$/;"	f
draw_box	image.cpp	/^void draw_box(image a, int x1, int y1, int x2, int y2, float r, float g, float b)$/;"	f
draw_box_bw	image.cpp	/^void draw_box_bw(image a, int x1, int y1, int x2, int y2, float brightness)$/;"	f
draw_box_width	image.cpp	/^void draw_box_width(image a, int x1, int y1, int x2, int y2, int w, float r, float g, float b)$/;"	f
draw_box_width_bw	image.cpp	/^void draw_box_width_bw(image a, int x1, int y1, int x2, int y2, int w, float brightness)$/;"	f
draw_boxes	yolo_console_dll.cpp	/^void draw_boxes(cv::Mat mat_img, std::vector<bbox_t> result_vec, std::vector<std::string> obj_names,$/;"	f
draw_detections	image.cpp	/^void draw_detections(image im, int num, float thresh, box *boxes, float **probs, char **names, image **alphabet, int classes)$/;"	f
draw_detections_cv_v3	image_opencv.cpp	/^extern "C" void draw_detections_cv_v3(mat_cv* mat, detection *dets, int num, float thresh, char **names, image **alphabet, int classes, int ext_output)$/;"	f
draw_detections_v3	image.cpp	/^void draw_detections_v3(image im, detection *dets, int num, float thresh, char **names, image **alphabet, int classes, int ext_output)$/;"	f
draw_label	image.cpp	/^void draw_label(image a, int r, int c, image label, const float *rgb)$/;"	f
draw_object	detector.c	/^void draw_object(char *datacfg, char *cfgfile, char *weightfile, char *filename, float thresh, int dont_show, int it_num,$/;"	f
draw_select	image_opencv.cpp	/^std::atomic<bool> draw_select, selected;$/;"	v
draw_train_chart	image_opencv.cpp	/^extern "C" mat_cv* draw_train_chart(char *windows_name, float max_img_loss, int max_batches, int number_of_lines, int img_size, int dont_show, char* chart_path)$/;"	f
draw_train_loss	image_opencv.cpp	/^extern "C" void draw_train_loss(char *windows_name, mat_cv* img_src, int img_size, float avg_loss, float max_img_loss, int current_batch, int max_batches,$/;"	f
draw_weighted_label	image.cpp	/^void draw_weighted_label(image a, int r, int c, image label, const float *rgb, const float alpha)$/;"	f
dropout_layer	dropout_layer.h	/^typedef layer dropout_layer;$/;"	t
dunion	box.c	/^dbox dunion(box a, box b)$/;"	f
dup2	darkunistd.h	28;"	d
dw	box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon2
dx	box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon2
dx_box_iou	box.c	/^dxrep dx_box_iou(box pred, box truth, IOU_LOSS iou_loss) {$/;"	f
dy	box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon2
e2e_delay	avees.c	/^static double e2e_delay;$/;"	v	file:
e2e_delay_array	avees.c	/^double e2e_delay_array[CYCLE_IDX];$/;"	v
e2e_delay_sum	avees.c	/^double e2e_delay_sum;$/;"	v
eliminate_bdd	detector.c	/^static void eliminate_bdd(char *buf, char *a)$/;"	f	file:
elo	compare.c	/^    float elo;$/;"	m	struct:__anon8	file:
elo_comparator	compare.c	/^int elo_comparator(const void*a, const void *b)$/;"	f
elos	compare.c	/^    float *elos;$/;"	m	struct:__anon8	file:
elu_activate	activations.h	/^static inline float elu_activate(float x){return (x >= 0)*x + (x < 0)*(expf(x)-1);}$/;"	f
elu_gradient	activations.h	/^static inline float elu_gradient(float x){return (x >= 0) + (x < 0)*(x + 1);}$/;"	f
ema_apply	network.c	/^void ema_apply(network net)$/;"	f
ema_update	network.c	/^void ema_update(network net, float ema_alpha)$/;"	f
embed_image	image.cpp	/^void embed_image(image source, image dest, int dx, int dy)$/;"	f
empty_func	parser.c	/^void empty_func(dropout_layer l, network_state state) {$/;"	f
enable_server_certificate_verification	httplib.h	/^inline void SSLClient::enable_server_certificate_verification(bool enabled) {$/;"	f	class:httplib::SSLClient
encode_box	box.c	/^box encode_box(box b, box anchor)$/;"	f
encode_url	httplib.h	/^inline std::string encode_url(const std::string &s) {$/;"	f	namespace:httplib::detail
end_cycle	avees.c	/^static double end_cycle;$/;"	v	file:
end_display	avees.c	/^static double end_display;$/;"	v	file:
end_fetch	avees.c	/^static double end_fetch;$/;"	v	file:
end_inference	avees.c	/^static double end_inference;$/;"	v	file:
engine_go	go.c	/^void engine_go(char *filename, char *weightfile, int multi)$/;"	f
entry_gaussian_index	gaussian_yolo_layer.c	/^static int entry_gaussian_index(layer l, int batch, int location, int entry)$/;"	f	file:
entry_index	region_layer.c	/^static int entry_index(layer l, int batch, int location, int entry)$/;"	f	file:
entry_index	yolo_layer.c	/^static int entry_index(layer l, int batch, int location, int entry)$/;"	f	file:
error	utils.c	/^void error(const char * const msg, const char * const filename, const char * const funcname, const int line)$/;"	f
error_handler_	httplib.h	/^  Handler error_handler_;$/;"	m	class:httplib::Server
eval_cifar_csv	cifar.c	/^void eval_cifar_csv()$/;"	f
event_counter	dark_cuda.c	/^static volatile int event_counter = 0;$/;"	v	file:
execve	darkunistd.h	29;"	d
exposure_image	image.cpp	/^void exposure_image(image im, float sat)$/;"	f
ext_output	multidnn.h	/^    int ext_output;$/;"	m	struct:DEMO_DETECTOR
extract_cifar	cifar.c	/^void extract_cifar()$/;"	f
extract_voxel	voxel.c	/^void extract_voxel(char *lfile, char *rfile, char *prefix)$/;"	f
fetch_array	avees.c	/^double fetch_array[CYCLE_IDX];$/;"	v
fetch_frame	multidnn.c	/^ImageFrame fetch_frame[3];$/;"	v
fetch_idx	multidnn.c	/^int fetch_idx;$/;"	v
fetch_in_thread	demo.c	/^void *fetch_in_thread(void *ptr)$/;"	f
fetch_in_thread_sync	demo.c	/^void *fetch_in_thread_sync(void *ptr)$/;"	f
fetch_sum	avees.c	/^double fetch_sum;$/;"	v
fetch_time	avees.c	/^static double fetch_time;$/;"	v	file:
fgetgo	go.c	/^char *fgetgo(FILE *fp)$/;"	f
fgetl	utils.c	/^char *fgetl(FILE *fp)$/;"	f
file_error	utils.c	/^void file_error(const char * const s)$/;"	f
file_extension	httplib.h	/^inline std::string file_extension(const std::string &path) {$/;"	f	namespace:httplib::detail
file_request_handler_	httplib.h	/^  Handler file_request_handler_;$/;"	m	class:httplib::Server
filename	compare.c	/^    char *filename;$/;"	m	struct:__anon8	file:
filename	httplib.h	/^  std::string filename;$/;"	m	struct:httplib::MultipartFile
filename	httplib.h	/^  std::string filename;$/;"	m	struct:httplib::MultipartFormData
filename	multidnn.h	/^    const char *filename;$/;"	m	struct:DEMO_CLASSI
filename	multidnn.h	/^    const char *filename;$/;"	m	struct:DEMO_DETECTOR
fileno	darkunistd.h	32;"	d
files	httplib.h	/^  MultipartFiles files;$/;"	m	struct:httplib::Request
fill_bit_int32	gemm.c	/^static inline uint32_t fill_bit_int32(char src) {$/;"	f	file:
fill_bit_int64	gemm.c	/^static inline uint64_t fill_bit_int64(char src) {$/;"	f	file:
fill_cpu	blas.c	/^void fill_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
fill_hierarchy	data.c	/^void fill_hierarchy(float *truth, int k, tree *hierarchy)$/;"	f
fill_image	image.cpp	/^void fill_image(image m, float s)$/;"	f
fill_network_boxes	network.c	/^void fill_network_boxes(network *net, int w, int h, float thresh, float hier, int *map, int relative, detection *dets, int letter)$/;"	f
fill_network_boxes_batch	network.c	/^void fill_network_boxes_batch(network *net, int w, int h, float thresh, float hier, int *map, int relative, detection *dets, int letter, int batch)$/;"	f
fill_remaining_id	http_stream.cpp	/^int fill_remaining_id(detection *new_dets, int new_dets_num, int new_track_id, float thresh, int detection_count)$/;"	f
fill_truth	data.c	/^void fill_truth(char *path, char **labels, int k, float *truth)$/;"	f
fill_truth_captcha	data.c	/^void fill_truth_captcha(char *path, int n, float *truth)$/;"	f
fill_truth_detection	data.c	/^int fill_truth_detection(const char *path, int num_boxes, int truth_size, float *truth, int classes, int flip, float dx, float dy, float sx, float sy,$/;"	f
fill_truth_region	data.c	/^void fill_truth_region(char *path, float *truth, int classes, int num_boxes, int flip, float dx, float dy, float sx, float sy)$/;"	f
fill_truth_smooth	data.c	/^void fill_truth_smooth(char *path, char **labels, int k, float *truth, float label_smooth_eps)$/;"	f
fill_truth_swag	data.c	/^void fill_truth_swag(char *path, float *truth, int classes, int flip, float dx, float dy, float sx, float sy)$/;"	f
find_P_constrastive	blas.c	/^float find_P_constrastive(size_t i, size_t j, contrastive_params *contrast_p, int contrast_p_size)$/;"	f
find_arg	utils.c	/^int find_arg(int argc, char* argv[], char *arg)$/;"	f
find_char_arg	utils.c	/^char *find_char_arg(int argc, char **argv, char *arg, char *def)$/;"	f
find_content_type	httplib.h	/^inline const char *find_content_type(const std::string &path) {$/;"	f	namespace:httplib::detail
find_float_arg	utils.c	/^float find_float_arg(int argc, char **argv, char *arg, float def)$/;"	f
find_int_arg	utils.c	/^int find_int_arg(int argc, char **argv, char *arg, int def)$/;"	f
find_max	data.c	/^int find_max(float *arr, int size) {$/;"	f
find_replace	utils.c	/^void find_replace(const char* str, char* orig, char* rep, char* output)$/;"	f
find_replace_extension	utils.c	/^void find_replace_extension(char *str, char *orig, char *rep, char *output)$/;"	f
find_replace_paths	data.c	/^char **find_replace_paths(char **paths, int n, char *find, char *replace)$/;"	f
find_sim	blas.c	/^float find_sim(size_t i, size_t j, contrastive_params *contrast_p, int contrast_p_size)$/;"	f
fix_data_captcha	captcha.c	/^void fix_data_captcha(data d, int mask)$/;"	f
fix_nan_and_inf_cpu	blas.c	/^void fix_nan_and_inf_cpu(float *input, size_t size)$/;"	f
fix_nan_inf	gaussian_yolo_layer.c	/^static inline float fix_nan_inf(float val)$/;"	f	file:
fix_nan_inf	yolo_layer.c	/^static inline float fix_nan_inf(float val)$/;"	f	file:
fixed_buffer_	httplib.h	/^  char *fixed_buffer_;$/;"	m	class:httplib::detail::stream_line_reader
fixed_buffer_size_	httplib.h	/^  const size_t fixed_buffer_size_;$/;"	m	class:httplib::detail::stream_line_reader
fixed_buffer_used_size_	httplib.h	/^  size_t fixed_buffer_used_size_ = 0;$/;"	m	class:httplib::detail::stream_line_reader
flag	getopt.c	/^  int* flag; \/* where to save its status, or NULL	*\/$/;"	m	struct:option	file:
flag_exit	avees.c	/^static volatile int flag_exit;$/;"	v	file:
flag_exit	data.c	/^static volatile int flag_exit;$/;"	v	file:
flag_exit	demo.c	/^static volatile int flag_exit;$/;"	v	file:
flag_exit	multidnn.c	/^static volatile int flag_exit;$/;"	v	file:
flatten	blas.c	/^void flatten(float *x, int size, int layers, int batch, int forward)$/;"	f
flip_board	go.c	/^void flip_board(float *board)$/;"	f
flip_image	image.cpp	/^void flip_image(image a)$/;"	f
float_abs_compare	cost_layer.c	/^int float_abs_compare (const void * a, const void * b)$/;"	f
float_pair	rnn.c	/^} float_pair;$/;"	t	typeref:struct:__anon13	file:
float_pair	rnn_vid.c	/^} float_pair;$/;"	t	typeref:struct:__anon4	file:
float_to_bit	gemm.c	/^void float_to_bit(float *src, unsigned char *dst, size_t size)$/;"	f
float_to_box	box.c	/^box float_to_box(float *f)$/;"	f
float_to_box_stride	box.c	/^box float_to_box_stride(float *f, int stride)$/;"	f
float_to_image	image.cpp	/^image float_to_image(int w, int h, int c, float *data)$/;"	f
float_to_image_scaled	image.cpp	/^image float_to_image_scaled(int w, int h, int c, float *data)$/;"	f
follow_location	httplib.h	/^inline void Client::follow_location(bool on) { follow_location_ = on; }$/;"	f	class:httplib::Client
follow_location_	httplib.h	/^  size_t follow_location_;$/;"	m	class:httplib::Client
forward_activation_layer	activation_layer.c	/^void forward_activation_layer(layer l, network_state state)$/;"	f
forward_activation_layer_gpu	activation_layer.c	/^void forward_activation_layer_gpu(layer l, network_state state)$/;"	f
forward_avgpool_layer	avgpool_layer.c	/^void forward_avgpool_layer(const avgpool_layer l, network_state state)$/;"	f
forward_batchnorm_layer	batchnorm_layer.c	/^void forward_batchnorm_layer(layer l, network_state state)$/;"	f
forward_batchnorm_layer_gpu	batchnorm_layer.c	/^void forward_batchnorm_layer_gpu(layer l, network_state state)$/;"	f
forward_blank_layer	network.c	/^void forward_blank_layer(layer l, network_state state) {}$/;"	f
forward_connected_layer	connected_layer.c	/^void forward_connected_layer(connected_layer l, network_state state)$/;"	f
forward_connected_layer_gpu	connected_layer.c	/^void forward_connected_layer_gpu(connected_layer l, network_state state)$/;"	f
forward_contrastive_layer	softmax_layer.c	/^void forward_contrastive_layer(contrastive_layer l, network_state state)$/;"	f
forward_contrastive_layer_gpu	softmax_layer.c	/^void forward_contrastive_layer_gpu(contrastive_layer l, network_state state)$/;"	f
forward_conv_lstm_layer	conv_lstm_layer.c	/^void forward_conv_lstm_layer(layer l, network_state state)$/;"	f
forward_conv_lstm_layer_gpu	conv_lstm_layer.c	/^void forward_conv_lstm_layer_gpu(layer l, network_state state)$/;"	f
forward_convolutional_layer	convolutional_layer.c	/^void forward_convolutional_layer(convolutional_layer l, network_state state)$/;"	f
forward_cost_layer	cost_layer.c	/^void forward_cost_layer(cost_layer l, network_state state)$/;"	f
forward_cost_layer_gpu	cost_layer.c	/^void forward_cost_layer_gpu(cost_layer l, network_state state)$/;"	f
forward_crnn_layer	crnn_layer.c	/^void forward_crnn_layer(layer l, network_state state)$/;"	f
forward_crnn_layer_gpu	crnn_layer.c	/^void forward_crnn_layer_gpu(layer l, network_state state)$/;"	f
forward_crop_layer	crop_layer.c	/^void forward_crop_layer(const crop_layer l, network_state state)$/;"	f
forward_deconvolutional_layer	deconvolutional_layer.c	/^void forward_deconvolutional_layer(const deconvolutional_layer l, network_state state)$/;"	f
forward_detection_layer	detection_layer.c	/^void forward_detection_layer(const detection_layer l, network_state state)$/;"	f
forward_detection_layer_gpu	detection_layer.c	/^void forward_detection_layer_gpu(const detection_layer l, network_state state)$/;"	f
forward_dropout_layer	dropout_layer.c	/^void forward_dropout_layer(dropout_layer l, network_state state)$/;"	f
forward_gaussian_yolo_layer	gaussian_yolo_layer.c	/^void forward_gaussian_yolo_layer(const layer l, network_state state)$/;"	f
forward_gaussian_yolo_layer_gpu	gaussian_yolo_layer.c	/^void forward_gaussian_yolo_layer_gpu(const layer l, network_state state)$/;"	f
forward_gru_layer	gru_layer.c	/^void forward_gru_layer(layer l, network_state state)$/;"	f
forward_gru_layer_gpu	gru_layer.c	/^void forward_gru_layer_gpu(layer l, network_state state)$/;"	f
forward_history_layer	conv_lstm_layer.c	/^void forward_history_layer(layer l, network_state state)$/;"	f
forward_history_layer_gpu	conv_lstm_layer.c	/^void forward_history_layer_gpu(const layer l, network_state state)$/;"	f
forward_implicit_layer	representation_layer.c	/^void forward_implicit_layer(const layer l, network_state state)$/;"	f
forward_implicit_layer_gpu	representation_layer.c	/^void forward_implicit_layer_gpu(const layer l, network_state state)$/;"	f
forward_local_avgpool_layer	maxpool_layer.c	/^void forward_local_avgpool_layer(const maxpool_layer l, network_state state)$/;"	f
forward_local_layer	local_layer.c	/^void forward_local_layer(const local_layer l, network_state state)$/;"	f
forward_local_layer_gpu	local_layer.c	/^void forward_local_layer_gpu(const local_layer l, network_state state)$/;"	f
forward_lstm_layer	lstm_layer.c	/^void forward_lstm_layer(layer l, network_state state)$/;"	f
forward_lstm_layer_gpu	lstm_layer.c	/^void forward_lstm_layer_gpu(layer l, network_state state)$/;"	f
forward_maxpool_layer	maxpool_layer.c	/^void forward_maxpool_layer(const maxpool_layer l, network_state state)$/;"	f
forward_maxpool_layer_avx	gemm.c	/^void forward_maxpool_layer_avx(float *src, float *dst, int *indexes, int size, int w, int h, int out_w, int out_h, int c,$/;"	f
forward_network	network.c	/^void forward_network(network net, network_state state)$/;"	f
forward_normalization_layer	normalization_layer.c	/^void forward_normalization_layer(const layer layer, network_state state)$/;"	f
forward_normalization_layer_gpu	normalization_layer.c	/^void forward_normalization_layer_gpu(const layer layer, network_state state)$/;"	f
forward_region_layer	region_layer.c	/^void forward_region_layer(const region_layer l, network_state state)$/;"	f
forward_region_layer_gpu	region_layer.c	/^void forward_region_layer_gpu(const region_layer l, network_state state)$/;"	f
forward_reorg_layer	reorg_layer.c	/^void forward_reorg_layer(const layer l, network_state state)$/;"	f
forward_reorg_layer_gpu	reorg_layer.c	/^void forward_reorg_layer_gpu(layer l, network_state state)$/;"	f
forward_reorg_old_layer	reorg_old_layer.c	/^void forward_reorg_old_layer(const layer l, network_state state)$/;"	f
forward_reorg_old_layer_gpu	reorg_old_layer.c	/^void forward_reorg_old_layer_gpu(layer l, network_state state)$/;"	f
forward_rnn_layer	rnn_layer.c	/^void forward_rnn_layer(layer l, network_state state)$/;"	f
forward_rnn_layer_gpu	rnn_layer.c	/^void forward_rnn_layer_gpu(layer l, network_state state)$/;"	f
forward_route_layer	route_layer.c	/^void forward_route_layer(const route_layer l, network_state state)$/;"	f
forward_route_layer_gpu	route_layer.c	/^void forward_route_layer_gpu(const route_layer l, network_state state)$/;"	f
forward_sam_layer	sam_layer.c	/^void forward_sam_layer(const layer l, network_state state)$/;"	f
forward_sam_layer_gpu	sam_layer.c	/^void forward_sam_layer_gpu(const layer l, network_state state)$/;"	f
forward_scale_channels_layer	scale_channels_layer.c	/^void forward_scale_channels_layer(const layer l, network_state state)$/;"	f
forward_scale_channels_layer_gpu	scale_channels_layer.c	/^void forward_scale_channels_layer_gpu(const layer l, network_state state)$/;"	f
forward_shortcut_layer	shortcut_layer.c	/^void forward_shortcut_layer(const layer l, network_state state)$/;"	f
forward_shortcut_layer_gpu	shortcut_layer.c	/^void forward_shortcut_layer_gpu(const layer l, network_state state)$/;"	f
forward_softmax_layer	softmax_layer.c	/^void forward_softmax_layer(const softmax_layer l, network_state net)$/;"	f
forward_softmax_layer_gpu	softmax_layer.c	/^void forward_softmax_layer_gpu(const softmax_layer l, network_state net)$/;"	f
forward_upsample_layer	upsample_layer.c	/^void forward_upsample_layer(const layer l, network_state net)$/;"	f
forward_upsample_layer_gpu	upsample_layer.c	/^void forward_upsample_layer_gpu(const layer l, network_state state)$/;"	f
forward_yolo_layer	yolo_layer.c	/^void forward_yolo_layer(const layer l, network_state state)$/;"	f
forward_yolo_layer_gpu	yolo_layer.c	/^void forward_yolo_layer_gpu(const layer l, network_state state)$/;"	f
fps	avees.c	/^static float fps = 0;$/;"	v	file:
fps	demo.c	/^static float fps = 0;$/;"	v	file:
fps	multidnn.c	/^static float fps = 0;$/;"	v	file:
fps_array	avees.c	/^double fps_array[CYCLE_IDX];$/;"	v
fps_sum	avees.c	/^double fps_sum;$/;"	v
frame_id	avees.c	/^static long long int frame_id = 0;$/;"	v	file:
frame_id	demo.c	/^static long long int frame_id = 0;$/;"	v	file:
frame_id	multidnn.c	/^static long long int frame_id = 0;$/;"	v	file:
frame_skip	multidnn.h	/^    int frame_skip;$/;"	m	struct:DEMO_DETECTOR
frame_timestamp	multidnn.h	/^    double frame_timestamp[MEASUREMENT_ITERATION];$/;"	m	struct:MULTI_DNN
frames_counter	csharp/YoloCSharpWrapper.cs	/^            public UInt32 frames_counter;$/;"	f	struct:Darknet.YoloWrapper.bbox_t
free_batch_detections	network.c	/^void free_batch_detections(det_num_pair *det_num_pairs, int n)$/;"	f
free_convolutional_batchnorm	convolutional_layer.c	/^void free_convolutional_batchnorm(convolutional_layer *l)$/;"	f
free_data	data.c	/^void free_data(data d)$/;"	f
free_detections	network.c	/^void free_detections(detection *dets, int n)$/;"	f
free_image	image.cpp	/^void free_image(image m)$/;"	f
free_image	yolo_v2_class.cpp	/^LIB_API void Detector::free_image(image_t m)$/;"	f	class:Detector
free_layer	layer.c	/^void free_layer(layer l)$/;"	f
free_layer_custom	layer.c	/^void free_layer_custom(layer l, int keep_cudnn_desc)$/;"	f
free_list	list.c	/^void free_list(list *l)$/;"	f
free_list_contents	list.c	/^void free_list_contents(list *l)$/;"	f
free_list_contents_kvp	list.c	/^void free_list_contents_kvp(list *l)$/;"	f
free_list_val	list.c	/^void free_list_val(list *l)$/;"	f
free_load_threads	data.c	/^void free_load_threads(void *ptr)$/;"	f
free_matrix	matrix.c	/^void free_matrix(matrix m)$/;"	f
free_network	network.c	/^void free_network(network net)$/;"	f
free_network_ptr	network.c	/^void free_network_ptr(network* net)$/;"	f
free_network_recurrent_state	network.c	/^void free_network_recurrent_state(network net)$/;"	f
free_node	list.c	/^void free_node(node *n)$/;"	f
free_pinned_memory	dark_cuda.c	/^void free_pinned_memory()$/;"	f
free_ptrs	utils.c	/^void free_ptrs(void **ptrs, int n)$/;"	f
free_section	parser.c	/^void free_section(section *s)$/;"	f
free_state_conv_lstm	conv_lstm_layer.c	/^void free_state_conv_lstm(layer l)$/;"	f
free_state_crnn	crnn_layer.c	/^void free_state_crnn(layer l)$/;"	f
free_sublayer	layer.c	/^void free_sublayer(layer *l)$/;"	f
from_hex_to_i	httplib.h	/^inline bool from_hex_to_i(const std::string &s, size_t i, size_t cnt,$/;"	f	namespace:httplib::detail
from_i_to_hex	httplib.h	/^inline std::string from_i_to_hex(size_t n) {$/;"	f	namespace:httplib::detail
front	list.h	/^    node *front;$/;"	m	struct:list
ftruncate	darkunistd.h	30;"	d
fuse_conv_batchnorm	network.c	/^void fuse_conv_batchnorm(network net)$/;"	f
g_counts_per_sec	gettimeofday.h	/^static LARGE_INTEGER g_counts_per_sec;$/;"	v
g_first_time	gettimeofday.h	/^static unsigned char g_first_time = 1;$/;"	v
gaussian_yolo_num_detections	gaussian_yolo_layer.c	/^int gaussian_yolo_num_detections(layer l, float thresh)$/;"	f
gcd	getopt.c	/^gcd(int a, int b)$/;"	f	file:
gelu_activate	activations.h	/^static inline float gelu_activate(float x) { return (0.5*x*(1 + tanhf(0.797885*x + 0.035677*powf(x, 3)))); }$/;"	f
gelu_gradient	activations.h	/^static inline float gelu_gradient(float x) {$/;"	f
gemm	gemm.c	/^void gemm(int TA, int TB, int M, int N, int K, float ALPHA,$/;"	f
gemm_bin	gemm.c	/^void gemm_bin(int M, int N, int K, float ALPHA,$/;"	f
gemm_cpu	gemm.c	/^void gemm_cpu(int TA, int TB, int M, int N, int K, float ALPHA,$/;"	f
gemm_gpu	gemm.c	/^void gemm_gpu(int TA, int TB, int M, int N, int K, float ALPHA,$/;"	f
gemm_nn	gemm.c	/^void gemm_nn(int M, int N, int K, float ALPHA,$/;"	f
gemm_nn_bin_32bit_packed	gemm.c	/^void gemm_nn_bin_32bit_packed(int M, int N, int K, float ALPHA,$/;"	f
gemm_nn_bin_transposed_32bit_packed	gemm.c	/^void gemm_nn_bin_transposed_32bit_packed(int M, int N, int K, float ALPHA,$/;"	f
gemm_nn_custom	convolutional_layer.c	/^void gemm_nn_custom(int M, int N, int K, float ALPHA,$/;"	f
gemm_nn_custom_bin_mean_transposed	gemm.c	/^void gemm_nn_custom_bin_mean_transposed(int M, int N, int K, float ALPHA_UNUSED,$/;"	f
gemm_nn_fast	gemm.c	/^void gemm_nn_fast(int M, int N, int K, float ALPHA,$/;"	f
gemm_nt	gemm.c	/^void gemm_nt(int M, int N, int K, float ALPHA,$/;"	f
gemm_ongpu	gemm.c	/^void gemm_ongpu(int TA, int TB, int M, int N, int K, float ALPHA,$/;"	f
gemm_tn	gemm.c	/^void gemm_tn(int M, int N, int K, float ALPHA,$/;"	f
gemm_tt	gemm.c	/^void gemm_tt(int M, int N, int K, float ALPHA,$/;"	f
generate_move	go.c	/^int generate_move(network net, int player, float *board, int multi, float thresh, float temp, char *ko, int print)$/;"	f
generate_vid_rnn	rnn_vid.c	/^void generate_vid_rnn(char *cfgfile, char *weightfile)$/;"	f
getMedian	yolo_console_dll.cpp	/^float getMedian(std::vector<float> &v) {$/;"	f
get_3d_coordinates	yolo_console_dll.cpp	/^std::vector<bbox_t> get_3d_coordinates(std::vector<bbox_t> bbox_vect, cv::Mat xyzrgba) {$/;"	f
get_3d_coordinates	yolo_console_dll.cpp	/^std::vector<bbox_t> get_3d_coordinates(std::vector<bbox_t> bbox_vect, cv::Mat xyzrgba)$/;"	f
get_activation	activations.c	/^ACTIVATION get_activation(char *s)$/;"	f
get_activation_string	activations.c	/^char *get_activation_string(ACTIVATION a)$/;"	f
get_actual_detections	image.cpp	/^detection_with_class* get_actual_detections(detection *dets, int dets_num, float thresh, int* selected_detections_num, char **names)$/;"	f
get_base_args	network.c	/^load_args get_base_args(network *net)$/;"	f
get_bdd_image_id	detector.c	/^static void get_bdd_image_id(char *filename)$/;"	f	file:
get_bit	gemm.h	/^static inline unsigned char get_bit(unsigned char const*const src, size_t index) {$/;"	f
get_bit_int32	gemm.c	/^static inline uint32_t get_bit_int32(uint32_t const*const src, size_t index) {$/;"	f	file:
get_buffer	httplib.h	/^inline const std::string &BufferStream::get_buffer() const { return buffer; }$/;"	f	class:httplib::BufferStream
get_capture_frame_count_cv	image_opencv.cpp	/^extern "C" double get_capture_frame_count_cv(cap_cv *cap)$/;"	f
get_capture_frame_cv	image_opencv.cpp	/^extern "C" mat_cv* get_capture_frame_cv(cap_cv *cap) {$/;"	f
get_capture_frame_cv_with_timestamp	image_opencv.cpp	/^extern "C" mat_cv* get_capture_frame_cv_with_timestamp(cap_cv *cap, ImageFrame *f) {$/;"	f
get_capture_property_cv	image_opencv.cpp	/^extern "C" double get_capture_property_cv(cap_cv *cap, int property_id)$/;"	f
get_capture_video_stream	image_opencv.cpp	/^extern "C" cap_cv* get_capture_video_stream(const char *path) {$/;"	f
get_capture_webcam	image_opencv.cpp	/^extern "C" cap_cv* get_capture_webcam(int index)$/;"	f
get_classes_multipliers	parser.c	/^float *get_classes_multipliers(char *cpc, const int classes, const float max_delta)$/;"	f
get_coco_image_id	coco.c	/^int get_coco_image_id(char *filename)$/;"	f
get_coco_image_id	detector.c	/^static int get_coco_image_id(char *filename)$/;"	f	file:
get_color	image.cpp	/^float get_color(int c, int x, int max)$/;"	f
get_connected_workspace_size	connected_layer.c	/^size_t get_connected_workspace_size(layer l)$/;"	f
get_convolutional_delta	convolutional_layer.c	/^image get_convolutional_delta(convolutional_layer l)$/;"	f
get_convolutional_image	convolutional_layer.c	/^image get_convolutional_image(convolutional_layer l)$/;"	f
get_convolutional_weight	convolutional_layer.c	/^image get_convolutional_weight(convolutional_layer l, int i)$/;"	f
get_convolutional_workspace_size	convolutional_layer.c	/^size_t get_convolutional_workspace_size(layer l) {$/;"	f
get_cost_string	cost_layer.c	/^char *get_cost_string(COST_TYPE a)$/;"	f
get_cost_type	cost_layer.c	/^COST_TYPE get_cost_type(char *s)$/;"	f
get_count_mula	gemm.c	/^static inline int get_count_mula(__m256i count_sum) {$/;"	f	file:
get_crop_image	crop_layer.c	/^image get_crop_image(crop_layer l)$/;"	f
get_cuda_context	yolo_v2_class.cpp	/^void *Detector::get_cuda_context()$/;"	f	class:Detector
get_cuda_stream	dark_cuda.c	/^cudaStream_t get_cuda_stream() {$/;"	f
get_current_batch	network.c	/^int get_current_batch(network net)$/;"	f
get_current_iteration	network.c	/^int64_t get_current_iteration(network net)$/;"	f
get_current_rate	network.c	/^float get_current_rate(network net)$/;"	f
get_current_seq_subdivisions	network.c	/^float get_current_seq_subdivisions(network net)$/;"	f
get_data_part	data.c	/^data get_data_part(data d, int part, int total)$/;"	f
get_deconvolutional_delta	deconvolutional_layer.c	/^image get_deconvolutional_delta(deconvolutional_layer l)$/;"	f
get_deconvolutional_image	deconvolutional_layer.c	/^image get_deconvolutional_image(deconvolutional_layer l)$/;"	f
get_detection_boxes	detection_layer.c	/^void get_detection_boxes(layer l, int w, int h, float thresh, float **probs, box *boxes, int only_objectness)$/;"	f
get_detection_detections	detection_layer.c	/^void get_detection_detections(layer l, int w, int h, float thresh, detection *dets)$/;"	f
get_device_count	yolo_v2_class.cpp	/^int get_device_count() {$/;"	f
get_device_name	yolo_v2_class.cpp	/^int get_device_name(int gpu, char* deviceName) {$/;"	f
get_embedding	blas.c	/^void get_embedding(float *src, int src_w, int src_h, int src_c, int embedding_size, int cur_w, int cur_h, int cur_n, int cur_b, float *dst)$/;"	f
get_file_value	httplib.h	/^inline MultipartFile Request::get_file_value(const char *key) const {$/;"	f	class:httplib::Request
get_gaussian_yolo_box	gaussian_yolo_layer.c	/^box get_gaussian_yolo_box(float *x, float *biases, int n, int index, int i, int j, int lw, int lh, int w, int h, int stride, YOLO_POINT yolo_point)$/;"	f
get_gaussian_yolo_detections	gaussian_yolo_layer.c	/^int get_gaussian_yolo_detections(layer l, int w, int h, int netw, int neth, float thresh, int *map, int relative, detection *dets, int letter)$/;"	f
get_gpu_compute_capability	dark_cuda.c	/^int get_gpu_compute_capability(int i, char *device_name)$/;"	f
get_handlers_	httplib.h	/^  Handlers get_handlers_;$/;"	m	class:httplib::Server
get_header_value	httplib.h	/^inline const char *get_header_value(const Headers &headers, const char *key,$/;"	f	namespace:httplib::detail
get_header_value	httplib.h	/^inline std::string Request::get_header_value(const char *key, size_t id) const {$/;"	f	class:httplib::Request
get_header_value	httplib.h	/^inline std::string Response::get_header_value(const char *key,$/;"	f	class:httplib::Response
get_header_value_count	httplib.h	/^inline size_t Request::get_header_value_count(const char *key) const {$/;"	f	class:httplib::Request
get_header_value_count	httplib.h	/^inline size_t Response::get_header_value_count(const char *key) const {$/;"	f	class:httplib::Response
get_header_value_uint64	httplib.h	/^inline uint64_t get_header_value_uint64(const Headers &headers, const char *key,$/;"	f	namespace:httplib::detail
get_height_mat	image_opencv.cpp	/^extern "C" int get_height_mat(mat_cv *mat)$/;"	f
get_hierarchy_probability	tree.c	/^float get_hierarchy_probability(float *x, tree *hier, int c)$/;"	f
get_image_from_stream_cpp	image_opencv.cpp	/^extern "C" image get_image_from_stream_cpp(cap_cv *cap)$/;"	f
get_image_from_stream_letterbox	image_opencv.cpp	/^extern "C" image get_image_from_stream_letterbox(cap_cv *cap, int w, int h, int c, mat_cv** in_img, int dont_close)$/;"	f
get_image_from_stream_resize	image_opencv.cpp	/^extern "C" image get_image_from_stream_resize(cap_cv *cap, int w, int h, int c, mat_cv** in_img, int dont_close)$/;"	f
get_image_from_stream_resize_with_timestamp	image_opencv.cpp	/^extern "C" image get_image_from_stream_resize_with_timestamp(cap_cv *cap, int w, int h, int c, mat_cv** in_img, int dont_close, ImageFrame *f, int wc, int wh)$/;"	f
get_image_layer	image.cpp	/^image get_image_layer(image m, int l)$/;"	f
get_label	image.cpp	/^image get_label(image **characters, char *string, int size)$/;"	f
get_label_v3	image.cpp	/^image get_label_v3(image **characters, char *string, int size)$/;"	f
get_labels	data.c	/^char **get_labels(char *filename)$/;"	f
get_labels_custom	data.c	/^char **get_labels_custom(char *filename, int *size)$/;"	f
get_layer_string	network.c	/^char *get_layer_string(LAYER_TYPE a)$/;"	f
get_maxpool_delta	maxpool_layer.c	/^image get_maxpool_delta(maxpool_layer l)$/;"	f
get_maxpool_image	maxpool_layer.c	/^image get_maxpool_image(maxpool_layer l)$/;"	f
get_mean_array	convolutional_layer.c	/^void get_mean_array(float *src, size_t size, size_t filters, float *mean_arr) {$/;"	f
get_metadata	option_list.c	/^metadata get_metadata(char *file)$/;"	f
get_multipart_ranges_data_length	httplib.h	/^get_multipart_ranges_data_length(const Request &req, Response &res,$/;"	f	namespace:httplib::detail
get_net_color_depth	yolo_v2_class.cpp	/^LIB_API int Detector::get_net_color_depth() const {$/;"	f	class:Detector
get_net_height	yolo_v2_class.cpp	/^LIB_API int Detector::get_net_height() const {$/;"	f	class:Detector
get_net_width	yolo_v2_class.cpp	/^LIB_API int Detector::get_net_width() const {$/;"	f	class:Detector
get_network_boxes	network.c	/^detection *get_network_boxes(network *net, int w, int h, float thresh, float hier, int *map, int relative, int *num, int letter)$/;"	f
get_network_cost	network.c	/^float get_network_cost(network net)$/;"	f
get_network_detection_layer	network.c	/^detection_layer get_network_detection_layer(network net)$/;"	f
get_network_image	network.c	/^image get_network_image(network net)$/;"	f
get_network_image_layer	network.c	/^image get_network_image_layer(network net, int i)$/;"	f
get_network_input_size	network.c	/^int get_network_input_size(network net)$/;"	f
get_network_layer	network.c	/^layer* get_network_layer(network* net, int i)$/;"	f
get_network_output	network.c	/^float *get_network_output(network net)$/;"	f
get_network_output_size	network.c	/^int get_network_output_size(network net)$/;"	f
get_next_batch	data.c	/^void get_next_batch(data d, int n, int offset, float *X, float *y)$/;"	f
get_num_threads	http_stream.cpp	/^int get_num_threads()$/;"	f
get_number_of_blocks	dark_cuda.c	/^int get_number_of_blocks(int array_size, int block_size)$/;"	f
get_openssl_verify_result	httplib.h	/^inline long SSLClient::get_openssl_verify_result() const {$/;"	f	class:httplib::SSLClient
get_param_value	httplib.h	/^inline std::string Request::get_param_value(const char *key, size_t id) const {$/;"	f	class:httplib::Request
get_param_value_count	httplib.h	/^inline size_t Request::get_param_value_count(const char *key) const {$/;"	f	class:httplib::Request
get_paths	data.c	/^list *get_paths(char *filename)$/;"	f
get_pixel	image.cpp	/^static float get_pixel(image m, int x, int y, int c)$/;"	f	file:
get_pixel	image_opencv.cpp	/^static float get_pixel(image m, int x, int y, int c)$/;"	f	file:
get_pixel_extend	image.cpp	/^static float get_pixel_extend(image m, int x, int y, int c)$/;"	f	file:
get_policy	parser.c	/^learning_rate_policy get_policy(char *s)$/;"	f
get_predicted_class_network	network.c	/^int get_predicted_class_network(network net)$/;"	f
get_random_batch	data.c	/^void get_random_batch(data d, int n, float *X, float *y)$/;"	f
get_random_data	data.c	/^data get_random_data(data d, int num)$/;"	f
get_random_paths	data.c	/^char **get_random_paths(char **paths, int n, int m)$/;"	f
get_random_paths_custom	data.c	/^char **get_random_paths_custom(char **paths, int n, int m, int contrastive)$/;"	f
get_range_offset_and_length	httplib.h	/^get_range_offset_and_length(const Request &req, const Response &res,$/;"	f	namespace:httplib::detail
get_range_offset_and_length	httplib.h	/^get_range_offset_and_length(const Request &req, size_t content_length,$/;"	f	namespace:httplib::detail
get_region_box	region_layer.c	/^box get_region_box(float *x, float *biases, int n, int index, int i, int j, int w, int h)$/;"	f
get_region_boxes	region_layer.c	/^void get_region_boxes(layer l, int w, int h, float thresh, float **probs, box *boxes, int only_objectness, int *map)$/;"	f
get_region_detections	region_layer.c	/^void get_region_detections(layer l, int w, int h, int netw, int neth, float thresh, int *map, float tree_thresh, int relative, detection *dets)$/;"	f
get_regression_values	classifier.c	/^float *get_regression_values(char **labels, int n)$/;"	f
get_remote_addr	httplib.h	/^inline std::string BufferStream::get_remote_addr() const { return ""; }$/;"	f	class:httplib::BufferStream
get_remote_addr	httplib.h	/^inline std::string SSLSocketStream::get_remote_addr() const {$/;"	f	class:httplib::SSLSocketStream
get_remote_addr	httplib.h	/^inline std::string SocketStream::get_remote_addr() const {$/;"	f	class:httplib::SocketStream
get_remote_addr	httplib.h	/^inline std::string get_remote_addr(socket_t sock) {$/;"	f	namespace:httplib::detail
get_rnn_data	rnn.c	/^float_pair get_rnn_data(unsigned char *text, size_t *offsets, int characters, size_t len, int batch, int steps)$/;"	f
get_rnn_token_data	rnn.c	/^float_pair get_rnn_token_data(int *tokens, size_t *offsets, int characters, size_t len, int batch, int steps)$/;"	f
get_rnn_vid_data	rnn_vid.c	/^float_pair get_rnn_vid_data(network net, char **files, int n, int batch, int steps)$/;"	f
get_sequence_value	network.c	/^int get_sequence_value(network net)$/;"	f
get_sequential_paths	data.c	/^char **get_sequential_paths(char **paths, int n, int m, int mini_batch, int augment_speed, int contrastive)$/;"	f
get_sim_P_index	blas.c	/^int get_sim_P_index(size_t i, size_t j, contrastive_params *contrast_p, int contrast_p_size)$/;"	f
get_stream_fps_cpp_cv	image_opencv.cpp	/^extern "C" int get_stream_fps_cpp_cv(cap_cv *cap)$/;"	f
get_system_frame_time_string	http_stream.cpp	/^std::string get_system_frame_time_string()$/;"	f
get_time	http_stream.cpp	/^double get_time() { return 0; }$/;"	f
get_time	http_stream.cpp	/^double get_time() {$/;"	f
get_time_in_ms	avees.c	/^double get_time_in_ms() $/;"	f
get_time_point	http_stream.cpp	/^double get_time_point() { return 0; }$/;"	f
get_time_point	http_stream.cpp	/^double get_time_point() {$/;"	f
get_wall_time	demo.c	/^double get_wall_time()$/;"	f
get_weights	convolutional_layer.c	/^image *get_weights(convolutional_layer l)$/;"	f
get_width_mat	image_opencv.cpp	/^extern "C" int get_width_mat(mat_cv *mat)$/;"	f
get_workspace_size16	convolutional_layer.c	/^size_t get_workspace_size16(layer l) {$/;"	f
get_workspace_size32	convolutional_layer.c	/^size_t get_workspace_size32(layer l){$/;"	f
get_yolo_box	yolo_layer.c	/^box get_yolo_box(float *x, float *biases, int n, int index, int i, int j, int lw, int lh, int w, int h, int stride, int new_coords)$/;"	f
get_yolo_detections	yolo_layer.c	/^int get_yolo_detections(layer l, int w, int h, int netw, int neth, float thresh, int *map, int relative, detection *dets, int letter)$/;"	f
get_yolo_detections_batch	yolo_layer.c	/^int get_yolo_detections_batch(layer l, int w, int h, int netw, int neth, float thresh, int *map, int relative, detection *dets, int letter, int batch)$/;"	f
getcwd	darkunistd.h	33;"	d
getline	httplib.h	/^  bool getline() {$/;"	f	class:httplib::detail::stream_line_reader
getopt	getopt.c	/^int getopt(int nargc, char* const* nargv, const char* options)$/;"	f
getopt_internal	getopt.c	/^getopt_internal(int nargc, char* const* nargv, const char* options,$/;"	f	file:
getopt_long	getopt.c	/^int getopt_long(int nargc, char* const* nargv, const char* options,$/;"	f
getopt_long_only	getopt.c	/^int getopt_long_only(int nargc, char* const* nargv, const char* options,$/;"	f
gettimeofday	gettimeofday.c	/^int gettimeofday(struct timeval* tp, struct timezone* tzp)$/;"	f
glowable_buffer_	httplib.h	/^  std::string glowable_buffer_;$/;"	m	class:httplib::detail::stream_line_reader
gpu_index	dark_cuda.c	/^int gpu_index = 0;$/;"	v
grad_contrastive_loss_negative	blas.c	/^void grad_contrastive_loss_negative(size_t i, int *labels, size_t num_of_samples, float **z, unsigned int feature_size, float temperature, float *cos_sim, float *p_constrastive, float *delta, int wh)$/;"	f
grad_contrastive_loss_negative_f	blas.c	/^void grad_contrastive_loss_negative_f(size_t i, int *class_ids, int *labels, size_t num_of_samples, float **z, unsigned int feature_size, float temperature, float *delta, int wh, contrastive_params *contrast_p, int contrast_p_size, int neg_max)$/;"	f
grad_contrastive_loss_positive	blas.c	/^void grad_contrastive_loss_positive(size_t i, int *labels, size_t num_of_samples, float **z, unsigned int feature_size, float temperature, float *cos_sim, float *p_constrastive, float *delta, int wh)$/;"	f
grad_contrastive_loss_positive_f	blas.c	/^void grad_contrastive_loss_positive_f(size_t i, int *class_ids, int *labels, size_t num_of_samples, float **z, unsigned int feature_size, float temperature, float *delta, int wh, contrastive_params *contrast_p, int contrast_p_size)$/;"	f
gradient	activations.c	/^float gradient(float x, ACTIVATION a)$/;"	f
gradient_array	activations.c	/^void gradient_array(const float *x, const int n, const ACTIVATION a, float *delta)$/;"	f
gradient_array_hard_mish	activations.c	/^void gradient_array_hard_mish(const int n, const float * activation_input, float * delta)$/;"	f
gradient_array_mish	activations.c	/^void gradient_array_mish(const int n, const float * activation_input, float * delta)$/;"	f
gradient_array_normalize_channels	activations.c	/^void gradient_array_normalize_channels(float *x, const int n, int batch, int channels, int wh_step, float *delta)$/;"	f
gradient_array_normalize_channels_softmax	activations.c	/^void gradient_array_normalize_channels_softmax(float *x, const int n, int batch, int channels, int wh_step, float *delta)$/;"	f
gradient_array_swish	activations.c	/^void gradient_array_swish(const float *x, const int n, const float * sigmoid, float * delta)$/;"	f
grayscale_image	image.cpp	/^image grayscale_image(image im)$/;"	f
gun_classifier	classifier.c	/^void gun_classifier(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename)$/;"	f
h	csharp/YoloCSharpWrapper.cs	/^            public UInt32 x, y, w, h;    \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	f	struct:Darknet.YoloWrapper.bbox_t
h	detector.c	/^    float w, h;$/;"	m	struct:__anon12	file:
h	parser.c	/^    int h;$/;"	m	struct:size_params	file:
handle_file_request	httplib.h	/^inline bool Server::handle_file_request(Request &req, Response &res) {$/;"	f	class:httplib::Server
hard_mish_yashas	activations.c	/^static float hard_mish_yashas(float x)$/;"	f	file:
hard_mish_yashas_grad	activations.c	/^static float hard_mish_yashas_grad(float x)$/;"	f	file:
hardtan_activate	activations.h	/^static inline float hardtan_activate(float x)$/;"	f
hardtan_gradient	activations.h	/^static inline float hardtan_gradient(float x)$/;"	f
has_arg	getopt.c	/^  int has_arg; \/* does it take an argument?		*\/$/;"	m	struct:option	file:
has_file	httplib.h	/^inline bool Request::has_file(const char *key) const {$/;"	f	class:httplib::Request
has_header	httplib.h	/^inline bool Request::has_header(const char *key) const {$/;"	f	class:httplib::Request
has_header	httplib.h	/^inline bool Response::has_header(const char *key) const {$/;"	f	class:httplib::Response
has_header	httplib.h	/^inline bool has_header(const Headers &headers, const char *key) {$/;"	f	namespace:httplib::detail
has_param	httplib.h	/^inline bool Request::has_param(const char *key) const {$/;"	f	class:httplib::Request
headers	httplib.h	/^  Headers headers;$/;"	m	struct:httplib::Request
headers	httplib.h	/^  Headers headers;$/;"	m	struct:httplib::Response
hier_thresh	multidnn.h	/^    float hier_thresh;$/;"	m	struct:DEMO_DETECTOR
hierarchy_predictions	tree.c	/^void hierarchy_predictions(float *predictions, int n, tree *hier, int only_leaves)$/;"	f
hierarchy_top_prediction	tree.c	/^int hierarchy_top_prediction(float *predictions, tree *hier, float thresh, int stride)$/;"	f
hold_out_matrix	matrix.c	/^matrix hold_out_matrix(matrix *m, int n)$/;"	f
host_	httplib.h	/^  const std::string host_;$/;"	m	class:httplib::Client
host_and_port_	httplib.h	/^  const std::string host_and_port_;$/;"	m	class:httplib::Client
host_components_	httplib.h	/^  std::vector<std::string> host_components_;$/;"	m	class:httplib::SSLClient
hsv_to_rgb	image.cpp	/^void hsv_to_rgb(image im)$/;"	f
http_post_host	multidnn.h	/^    char *http_post_host;$/;"	m	struct:DEMO_DETECTOR
httplib	httplib.h	/^namespace httplib {$/;"	n
hue_image	image.cpp	/^void hue_image(image im, float hue)$/;"	f
idx	avees.c	/^static int idx;$/;"	v	file:
idx	multidnn.h	/^    int idx;$/;"	m	struct:ARGS
idx	multidnn.h	/^    int idx;$/;"	m	struct:DEMO_CLASSI
idx	multidnn.h	/^    int idx;$/;"	m	struct:DEMO_DETECTOR
illoptchar	getopt.h	/^static const char illoptchar[] = "unknown option -- %c";$/;"	v
illoptstring	getopt.h	/^static const char illoptstring[] = "unknown option -- %s";$/;"	v
im2col_cpu	im2col.c	/^void im2col_cpu(float* data_im,$/;"	f
im2col_cpu_custom	gemm.c	/^void im2col_cpu_custom(float* data_im,$/;"	f
im2col_cpu_custom_align	gemm.c	/^void im2col_cpu_custom_align(float* data_im,$/;"	f
im2col_cpu_custom_bin	gemm.c	/^void im2col_cpu_custom_bin(float* data_im,$/;"	f
im2col_cpu_custom_transpose	gemm.c	/^void im2col_cpu_custom_transpose(float* data_im,$/;"	f
im2col_cpu_ext	im2col.c	/^void im2col_cpu_ext(const float* data_im, const int channels,$/;"	f
im2col_get_pixel	im2col.c	/^float im2col_get_pixel(float *im, int height, int width, int channels,$/;"	f
image_data_augmentation	image_opencv.cpp	/^extern "C" image image_data_augmentation(mat_cv* mat, int w, int h,$/;"	f
image_distance	image.cpp	/^image image_distance(image a, image b)$/;"	f
image_index	detector.c	/^    int image_index;$/;"	m	struct:__anon11	file:
image_to_mat	image_opencv.cpp	/^extern "C" cv::Mat image_to_mat(image img)$/;"	f
image_waiting_time	avees.c	/^static double image_waiting_time;$/;"	v	file:
image_waiting_time_array	avees.c	/^double image_waiting_time_array[CYCLE_IDX];$/;"	v
image_waiting_time_sum	avees.c	/^double image_waiting_time_sum;$/;"	v
images	yolo_v2_class.cpp	/^    image images[NFRAMES];$/;"	m	struct:detector_gpu_t	file:
in_img	avees.c	/^mat_cv* in_img;$/;"	v
in_img	demo.c	/^mat_cv* in_img;$/;"	v
in_img	multidnn.c	/^mat_cv* in_img;$/;"	v
in_s	avees.c	/^static image in_s ;$/;"	v	file:
in_s	demo.c	/^static image in_s ;$/;"	v	file:
in_s	multidnn.c	/^static image in_s ;$/;"	v	file:
increment_layer	conv_lstm_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
increment_layer	crnn_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
increment_layer	gru_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
increment_layer	lstm_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
increment_layer	rnn_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
index	box.c	/^    int index;$/;"	m	struct:__anon5	file:
index	parser.c	/^    int index;$/;"	m	struct:size_params	file:
inference_array	avees.c	/^double inference_array[CYCLE_IDX];$/;"	v
inference_index	avees.c	/^static int inference_index;$/;"	v	file:
inference_sum	avees.c	/^double inference_sum;$/;"	v
inference_time	avees.c	/^static double inference_time;$/;"	v	file:
info	multidnn.h	/^    DNN_Info info;$/;"	m	struct:MULTI_DNN
init	yolo_v2_class.cpp	/^int init(const char *configurationFilename, const char *weightsFilename, int gpu, int batch_size)$/;"	f
init_cpu	gemm.c	/^void init_cpu() {$/;"	f
inputs	parser.c	/^    int inputs;$/;"	m	struct:size_params	file:
int_index	utils.c	/^int int_index(int *a, int val, int n)$/;"	f
int_to_alphanum	utils.c	/^char int_to_alphanum(int i)$/;"	f
inter_cpu	blas.c	/^void inter_cpu(int NX, float *X, int NY, float *Y, int B, float *OUT)$/;"	f
inverted	go.c	/^int inverted = 1;$/;"	v
ipl_into_image	image.cpp	/^void ipl_into_image(IplImage* src, image im)$/;"	f
ipl_to_image	image.cpp	/^image ipl_to_image(IplImage* src)$/;"	f
isOpened	http_stream.cpp	/^    bool isOpened()$/;"	f	class:JSON_sender
isOpened	http_stream.cpp	/^    bool isOpened()$/;"	f	class:MJPG_sender
is_a_ge_zero_and_a_lt_b	col2im.c	/^inline static int is_a_ge_zero_and_a_lt_b(int a, int b) {$/;"	f	file:
is_a_ge_zero_and_a_lt_b	im2col.c	/^inline static int is_a_ge_zero_and_a_lt_b(int a, int b) {$/;"	f	file:
is_avx	gemm.c	/^int is_avx() {$/;"	f
is_chunked_transfer_encoding	httplib.h	/^inline bool is_chunked_transfer_encoding(const Headers &headers) {$/;"	f	namespace:httplib::detail
is_connection_error	httplib.h	/^inline bool is_connection_error() {$/;"	f	namespace:httplib::detail
is_dir	httplib.h	/^inline bool is_dir(const std::string &path) {$/;"	f	namespace:httplib::detail
is_ema_initialized	network.c	/^int is_ema_initialized(network net)$/;"	f
is_file	httplib.h	/^inline bool is_file(const std::string &path) {$/;"	f	namespace:httplib::detail
is_fma_avx2	gemm.c	/^int is_fma_avx2() {$/;"	f
is_hex	httplib.h	/^inline bool is_hex(char c, int &v) {$/;"	f	namespace:httplib::detail
is_live_stream	utils.c	/^bool is_live_stream(const char * path){$/;"	f
is_network	parser.c	/^int is_network(section *s)$/;"	f
is_object_present	yolo_console_dll.cpp	/^    bool is_object_present() {$/;"	f	class:send_one_replaceable_object_t
is_running	httplib.h	/^inline bool Server::is_running() const { return is_running_; }$/;"	f	class:httplib::Server
is_running_	httplib.h	/^  std::atomic<bool> is_running_;$/;"	m	class:httplib::Server
is_ssl	httplib.h	/^inline bool Client::is_ssl() const { return false; }$/;"	f	class:httplib::Client
is_ssl	httplib.h	/^inline bool SSLClient::is_ssl() const { return true; }$/;"	f	class:httplib::SSLClient
is_valid	httplib.h	/^  bool is_valid() const { return is_valid_; }$/;"	f	class:httplib::detail::decompressor
is_valid	httplib.h	/^inline bool Client::is_valid() const { return true; }$/;"	f	class:httplib::Client
is_valid	httplib.h	/^inline bool SSLClient::is_valid() const { return ctx_; }$/;"	f	class:httplib::SSLClient
is_valid	httplib.h	/^inline bool SSLServer::is_valid() const { return ctx_; }$/;"	f	class:httplib::SSLServer
is_valid	httplib.h	/^inline bool Server::is_valid() const { return true; }$/;"	f	class:httplib::Server
is_valid_	httplib.h	/^  bool is_valid_;$/;"	m	class:httplib::detail::decompressor
is_valid_path	httplib.h	/^inline bool is_valid_path(const std::string &path) {$/;"	f	namespace:httplib::detail
isatty	darkunistd.h	35;"	d
jobs_	httplib.h	/^  std::list<std::function<void()>> jobs_;$/;"	m	class:httplib::ThreadPool
js_ptr	http_stream.cpp	/^static std::unique_ptr<JSON_sender> js_ptr;$/;"	v	file:
json_port	multidnn.h	/^    int json_port;$/;"	m	struct:DEMO_DETECTOR
keep_alive_max_count_	httplib.h	/^  size_t keep_alive_max_count_;$/;"	m	class:httplib::Client
keep_alive_max_count_	httplib.h	/^  size_t keep_alive_max_count_;$/;"	m	class:httplib::Server
key	option_list.h	/^    char *key;$/;"	m	struct:__anon6
kmeans_expectation	matrix.c	/^int kmeans_expectation(matrix data, int *assignments, matrix centers)$/;"	f
kmeans_maximization	matrix.c	/^void kmeans_maximization(matrix data, int *assignments, matrix centers)$/;"	f
kvp	option_list.h	/^} kvp;$/;"	t	typeref:struct:__anon6
l	yolo_layer.c	/^    layer l;$/;"	m	struct:train_yolo_args	file:
l1_cpu	blas.c	/^void l1_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
l2_cpu	blas.c	/^void l2_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
label_classifier	classifier.c	/^void label_classifier(char *datacfg, char *filename, char *weightfile)$/;"	f
lastlayer	multidnn.h	/^    int lastlayer;$/;"	m	struct:MULTI_DNN
leaky_activate	activations.h	/^static inline float leaky_activate(float x){return (x>0) ? x : .1f*x;}$/;"	f
leaky_gradient	activations.h	/^static inline float leaky_gradient(float x){return (x>0) ? 1 : .1f;}$/;"	f
legal_go	go.c	/^int legal_go(float *b, char *ko, int p, int r, int c)$/;"	f
length	httplib.h	/^  size_t length = 0;$/;"	m	struct:httplib::MultipartFile
letter_box	avees.c	/^static int letter_box = 0;$/;"	v	file:
letter_box	demo.c	/^static int letter_box = 0;$/;"	v	file:
letter_box	multidnn.c	/^static int letter_box = 0;$/;"	v	file:
letter_box	multidnn.h	/^    int letter_box;$/;"	m	struct:DEMO_DETECTOR
letterbox_image	image.cpp	/^image letterbox_image(image im, int w, int h)$/;"	f
letterbox_image_into	image.cpp	/^void letterbox_image_into(image im, int w, int h, image boxed)$/;"	f
lhtan_activate	activations.h	/^static inline float lhtan_activate(float x)$/;"	f
lhtan_gradient	activations.h	/^static inline float lhtan_gradient(float x)$/;"	f
linear_activate	activations.h	/^static inline float linear_activate(float x){return x;}$/;"	f
linear_gradient	activations.h	/^static inline float linear_gradient(float x){return 1;}$/;"	f
list	list.h	/^typedef struct list{$/;"	s
list	list.h	/^} list;$/;"	t	typeref:struct:list
list_insert	list.c	/^void list_insert(list *l, void *val)$/;"	f
list_pop	list.c	/^void *list_pop(list *l){$/;"	f
list_to_array	list.c	/^void **list_to_array(list *l)$/;"	f
listen	httplib.h	/^inline bool Server::listen(const char *host, int port, int socket_flags) {$/;"	f	class:httplib::Server
listen_after_bind	httplib.h	/^inline bool Server::listen_after_bind() { return listen_internal(); }$/;"	f	class:httplib::Server
listen_internal	httplib.h	/^inline bool Server::listen_internal() {$/;"	f	class:httplib::Server
load_all_cifar10	data.c	/^data load_all_cifar10()$/;"	f
load_alphabet	image.cpp	/^image **load_alphabet()$/;"	f
load_batchnorm_weights	parser.c	/^void load_batchnorm_weights(layer l, FILE *fp)$/;"	f
load_categorical_data_csv	data.c	/^data load_categorical_data_csv(char *filename, int target, int k)$/;"	f
load_cifar10_data	data.c	/^data load_cifar10_data(char *filename)$/;"	f
load_connected_weights	parser.c	/^void load_connected_weights(layer l, FILE *fp, int transpose)$/;"	f
load_convolutional_weights	parser.c	/^void load_convolutional_weights(layer l, FILE *fp)$/;"	f
load_convolutional_weights_binary	parser.c	/^void load_convolutional_weights_binary(layer l, FILE *fp)$/;"	f
load_data	data.c	/^pthread_t load_data(load_args args)$/;"	f
load_data_augment	data.c	/^data load_data_augment(char **paths, int n, int m, char **labels, int k, tree *hierarchy, int use_flip, int min, int max, int w, int h, float angle,$/;"	f
load_data_captcha	data.c	/^data load_data_captcha(char **paths, int n, int m, int k, int w, int h)$/;"	f
load_data_captcha_encode	data.c	/^data load_data_captcha_encode(char **paths, int n, int m, int w, int h)$/;"	f
load_data_compare	data.c	/^data load_data_compare(int n, char **paths, int m, int classes, int w, int h)$/;"	f
load_data_detection	data.c	/^data load_data_detection(int n, char **paths, int m, int w, int h, int c, int boxes, int truth_size, int classes, int use_flip, int gaussian_noise, int use_blur, int use_mixup,$/;"	f
load_data_detection	data.c	/^data load_data_detection(int n, char **paths, int m, int w, int h, int c, int boxes, int truth_size, int classes, int use_flip, int use_gaussian_noise, int use_blur, int use_mixup,$/;"	f
load_data_in_thread	data.c	/^pthread_t load_data_in_thread(load_args args)$/;"	f
load_data_old	data.c	/^data load_data_old(char **paths, int n, int m, char **labels, int k, int w, int h)$/;"	f
load_data_region	data.c	/^data load_data_region(int n, char **paths, int m, int w, int h, int size, int classes, float jitter, float hue, float saturation, float exposure)$/;"	f
load_data_super	data.c	/^data load_data_super(char **paths, int n, int m, int w, int h, int scale)$/;"	f
load_data_swag	data.c	/^data load_data_swag(char **paths, int n, int classes, float jitter)$/;"	f
load_data_tag	data.c	/^data load_data_tag(char **paths, int n, int m, int k, int use_flip, int min, int max, int w, int h, float angle, float aspect, float hue, float saturation, float exposure)$/;"	f
load_data_writing	data.c	/^data load_data_writing(char **paths, int n, int m, int w, int h, int out_w, int out_h)$/;"	f
load_go	data.c	/^data load_go(char *filename)$/;"	f
load_go_moves	go.c	/^moves load_go_moves(char *filename)$/;"	f
load_image	image.cpp	/^image load_image(char *filename, int w, int h, int c)$/;"	f
load_image	yolo_v2_class.cpp	/^LIB_API image_t Detector::load_image(std::string image_filename)$/;"	f	class:Detector
load_image_augment_paths	data.c	/^matrix load_image_augment_paths(char **paths, int n, int use_flip, int min, int max, int w, int h, float angle, float aspect, float hue, float saturation, float exposure, int dontuse_opencv, int contrastive)$/;"	f
load_image_color	image.cpp	/^image load_image_color(char *filename, int w, int h)$/;"	f
load_image_cv	image_opencv.cpp	/^extern "C" image load_image_cv(char *filename, int channels)$/;"	f
load_image_mat	image_opencv.cpp	/^cv::Mat load_image_mat(char *filename, int channels)$/;"	f
load_image_mat_cv	image_opencv.cpp	/^extern "C" mat_cv *load_image_mat_cv(const char *filename, int flag)$/;"	f
load_image_paths	data.c	/^matrix load_image_paths(char **paths, int n, int w, int h)$/;"	f
load_image_paths_gray	data.c	/^matrix load_image_paths_gray(char **paths, int n, int w, int h)$/;"	f
load_image_resize	image_opencv.cpp	/^extern "C" image load_image_resize(char *filename, int w, int h, int c, image *im)$/;"	f
load_image_stb	image.cpp	/^image load_image_stb(char *filename, int channels)$/;"	f
load_image_stb	yolo_v2_class.cpp	/^static image load_image_stb(char *filename, int channels)$/;"	f	file:
load_image_stb_resize	image.cpp	/^image load_image_stb_resize(char *filename, int w, int h, int c)$/;"	f
load_implicit_weights	parser.c	/^void load_implicit_weights(layer l, FILE *fp)$/;"	f
load_labels_paths	data.c	/^matrix load_labels_paths(char **paths, int n, char **labels, int k, tree *hierarchy, float label_smooth_eps, int contrastive)$/;"	f
load_network	parser.c	/^network *load_network(char *cfg, char *weights, int clear)$/;"	f
load_network_custom	parser.c	/^network *load_network_custom(char *cfg, char *weights, int clear, int batch)$/;"	f
load_shortcut_weights	parser.c	/^void load_shortcut_weights(layer l, FILE *fp)$/;"	f
load_tags_paths	data.c	/^matrix load_tags_paths(char **paths, int n, int k)$/;"	f
load_thread	data.c	/^void *load_thread(void *ptr)$/;"	f
load_threads	data.c	/^void *load_threads(void *ptr)$/;"	f
load_weights	parser.c	/^void load_weights(network *net, char *filename)$/;"	f
load_weights_upto	parser.c	/^void load_weights_upto(network *net, char *filename, int cutoff)$/;"	f
local_layer	local_layer.h	/^typedef layer local_layer;$/;"	t
local_out_height	local_layer.c	/^int local_out_height(local_layer l)$/;"	f
local_out_width	local_layer.c	/^int local_out_width(local_layer l)$/;"	f
locking_callback	httplib.h	/^  static void locking_callback(int mode, int type, const char * \/*file*\/,$/;"	f	class:httplib::detail::SSLThreadLocks
logger_	httplib.h	/^  Logger logger_;$/;"	m	class:httplib::Server
loggy_activate	activations.h	/^static inline float loggy_activate(float x){return 2.f\/(1.f + expf(-x)) - 1;}$/;"	f
loggy_gradient	activations.h	/^static inline float loggy_gradient(float x)$/;"	f
logistic_activate	activations.h	/^static inline float logistic_activate(float x){return 1.f\/(1.f + expf(-x));}$/;"	f
logistic_gradient	activations.h	/^static inline float logistic_gradient(float x){return (1-x)*x;}$/;"	f
logistic_x_ent_cpu	blas.c	/^void logistic_x_ent_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
logit	region_layer.c	/^float logit(float x)$/;"	f
lookup	gemm.c	/^static unsigned char lookup[16] = {$/;"	v	file:
lrelu	network.c	/^static float lrelu(float src) {$/;"	f	file:
lseek	darkunistd.h	36;"	d
mag_array	utils.c	/^float mag_array(float *a, int n)$/;"	f
mag_array_skip	utils.c	/^float mag_array_skip(float *a, int n, int * indices_to_skip)$/;"	f
main	darknet.c	/^int main(int argc, char **argv)$/;"	f
main	yolo_console_dll.cpp	/^int main(int argc, char *argv[])$/;"	f
main_lock	multidnn.c	/^pthread_mutex_t main_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v
make_activation_layer	activation_layer.c	/^layer make_activation_layer(int batch, int inputs, ACTIVATION activation)$/;"	f
make_attention_image	image.cpp	/^image make_attention_image(int img_size, float *original_delta_cpu, float *original_input_cpu, int w, int h, int c, float alpha)$/;"	f
make_avgpool_layer	avgpool_layer.c	/^avgpool_layer make_avgpool_layer(int batch, int w, int h, int c)$/;"	f
make_basic_authentication_header	httplib.h	/^make_basic_authentication_header(const std::string &username,$/;"	f	namespace:httplib
make_batchnorm_layer	batchnorm_layer.c	/^layer make_batchnorm_layer(int batch, int w, int h, int c, int train)$/;"	f
make_connected_layer	connected_layer.c	/^connected_layer make_connected_layer(int batch, int steps, int inputs, int outputs, ACTIVATION activation, int batch_normalize)$/;"	f
make_content_range_header_field	httplib.h	/^inline std::string make_content_range_header_field(size_t offset, size_t length,$/;"	f	namespace:httplib::detail
make_contrastive_layer	softmax_layer.c	/^contrastive_layer make_contrastive_layer(int batch, int w, int h, int c, int classes, int inputs, layer *yolo_layer)$/;"	f
make_conv_lstm_layer	conv_lstm_layer.c	/^layer make_conv_lstm_layer(int batch, int h, int w, int c, int output_filters, int groups, int steps, int size, int stride, int dilation, int pad, ACTIVATION activation, int batch_normalize, int peephole, int xnor, int bottleneck, int train)$/;"	f
make_convolutional_layer	convolutional_layer.c	/^convolutional_layer make_convolutional_layer(int batch, int steps, int h, int w, int c, int n, int groups, int size, int stride_x, int stride_y, int dilation, int padding, ACTIVATION activation, int batch_normalize, int binary, int xnor, int adam, int use_bin_output, int index, int antialiasing, convolutional_layer *share_layer, int assisted_excitation, int deform, int train)$/;"	f
make_cost_layer	cost_layer.c	/^cost_layer make_cost_layer(int batch, int inputs, COST_TYPE cost_type, float scale)$/;"	f
make_crnn_layer	crnn_layer.c	/^layer make_crnn_layer(int batch, int h, int w, int c, int hidden_filters, int output_filters, int groups, int steps, int size, int stride, int dilation, int pad, ACTIVATION activation, int batch_normalize, int xnor, int train)$/;"	f
make_crop_layer	crop_layer.c	/^crop_layer make_crop_layer(int batch, int h, int w, int c, int crop_height, int crop_width, int flip, float angle, float saturation, float exposure)$/;"	f
make_deconvolutional_layer	deconvolutional_layer.c	/^deconvolutional_layer make_deconvolutional_layer(int batch, int h, int w, int c, int n, int size, int stride, ACTIVATION activation)$/;"	f
make_detection_layer	detection_layer.c	/^detection_layer make_detection_layer(int batch, int inputs, int n, int side, int classes, int coords, int rescore)$/;"	f
make_directory	utils.c	/^int make_directory(char *path, int mode)$/;"	f
make_dropout_layer	dropout_layer.c	/^dropout_layer make_dropout_layer(int batch, int inputs, float probability, int dropblock, float dropblock_size_rel, int dropblock_size_abs, int w, int h, int c)$/;"	f
make_empty_image	image.cpp	/^image make_empty_image(int w, int h, int c)$/;"	f
make_float_array	http_stream.cpp	/^float *make_float_array(float* src, size_t size)$/;"	f
make_gaussian_yolo_layer	gaussian_yolo_layer.c	/^layer make_gaussian_yolo_layer(int batch, int w, int h, int n, int total, int *mask, int classes, int max_boxes)$/;"	f
make_gru_layer	gru_layer.c	/^layer make_gru_layer(int batch, int inputs, int outputs, int steps, int batch_normalize)$/;"	f
make_history_layer	conv_lstm_layer.c	/^layer make_history_layer(int batch, int h, int w, int c, int history_size, int steps, int train)$/;"	f
make_image	image.cpp	/^image make_image(int w, int h, int c)$/;"	f
make_image_red	image.cpp	/^void make_image_red(image im)$/;"	f
make_implicit_layer	representation_layer.c	/^layer make_implicit_layer(int batch, int index, float mean_init, float std_init, int filters, int atoms)$/;"	f
make_list	list.c	/^list *make_list()$/;"	f
make_local_layer	local_layer.c	/^local_layer make_local_layer(int batch, int h, int w, int c, int n, int size, int stride, int pad, ACTIVATION activation)$/;"	f
make_lstm_layer	lstm_layer.c	/^layer make_lstm_layer(int batch, int inputs, int outputs, int steps, int batch_normalize)$/;"	f
make_matrix	matrix.c	/^matrix make_matrix(int rows, int cols)$/;"	f
make_maxpool_layer	maxpool_layer.c	/^maxpool_layer make_maxpool_layer(int batch, int h, int w, int c, int size, int stride_x, int stride_y, int padding, int maxpool_depth, int out_channels, int antialiasing, int avgpool, int train)$/;"	f
make_multipart_data_boundary	httplib.h	/^inline std::string make_multipart_data_boundary() {$/;"	f	namespace:httplib::detail
make_multipart_ranges_data	httplib.h	/^inline std::string make_multipart_ranges_data(const Request &req, Response &res,$/;"	f	namespace:httplib::detail
make_network	network.c	/^network make_network(int n)$/;"	f
make_network_boxes	network.c	/^detection *make_network_boxes(network *net, float thresh, int *num)$/;"	f
make_network_boxes_batch	network.c	/^detection *make_network_boxes_batch(network *net, float thresh, int *num, int batch)$/;"	f
make_normalization_layer	normalization_layer.c	/^layer make_normalization_layer(int batch, int w, int h, int c, int size, float alpha, float beta, float kappa)$/;"	f
make_random_image	image.cpp	/^image make_random_image(int w, int h, int c)$/;"	f
make_range_header	httplib.h	/^inline std::pair<std::string, std::string> make_range_header(Ranges ranges) {$/;"	f	namespace:httplib
make_region_layer	region_layer.c	/^region_layer make_region_layer(int batch, int w, int h, int n, int classes, int coords, int max_boxes)$/;"	f
make_reorg_layer	reorg_layer.c	/^layer make_reorg_layer(int batch, int w, int h, int c, int stride, int reverse)$/;"	f
make_reorg_old_layer	reorg_old_layer.c	/^layer make_reorg_old_layer(int batch, int w, int h, int c, int stride, int reverse)$/;"	f
make_rnn_layer	rnn_layer.c	/^layer make_rnn_layer(int batch, int inputs, int hidden, int outputs, int steps, ACTIVATION activation, int batch_normalize, int log)$/;"	f
make_route_layer	route_layer.c	/^route_layer make_route_layer(int batch, int n, int *input_layers, int *input_sizes, int groups, int group_id)$/;"	f
make_sam_layer	sam_layer.c	/^layer make_sam_layer(int batch, int index, int w, int h, int c, int w2, int h2, int c2)$/;"	f
make_scale_channels_layer	scale_channels_layer.c	/^layer make_scale_channels_layer(int batch, int index, int w, int h, int c, int w2, int h2, int c2, int scale_wh)$/;"	f
make_shortcut_layer	shortcut_layer.c	/^layer make_shortcut_layer(int batch, int n, int *input_layers, int* input_sizes, int w, int h, int c,$/;"	f
make_softmax_layer	softmax_layer.c	/^softmax_layer make_softmax_layer(int batch, int inputs, int groups)$/;"	f
make_upsample_layer	upsample_layer.c	/^layer make_upsample_layer(int batch, int w, int h, int c, int stride)$/;"	f
make_window	image_opencv.cpp	/^extern "C" void make_window(char *name, int w, int h, int fullscreen)$/;"	f
make_yolo_layer	yolo_layer.c	/^layer make_yolo_layer(int batch, int w, int h, int n, int total, int *mask, int classes, int max_boxes)$/;"	f
makes_safe_go	go.c	/^int makes_safe_go(float *b, int *lib, int p, int r, int c){$/;"	f
malloc_error	utils.c	/^void malloc_error(const size_t size, const char * const filename, const char * const funcname, const int line)$/;"	f
master	http_stream.cpp	/^    fd_set master;$/;"	m	class:JSON_sender	file:
master	http_stream.cpp	/^    fd_set master;$/;"	m	class:MJPG_sender	file:
mat_cv	image_opencv.h	/^typedef void* mat_cv;$/;"	t
mat_to_image	image_opencv.cpp	/^extern "C" image mat_to_image(cv::Mat mat)$/;"	f
mat_to_image_cv	image_opencv.cpp	/^image mat_to_image_cv(mat_cv *mat)$/;"	f
matches	httplib.h	/^  Match matches;$/;"	m	struct:httplib::Request
math_vector_length	blas.c	/^float math_vector_length(float *A, unsigned int feature_size)$/;"	f
matrix_add_matrix	matrix.c	/^void matrix_add_matrix(matrix from, matrix to)$/;"	f
matrix_to_csv	matrix.c	/^void matrix_to_csv(matrix m)$/;"	f
matrix_topk_accuracy	matrix.c	/^float matrix_topk_accuracy(matrix truth, matrix guess, int k)$/;"	f
max_events	dark_cuda.c	/^static const int max_events = 1024;$/;"	v	file:
max_index	utils.c	/^int max_index(float *a, int n)$/;"	f
max_int_index	utils.c	/^int max_int_index(int *a, int n)$/;"	f
max_val_cmp	utils.h	112;"	d
maxfd	http_stream.cpp	/^    SOCKET maxfd;$/;"	m	class:JSON_sender	file:
maxfd	http_stream.cpp	/^    SOCKET maxfd;$/;"	m	class:MJPG_sender	file:
maxpool_layer	maxpool_layer.h	/^typedef layer maxpool_layer;$/;"	t
mean_array	utils.c	/^float mean_array(float *a, int n)$/;"	f
mean_arrays	utils.c	/^void mean_arrays(float **a, int n, int els, float *avg)$/;"	f
mean_cpu	blas.c	/^void mean_cpu(float *x, int batch, int filters, int spatial, float *mean)$/;"	f
mean_delta_cpu	batchnorm_layer.c	/^void mean_delta_cpu(float *delta, float *variance, int batch, int filters, int spatial, float *mean_delta)$/;"	f
meas_quantum_time_array	multidnn.c	/^double meas_quantum_time_array[QUANTUM_ITERATION];$/;"	v
method	httplib.h	/^  std::string method;$/;"	m	struct:httplib::Request
min_val_cmp	utils.h	113;"	d
mjpeg_port	multidnn.h	/^    int mjpeg_port;$/;"	m	struct:DEMO_DETECTOR
model	matrix.h	/^} model;$/;"	t	typeref:struct:__anon1
move_go	go.c	/^void move_go(float *b, int p, int r, int c)$/;"	f
move_window_cv	image_opencv.cpp	/^extern "C" void move_window_cv(char const* window_name, int x, int y)$/;"	f
moves	go.c	/^} moves;$/;"	t	typeref:struct:__anon3	file:
mse_array	utils.c	/^float mse_array(float *a, int n)$/;"	f
mtx	http_stream.cpp	/^static std::mutex mtx;$/;"	v	file:
mtx_load_data	data.c	/^pthread_mutex_t mtx_load_data = PTHREAD_MUTEX_INITIALIZER;$/;"	v
mtx_mjpeg	http_stream.cpp	/^static std::mutex mtx_mjpeg;$/;"	v	file:
mul_cpu	blas.c	/^void mul_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
mult_add_into_cpu	blas.c	/^void mult_add_into_cpu(int N, float *X, float *Y, float *Z)$/;"	f
multi_classification_in_thread	multidnn.c	/^void *multi_classification_in_thread(void *ptr)$/;"	f
multi_detect_in_thread	multidnn.c	/^void *multi_detect_in_thread(void *ptr)$/;"	f
multi_display_in_thread	multidnn.c	/^void *multi_display_in_thread(void *arg)$/;"	f
multi_display_in_thread_sync	multidnn.c	/^void *multi_display_in_thread_sync(void *ptr)$/;"	f
multi_fetch_in_thread	multidnn.c	/^void *multi_fetch_in_thread(void *ptr)$/;"	f
multi_get_wall_time	multidnn.c	/^double multi_get_wall_time()$/;"	f
multi_network_predict	network.c	/^float *multi_network_predict(network net, float *input, DNN_Info dnn_info)$/;"	f
mutex	data.c	/^pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
mutex_	httplib.h	/^  std::mutex mutex_;$/;"	m	class:httplib::ThreadPool
mutex_pinned	dark_cuda.c	/^static pthread_mutex_t mutex_pinned = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
n	go.c	/^    int n;$/;"	m	struct:__anon3	file:
n_ind	go.c	11;"	d	file:
name	getopt.c	/^  const char* name; \/* option name, without leading hyphens *\/$/;"	m	struct:option	file:
name	httplib.h	/^  std::string name;$/;"	m	struct:httplib::MultipartFormData
names	multidnn.h	/^    char **names;$/;"	m	struct:DEMO_DETECTOR
nboxes	avees.c	/^static int nboxes = 0;$/;"	v	file:
nboxes	demo.c	/^static int nboxes = 0;$/;"	v	file:
nboxes	multidnn.c	/^static int nboxes = 0;$/;"	v	file:
net	avees.c	/^static network net;$/;"	v	file:
net	compare.c	/^    network net;$/;"	m	struct:__anon8	file:
net	demo.c	/^static network net;$/;"	v	file:
net	multidnn.c	/^static network net;$/;"	v	file:
net	parser.c	/^    network net;$/;"	m	struct:size_params	file:
net	yolo_v2_class.cpp	/^    network net;$/;"	m	struct:detector_gpu_t	file:
net_c	multidnn.c	/^static network net_c;$/;"	v	file:
network_accuracies	network.c	/^float *network_accuracies(network net, data d, int n)$/;"	f
network_accuracy	network.c	/^float network_accuracy(network net, data d)$/;"	f
network_accuracy_multi	network.c	/^float network_accuracy_multi(network net, data d, int n)$/;"	f
network_height	network.c	/^int network_height(network *net) { return net->h; }$/;"	f
network_predict	network.c	/^float *network_predict(network net, float *input)$/;"	f
network_predict_batch	network.c	/^det_num_pair* network_predict_batch(network *net, image im, int batch_size, int w, int h, float thresh, float hier, int *map, int relative, int letter)$/;"	f
network_predict_data	network.c	/^matrix network_predict_data(network net, data test)$/;"	f
network_predict_data_multi	network.c	/^matrix network_predict_data_multi(network net, data test, int n)$/;"	f
network_predict_image	network.c	/^float *network_predict_image(network *net, image im)$/;"	f
network_predict_image_letterbox	network.c	/^float *network_predict_image_letterbox(network *net, image im)$/;"	f
network_predict_ptr	network.c	/^float *network_predict_ptr(network *net, float *input)$/;"	f
network_width	network.c	/^int network_width(network *net) { return net->w; }$/;"	f
new_id	http_stream.cpp	/^    int old_id, new_id;$/;"	m	struct:similarity_detections_t	file:
new_task_queue	httplib.h	/^  std::function<TaskQueue *(void)> new_task_queue;$/;"	m	class:httplib::Server
next	list.h	/^    struct node *next;$/;"	m	struct:node	typeref:struct:node::node
nms_comparator	box.c	/^int nms_comparator(const void *pa, const void *pb)$/;"	f
nms_comparator_v3	box.c	/^int nms_comparator_v3(const void *pa, const void *pb)$/;"	f
no_argument	getopt.c	/^  no_argument = 0, \/* option never takes an argument	*\/$/;"	e	enum:__anon7	file:
noarg	getopt.h	/^static const char noarg[] = "option doesn't take an argument -- %.*s";$/;"	v
node	list.h	/^typedef struct node{$/;"	s
node	list.h	/^} node;$/;"	t	typeref:struct:node
noexcept	httplib.h	/^  SSL_CTX *ssl_context() const noexcept;$/;"	m	class:httplib::SSLClient
noi	go.c	/^int noi = 1;$/;"	v
nonopt_end	getopt.h	/^static int nonopt_end = -1; \/* first option after non options (for permute) *\/$/;"	v
nonopt_start	getopt.h	/^static int nonopt_start = -1; \/* first non option argument (for permute) *\/$/;"	v
normalize_array	utils.c	/^void normalize_array(float *a, int n)$/;"	f
normalize_cpu	blas.c	/^void normalize_cpu(float *x, float *mean, float *variance, int batch, int filters, int spatial)$/;"	f
normalize_data_rows	data.c	/^void normalize_data_rows(data d)$/;"	f
normalize_delta_cpu	batchnorm_layer.c	/^void normalize_delta_cpu(float *x, float *mean, float *variance, float *mean_delta, float *variance_delta, int batch, int filters, int spatial, float *delta)$/;"	f
normalize_image	image.cpp	/^void normalize_image(image p)$/;"	f
normalize_image2	image.cpp	/^void normalize_image2(image p)$/;"	f
normalize_layer	darknet.c	/^layer normalize_layer(layer l, int n)$/;"	f
normalize_net	darknet.c	/^void normalize_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
num_detections	network.c	/^int num_detections(network *net, float thresh)$/;"	f
num_detections_batch	network.c	/^int num_detections_batch(network *net, float thresh, int batch)$/;"	f
numberof	multidnn.h	/^    int numberof; \/\/ layer$/;"	m	struct:MULTI_DNN
obj_id	csharp/YoloCSharpWrapper.cs	/^            public UInt32 obj_id;        \/\/ class of object - from range [0, classes-1]$/;"	f	struct:Darknet.YoloWrapper.bbox_t
objects_names_from_file	yolo_console_dll.cpp	/^std::vector<std::string> objects_names_from_file(std::string const filename) {$/;"	f
offset	httplib.h	/^  size_t offset = 0;$/;"	m	struct:httplib::MultipartFile
old_id	http_stream.cpp	/^    int old_id, new_id;$/;"	m	struct:similarity_detections_t	file:
on	multidnn.h	/^    volatile int on;$/;"	m	struct:MULTI_DNN
one_hot_encode	utils.c	/^float **one_hot_encode(float *a, int n, int k)$/;"	f
oneoff	darknet.c	/^void oneoff(char *cfgfile, char *weightfile, char *outfile)$/;"	f
onrunning_time	multidnn.h	/^    double onrunning_time[MEASUREMENT_ITERATION];$/;"	m	struct:MULTI_DNN
open	http_stream.cpp	/^    bool open(int port)$/;"	f	class:JSON_sender
open	http_stream.cpp	/^    bool open(int port)$/;"	f	class:MJPG_sender
openSSL_locks_	httplib.h	/^static std::shared_ptr<std::vector<std::mutex>> openSSL_locks_;$/;"	m	namespace:httplib::detail
operations	darknet.c	/^void operations(char *cfgfile)$/;"	f
operator ()	httplib.h	/^    void operator()() {$/;"	f	struct:httplib::ThreadPool::worker
operator ()	httplib.h	/^  bool operator()(const std::string &s1, const std::string &s2) const {$/;"	f	struct:httplib::detail::ci
optarg	getopt.c	/^char* optarg; \/* argument associated with option *\/$/;"	v
opterr	getopt.c	/^int opterr = 1; \/* if error message should be printed *\/$/;"	v
optimize_picture	nightmare.c	/^void optimize_picture(network *net, image orig, int max_layer, float scale, float rate, float thresh, int norm)$/;"	f
optind	getopt.c	/^int optind = 1; \/* index into parent argv vector *\/$/;"	v
option	getopt.c	/^struct option \/* specification for a long form option...	*\/$/;"	s	file:
option_find	option_list.c	/^char *option_find(list *l, char *key)$/;"	f
option_find_float	option_list.c	/^float option_find_float(list *l, char *key, float def)$/;"	f
option_find_float_quiet	option_list.c	/^float option_find_float_quiet(list *l, char *key, float def)$/;"	f
option_find_int	option_list.c	/^int option_find_int(list *l, char *key, int def)$/;"	f
option_find_int_quiet	option_list.c	/^int option_find_int_quiet(list *l, char *key, int def)$/;"	f
option_find_str	option_list.c	/^char *option_find_str(list *l, char *key, char *def)$/;"	f
option_find_str_quiet	option_list.c	/^char *option_find_str_quiet(list *l, char *key, char *def)$/;"	f
option_insert	option_list.c	/^void option_insert(list *l, char *key, char *val)$/;"	f
option_unused	option_list.c	/^void option_unused(list *l)$/;"	f
optional_argument	getopt.c	/^  optional_argument \/* option may take an argument		*\/$/;"	e	enum:__anon7	file:
options	parser.c	/^    list *options;$/;"	m	struct:__anon10	file:
options_handlers_	httplib.h	/^  Handlers options_handlers_;$/;"	m	class:httplib::Server
optopt	getopt.c	/^int optopt = '?'; \/* character checked for validity *\/$/;"	v
optreset	getopt.c	/^int optreset; \/* reset getopt *\/$/;"	v
optreset	getopt.c	12;"	d	file:
optreset	getopt.c	13;"	d	file:
optreset	getopt.h	164;"	d
original_ms	demo.c	/^double original_ms() $/;"	f
original_ms_	classifier.c	/^double original_ms_()$/;"	f
out_filename	multidnn.h	/^    char *out_filename;$/;"	m	struct:DEMO_DETECTOR
overlap	box.c	/^float overlap(float x1, float w1, float x2, float w2)$/;"	f
override	httplib.h	/^  int read(char *ptr, size_t size) override;$/;"	m	class:httplib::BufferStream
override	httplib.h	/^  int read(char *ptr, size_t size) override;$/;"	m	class:httplib::SocketStream
override	httplib.h	/^  int write(const char *ptr) override;$/;"	m	class:httplib::BufferStream
override	httplib.h	/^  int write(const char *ptr) override;$/;"	m	class:httplib::SocketStream
override	httplib.h	/^  int write(const char *ptr, size_t size) override;$/;"	m	class:httplib::BufferStream
override	httplib.h	/^  int write(const char *ptr, size_t size) override;$/;"	m	class:httplib::SocketStream
override	httplib.h	/^  int write(const std::string &s) override;$/;"	m	class:httplib::BufferStream
override	httplib.h	/^  int write(const std::string &s) override;$/;"	m	class:httplib::SocketStream
override	httplib.h	/^  std::string get_remote_addr() const override;$/;"	m	class:httplib::BufferStream
override	httplib.h	/^  std::string get_remote_addr() const override;$/;"	m	class:httplib::SocketStream
override	httplib.h	/^  ~BufferStream() override = default;$/;"	m	class:httplib::BufferStream
override	httplib.h	/^  ~SocketStream() override;$/;"	m	class:httplib::SocketStream
override	httplib.h	/^  ~ThreadPool() override = default;$/;"	m	class:httplib::ThreadPool
p	detector.c	/^    float p;$/;"	m	struct:__anon11	file:
params	httplib.h	/^  Params params;$/;"	m	struct:httplib::Request
parse_activation	parser.c	/^layer parse_activation(list *options, size_params params)$/;"	f
parse_avgpool	parser.c	/^avgpool_layer parse_avgpool(list *options, size_params params)$/;"	f
parse_batchnorm	parser.c	/^layer parse_batchnorm(list *options, size_params params)$/;"	f
parse_connected	parser.c	/^connected_layer parse_connected(list *options, size_params params)$/;"	f
parse_contrastive	parser.c	/^contrastive_layer parse_contrastive(list *options, size_params params)$/;"	f
parse_conv_lstm	parser.c	/^layer parse_conv_lstm(list *options, size_params params)$/;"	f
parse_convolutional	parser.c	/^convolutional_layer parse_convolutional(list *options, size_params params)$/;"	f
parse_cost	parser.c	/^cost_layer parse_cost(list *options, size_params params)$/;"	f
parse_crnn	parser.c	/^layer parse_crnn(list *options, size_params params)$/;"	f
parse_crop	parser.c	/^crop_layer parse_crop(list *options, size_params params)$/;"	f
parse_csv_line	utils.c	/^list *parse_csv_line(char *line)$/;"	f
parse_data	parser.c	/^void parse_data(char *data, float *a, int n)$/;"	f
parse_detection	parser.c	/^detection_layer parse_detection(list *options, size_params params)$/;"	f
parse_dropout	parser.c	/^dropout_layer parse_dropout(list *options, size_params params)$/;"	f
parse_fields	utils.c	/^float *parse_fields(char *line, int n)$/;"	f
parse_gaussian_yolo	parser.c	/^layer parse_gaussian_yolo(list *options, size_params params) \/\/ Gaussian_YOLOv3$/;"	f
parse_gaussian_yolo_mask	parser.c	/^int *parse_gaussian_yolo_mask(char *a, int *num) \/\/ Gaussian_YOLOv3$/;"	f
parse_gru	parser.c	/^layer parse_gru(list *options, size_params params)$/;"	f
parse_history	parser.c	/^layer parse_history(list *options, size_params params)$/;"	f
parse_implicit	parser.c	/^layer parse_implicit(list *options, size_params params, network net)$/;"	f
parse_local	parser.c	/^local_layer parse_local(list *options, size_params params)$/;"	f
parse_local_avgpool	parser.c	/^maxpool_layer parse_local_avgpool(list *options, size_params params)$/;"	f
parse_long_options	getopt.c	/^parse_long_options(char* const* nargv, const char* options,$/;"	f	file:
parse_lstm	parser.c	/^layer parse_lstm(list *options, size_params params)$/;"	f
parse_maxpool	parser.c	/^maxpool_layer parse_maxpool(list *options, size_params params)$/;"	f
parse_multipart_boundary	httplib.h	/^inline bool parse_multipart_boundary(const std::string &content_type,$/;"	f	namespace:httplib::detail
parse_multipart_formdata	httplib.h	/^inline bool parse_multipart_formdata(const std::string &boundary,$/;"	f	namespace:httplib::detail
parse_net_options	parser.c	/^void parse_net_options(list *options, network *net)$/;"	f
parse_network_cfg	parser.c	/^network parse_network_cfg(char *filename)$/;"	f
parse_network_cfg_custom	parser.c	/^network parse_network_cfg_custom(char *filename, int batch, int time_steps)$/;"	f
parse_normalization	parser.c	/^layer parse_normalization(list *options, size_params params)$/;"	f
parse_query_text	httplib.h	/^inline void parse_query_text(const std::string &s, Params &params) {$/;"	f	namespace:httplib::detail
parse_range_header	httplib.h	/^inline bool parse_range_header(const std::string &s, Ranges &ranges) {$/;"	f	namespace:httplib::detail
parse_region	parser.c	/^layer parse_region(list *options, size_params params)$/;"	f
parse_reorg	parser.c	/^layer parse_reorg(list *options, size_params params)$/;"	f
parse_reorg_old	parser.c	/^layer parse_reorg_old(list *options, size_params params)$/;"	f
parse_request_line	httplib.h	/^inline bool Server::parse_request_line(const char *s, Request &req) {$/;"	f	class:httplib::Server
parse_rnn	parser.c	/^layer parse_rnn(list *options, size_params params)$/;"	f
parse_route	parser.c	/^route_layer parse_route(list *options, size_params params)$/;"	f
parse_sam	parser.c	/^layer parse_sam(list *options, size_params params, network net)$/;"	f
parse_scale_channels	parser.c	/^layer parse_scale_channels(list *options, size_params params, network net)$/;"	f
parse_shortcut	parser.c	/^layer parse_shortcut(list *options, size_params params, network net)$/;"	f
parse_softmax	parser.c	/^softmax_layer parse_softmax(list *options, size_params params)$/;"	f
parse_upsample	parser.c	/^layer parse_upsample(list *options, size_params params, network net)$/;"	f
parse_yolo	parser.c	/^layer parse_yolo(list *options, size_params params)$/;"	f
parse_yolo_mask	parser.c	/^int *parse_yolo_mask(char *a, int *num)$/;"	f
partial	darknet.c	/^void partial(char *cfgfile, char *weightfile, char *outfile, int max)$/;"	f
patch_handlers_	httplib.h	/^  Handlers patch_handlers_;$/;"	m	class:httplib::Server
patch_handlers_for_content_reader	httplib.h	/^  HandersForContentReader patch_handlers_for_content_reader;$/;"	m	class:httplib::Server
path	httplib.h	/^  std::string path;$/;"	m	struct:httplib::Request
payload_max_length_	httplib.h	/^  size_t payload_max_length_;$/;"	m	class:httplib::Server
period	multidnn.h	/^    struct timespec period;$/;"	m	struct:MULTI_DNN	typeref:struct:MULTI_DNN::timespec
permute_args	getopt.c	/^permute_args(int panonopt_start, int panonopt_end, int opt_end,$/;"	f	file:
pinned_block_id	dark_cuda.c	/^static size_t pinned_block_id = 0;$/;"	v	file:
pinned_block_size	dark_cuda.c	/^static const size_t pinned_block_size = (size_t)1024 * 1024 * 1024 * 1;   \/\/ 1 GB block size$/;"	v	file:
pinned_index	dark_cuda.c	/^static size_t pinned_index = 0;$/;"	v	file:
pinned_num_of_blocks	dark_cuda.c	/^static size_t pinned_num_of_blocks = 0;$/;"	v	file:
pinned_ptr	dark_cuda.c	/^static float **pinned_ptr = NULL;$/;"	v	file:
place	getopt.h	/^static char* place = EMSG; \/* option letter processing *\/$/;"	v
plse_activate	activations.h	/^static inline float plse_activate(float x)$/;"	f
plse_gradient	activations.h	/^static inline float plse_gradient(float x){return (x < 0 || x > 1) ? .01f : .125f;}$/;"	f
pm	utils.c	/^void pm(int M, int N, float *A)$/;"	f
poll	httplib.h	110;"	d
pool_	httplib.h	/^    ThreadPool &pool_;$/;"	m	struct:httplib::ThreadPool::worker
pop_column	matrix.c	/^float *pop_column(matrix *m, int c)$/;"	f
popcnt	gemm.c	/^static inline uint32_t popcnt(uint32_t v) {$/;"	f	file:
popcnt128	gemm.c	/^static inline int popcnt128(__m128i n) {$/;"	f	file:
popcnt256	gemm.c	/^static inline int popcnt256(__m256i n) {$/;"	f	file:
popcnt256_custom	gemm.c	/^static inline int popcnt256_custom(__m256i n) {$/;"	f	file:
popcnt_64	gemm.c	/^static inline int popcnt_64(uint64_t val64) {$/;"	f	file:
port_	httplib.h	/^  const int port_;$/;"	m	class:httplib::Client
post_handlers_	httplib.h	/^  Handlers post_handlers_;$/;"	m	class:httplib::Server
post_handlers_for_content_reader	httplib.h	/^  HandersForContentReader post_handlers_for_content_reader;$/;"	m	class:httplib::Server
pow_cpu	blas.c	/^void pow_cpu(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)$/;"	f
pre_allocate_pinned_memory	dark_cuda.c	/^void pre_allocate_pinned_memory(const size_t size)$/;"	f
predict_classifier	classifier.c	/^void predict_classifier(char *datacfg, char *cfgfile, char *weightfile, char *filename, int top)$/;"	f
predict_move	go.c	/^void predict_move(network net, float *board, float *move, int multi)$/;"	f
prediction	multidnn.h	/^    float *prediction;$/;"	m	struct:MULTI_DNN
predictions	yolo_v2_class.cpp	/^    float* predictions[NFRAMES];$/;"	m	struct:detector_gpu_t	file:
prefix	multidnn.h	/^    char *prefix;$/;"	m	struct:DEMO_DETECTOR
prev	list.h	/^    struct node *prev;$/;"	m	struct:node	typeref:struct:node::node
print_bdd_detections	detector.c	/^static void print_bdd_detections(FILE *fp, char *image_path, detection *dets, int num_boxes, int classes, int w, int h)$/;"	f	file:
print_board	go.c	/^void print_board(float *board, int swap, int *indexes)$/;"	f
print_cocos	coco.c	/^void print_cocos(FILE *fp, int image_id, box *boxes, float **probs, int num_boxes, int classes, int w, int h)$/;"	f
print_cocos	detector.c	/^static void print_cocos(FILE *fp, char *image_path, detection *dets, int num_boxes, int classes, int w, int h)$/;"	f	file:
print_detector_detections	detector.c	/^void print_detector_detections(FILE **fps, char *id, detection *dets, int total, int classes, int w, int h)$/;"	f
print_image	image.cpp	/^void print_image(image m)$/;"	f
print_imagenet_detections	detector.c	/^void print_imagenet_detections(FILE *fp, int id, detection *dets, int total, int classes, int w, int h)$/;"	f
print_kitti_detections	detector.c	/^static void print_kitti_detections(FILE **fps, char *id, detection *dets, int total, int classes, int w, int h, char *outfile, char *prefix)$/;"	f	file:
print_letters	data.c	/^void print_letters(float *pred, int n)$/;"	f
print_matrix	matrix.c	/^void print_matrix(matrix m)$/;"	f
print_network	network.c	/^void print_network(network net)$/;"	f
print_statistics	utils.c	/^void print_statistics(float *a, int n)$/;"	f
print_symbol	rnn.c	/^void print_symbol(int n, char **tokens){$/;"	f
print_yolo_detections	yolo.c	/^void print_yolo_detections(FILE **fps, char *id, box *boxes, float **probs, int total, int classes, int w, int h)$/;"	f
prob	csharp/YoloCSharpWrapper.cs	/^            public float prob;           \/\/ confidence - probability that the object was found correctly$/;"	f	struct:Darknet.YoloWrapper.bbox_t
probs	box.c	/^    float **probs;$/;"	m	struct:__anon5	file:
process_and_close_socket	httplib.h	/^inline bool Client::process_and_close_socket($/;"	f	class:httplib::Client
process_and_close_socket	httplib.h	/^inline bool SSLClient::process_and_close_socket($/;"	f	class:httplib::SSLClient
process_and_close_socket	httplib.h	/^inline bool SSLServer::process_and_close_socket(socket_t sock) {$/;"	f	class:httplib::SSLServer
process_and_close_socket	httplib.h	/^inline bool Server::process_and_close_socket(socket_t sock) {$/;"	f	class:httplib::Server
process_and_close_socket	httplib.h	/^inline bool process_and_close_socket(bool is_client_request, socket_t sock,$/;"	f	namespace:httplib::detail
process_and_close_socket_ssl	httplib.h	/^inline bool process_and_close_socket_ssl($/;"	f	namespace:httplib::detail
process_batch	yolo_layer.c	/^void *process_batch(void* ptr)$/;"	f
process_multipart_ranges_data	httplib.h	/^bool process_multipart_ranges_data(const Request &req, Response &res,$/;"	f	namespace:httplib::detail
process_request	httplib.h	/^Server::process_request(Stream &strm, bool last_connection,$/;"	f	class:httplib::Server
process_request	httplib.h	/^inline bool Client::process_request(Stream &strm, const Request &req,$/;"	f	class:httplib::Client
progress	httplib.h	/^  Progress progress;$/;"	m	struct:httplib::Request
propagate_liberty	go.c	/^void propagate_liberty(float *board, int *lib, int *visited, int row, int col, int side)$/;"	f
ptr	httplib.h	/^  const char *ptr() const {$/;"	f	class:httplib::detail::stream_line_reader
pull_batchnorm_layer	batchnorm_layer.c	/^void pull_batchnorm_layer(layer l)$/;"	f
pull_connected_layer	connected_layer.c	/^void pull_connected_layer(connected_layer l)$/;"	f
pull_contrastive_layer_output	softmax_layer.c	/^void pull_contrastive_layer_output(const contrastive_layer l)$/;"	f
pull_conv_lstm_layer	conv_lstm_layer.c	/^void pull_conv_lstm_layer(layer l)$/;"	f
pull_cost_layer	cost_layer.c	/^void pull_cost_layer(cost_layer l)$/;"	f
pull_crnn_layer	crnn_layer.c	/^void pull_crnn_layer(layer l)$/;"	f
pull_gru_layer	gru_layer.c	/^void pull_gru_layer(layer l)$/;"	f
pull_implicit_layer	representation_layer.c	/^void pull_implicit_layer(layer l)$/;"	f
pull_local_layer	local_layer.c	/^void pull_local_layer(local_layer l)$/;"	f
pull_rnn_layer	rnn_layer.c	/^void pull_rnn_layer(layer l)$/;"	f
pull_shortcut_layer	shortcut_layer.c	/^void pull_shortcut_layer(layer l)$/;"	f
pull_softmax_layer_output	softmax_layer.c	/^void pull_softmax_layer_output(const softmax_layer layer)$/;"	f
push_batchnorm_layer	batchnorm_layer.c	/^void push_batchnorm_layer(layer l)$/;"	f
push_connected_layer	connected_layer.c	/^void push_connected_layer(connected_layer l)$/;"	f
push_contrastive_layer_output	softmax_layer.c	/^void push_contrastive_layer_output(const contrastive_layer l)$/;"	f
push_conv_lstm_layer	conv_lstm_layer.c	/^void push_conv_lstm_layer(layer l)$/;"	f
push_cost_layer	cost_layer.c	/^void push_cost_layer(cost_layer l)$/;"	f
push_crnn_layer	crnn_layer.c	/^void push_crnn_layer(layer l)$/;"	f
push_gru_layer	gru_layer.c	/^void push_gru_layer(layer l)$/;"	f
push_implicit_layer	representation_layer.c	/^void push_implicit_layer(layer l)$/;"	f
push_local_layer	local_layer.c	/^void push_local_layer(local_layer l)$/;"	f
push_rnn_layer	rnn_layer.c	/^void push_rnn_layer(layer l)$/;"	f
push_shortcut_layer	shortcut_layer.c	/^void push_shortcut_layer(layer l)$/;"	f
put_handlers_	httplib.h	/^  Handlers put_handlers_;$/;"	m	class:httplib::Server
put_handlers_for_content_reader	httplib.h	/^  HandersForContentReader put_handlers_for_content_reader;$/;"	m	class:httplib::Server
quality	http_stream.cpp	/^    int quality; \/\/ jpeg compression [1..100]$/;"	m	class:MJPG_sender	file:
quantize_image	image.cpp	/^void quantize_image(image im)$/;"	f
ramp_activate	activations.h	/^static inline float ramp_activate(float x){return x*(x>0)+.1f*x;}$/;"	f
ramp_gradient	activations.h	/^static inline float ramp_gradient(float x){return (x>0)+.1f;}$/;"	f
rand_int	utils.c	/^int rand_int(int min, int max)$/;"	f
rand_int_fast	utils.c	/^int rand_int_fast(int min, int max)$/;"	f
rand_normal	utils.c	/^float rand_normal()$/;"	f
rand_precalc_random	utils.c	/^float rand_precalc_random(float min, float max, float random_part)$/;"	f
rand_scale	utils.c	/^float rand_scale(float s)$/;"	f
rand_size_t	utils.c	/^size_t rand_size_t()$/;"	f
rand_uniform	utils.c	/^float rand_uniform(float min, float max)$/;"	f
rand_uniform_strong	utils.c	/^float rand_uniform_strong(float min, float max)$/;"	f
random	darkunistd.h	18;"	d
random_augment_image	image.cpp	/^image random_augment_image(image im, float angle, float aspect, int low, int high, int size)$/;"	f
random_centers	matrix.c	/^void random_centers(matrix data, matrix centers) {$/;"	f
random_crop_image	image.cpp	/^image random_crop_image(image im, int w, int h)$/;"	f
random_distort_image	image.cpp	/^void random_distort_image(image im, float hue, float saturation, float exposure)$/;"	f
random_float	utils.c	/^float random_float()$/;"	f
random_float_fast	utils.c	/^float random_float_fast()$/;"	f
random_gen	utils.c	/^unsigned int random_gen()$/;"	f
random_gen_fast	utils.c	/^unsigned int random_gen_fast(void)$/;"	f
random_go_moves	go.c	/^void random_go_moves(moves m, float *boards, float *labels, int n)$/;"	f
random_index_order	utils.c	/^int *random_index_order(int min, int max)$/;"	f
random_matrix	gemm.c	/^float *random_matrix(int rows, int cols)$/;"	f
randomize_boxes	data.c	/^void randomize_boxes(box_label *b, int n)$/;"	f
randomize_data	data.c	/^void randomize_data(data d)$/;"	f
randomize_network_recurrent_state	network.c	/^void randomize_network_recurrent_state(network net)$/;"	f
randomize_state_conv_lstm	conv_lstm_layer.c	/^void randomize_state_conv_lstm(layer l)$/;"	f
ranges	httplib.h	/^  Ranges ranges;$/;"	m	struct:httplib::Request
read	httplib.h	/^inline int BufferStream::read(char *ptr, size_t size) {$/;"	f	class:httplib::BufferStream
read	httplib.h	/^inline int SSLSocketStream::read(char *ptr, size_t size) {$/;"	f	class:httplib::SSLSocketStream
read	httplib.h	/^inline int SocketStream::read(char *ptr, size_t size) {$/;"	f	class:httplib::SocketStream
read_all	utils.c	/^void read_all(int fd, char *buffer, size_t bytes)$/;"	f
read_all_fail	utils.c	/^int read_all_fail(int fd, char *buffer, size_t bytes)$/;"	f
read_boxes	data.c	/^box_label *read_boxes(char *filename, int *n)$/;"	f
read_cfg	parser.c	/^list *read_cfg(char *filename)$/;"	f
read_content	httplib.h	/^bool read_content(Stream &strm, T &x, size_t payload_max_length, int &status,$/;"	f	namespace:httplib::detail
read_content	httplib.h	/^inline bool Server::read_content(Stream &strm, bool last_connection,$/;"	f	class:httplib::Server
read_content_chunked	httplib.h	/^inline bool read_content_chunked(Stream &strm, ContentReceiver out) {$/;"	f	namespace:httplib::detail
read_content_with_content_receiver	httplib.h	/^Server::read_content_with_content_receiver(Stream &strm, bool last_connection,$/;"	f	class:httplib::Server
read_content_with_length	httplib.h	/^inline bool read_content_with_length(Stream &strm, uint64_t len,$/;"	f	namespace:httplib::detail
read_content_without_length	httplib.h	/^inline bool read_content_without_length(Stream &strm, ContentReceiver out) {$/;"	f	namespace:httplib::detail
read_data_cfg	option_list.c	/^list *read_data_cfg(char *filename)$/;"	f
read_file	httplib.h	/^inline void read_file(const std::string &path, std::string &out) {$/;"	f	namespace:httplib::detail
read_headers	httplib.h	/^inline bool read_headers(Stream &strm, Headers &headers) {$/;"	f	namespace:httplib::detail
read_int	utils.c	/^int read_int(int fd)$/;"	f
read_map	utils.c	/^int *read_map(char *filename)$/;"	f
read_option	option_list.c	/^int read_option(char *s, list *options)$/;"	f
read_response_line	httplib.h	/^inline bool Client::read_response_line(Stream &strm, Response &res) {$/;"	f	class:httplib::Client
read_timeout_sec_	httplib.h	/^  time_t read_timeout_sec_;$/;"	m	class:httplib::Client
read_timeout_sec_	httplib.h	/^  time_t read_timeout_sec_;$/;"	m	class:httplib::SSLSocketStream
read_timeout_sec_	httplib.h	/^  time_t read_timeout_sec_;$/;"	m	class:httplib::Server
read_timeout_sec_	httplib.h	/^  time_t read_timeout_sec_;$/;"	m	class:httplib::SocketStream
read_timeout_usec_	httplib.h	/^  time_t read_timeout_usec_;$/;"	m	class:httplib::Client
read_timeout_usec_	httplib.h	/^  time_t read_timeout_usec_;$/;"	m	class:httplib::SSLSocketStream
read_timeout_usec_	httplib.h	/^  time_t read_timeout_usec_;$/;"	m	class:httplib::Server
read_timeout_usec_	httplib.h	/^  time_t read_timeout_usec_;$/;"	m	class:httplib::SocketStream
read_tokenized_data	rnn.c	/^int *read_tokenized_data(char *filename, size_t *read)$/;"	f
read_tokens	rnn.c	/^char **read_tokens(char *filename, size_t *read)$/;"	f
read_tree	tree.c	/^tree *read_tree(char *filename)$/;"	f
realloc_error	utils.c	/^void realloc_error(const size_t size, const char * const filename, const char * const funcname, const int line)$/;"	f
recalculate_workspace_size	network.c	/^int recalculate_workspace_size(network *net)$/;"	f
recargchar	getopt.h	/^static const char recargchar[] = "option requires an argument -- %c";$/;"	v
recargstring	getopt.h	/^static const char recargstring[] = "option requires an argument -- %s";$/;"	v
receive	yolo_console_dll.cpp	/^    T receive() {$/;"	f	class:send_one_replaceable_object_t
reconstruct_picture	nightmare.c	/^void reconstruct_picture(network net, float *features, image recon, image update, float rate, float momentum, float lambda, int smooth_size, int iters)$/;"	f
redirect	httplib.h	/^inline bool Client::redirect(const Request &req, Response &res) {$/;"	f	class:httplib::Client
redirect	httplib.h	/^inline bool redirect(T &cli, const Request &req, Response &res,$/;"	f	namespace:httplib::detail
redirect_count	httplib.h	/^  size_t redirect_count = CPPHTTPLIB_REDIRECT_MAX_COUNT;$/;"	m	struct:httplib::Request
region_layer	region_layer.h	/^typedef layer region_layer;$/;"	t
reject_similar_weights	network.c	/^void reject_similar_weights(network net, float sim_threshold)$/;"	f
release	http_stream.cpp	/^    bool release()$/;"	f	class:JSON_sender
release	http_stream.cpp	/^    bool release()$/;"	f	class:MJPG_sender
release	multidnn.h	/^    volatile int release;$/;"	m	struct:MULTI_DNN
release_capture	image_opencv.cpp	/^extern "C" void release_capture(cap_cv* cap)$/;"	f
release_mat	image_opencv.cpp	/^extern "C" void release_mat(mat_cv **mat)$/;"	f
release_period	multidnn.h	/^    double release_period[MEASUREMENT_ITERATION];$/;"	m	struct:MULTI_DNN
release_time	multidnn.h	/^    double release_time[MEASUREMENT_ITERATION]; $/;"	m	struct:MULTI_DNN
release_video_writer	image_opencv.cpp	/^extern "C" void release_video_writer(write_cv **output_video_writer)$/;"	f
relie_activate	activations.h	/^static inline float relie_activate(float x){return (x>0) ? x : .01f*x;}$/;"	f
relie_gradient	activations.h	/^static inline float relie_gradient(float x){return (x>0) ? 1 : .01f;}$/;"	f
relu	blas.c	/^static float relu(float src) {$/;"	f	file:
relu	network.c	/^static float relu(float src) {$/;"	f	file:
relu6_activate	activations.h	/^static inline float relu6_activate(float x) { return min_val_cmp(max_val_cmp(x, 0), 6); }$/;"	f
relu6_gradient	activations.h	/^static inline float relu6_gradient(float x) { return (x > 0 && x < 6); }$/;"	f
relu_activate	activations.h	/^static inline float relu_activate(float x){return x*(x>0);}$/;"	f
relu_gradient	activations.h	/^static inline float relu_gradient(float x){return (x>0);}$/;"	f
remember_network_recurrent_state	network.c	/^void remember_network_recurrent_state(network net)$/;"	f
remember_state_conv_lstm	conv_lstm_layer.c	/^void remember_state_conv_lstm(layer l)$/;"	f
remove_connected	go.c	/^void remove_connected(float *b, int *lib, int p, int r, int c)$/;"	f
reorg_cpu	blas.c	/^void reorg_cpu(float *x, int out_w, int out_h, int out_c, int batch, int stride, int forward, float *out)$/;"	f
repack_input	gemm.c	/^void repack_input(float *input, float *re_packed_input, int w, int h, int c)$/;"	f
replace_image_to_label	utils.c	/^void replace_image_to_label(const char* input_path, char* output_path)$/;"	f
required_argument	getopt.c	/^  required_argument, \/* option always requires an argument	*\/$/;"	e	enum:__anon7	file:
rescale_net	darknet.c	/^void rescale_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
rescale_weights	convolutional_layer.c	/^void rescale_weights(convolutional_layer l, float scale, float trans)$/;"	f
reset_network_state	network.c	/^void reset_network_state(network *net, int b)$/;"	f
reset_normalize_net	darknet.c	/^void reset_normalize_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
reset_rnn	network.c	/^void reset_rnn(network *net)$/;"	f
reset_rnn_state	rnn.c	/^void reset_rnn_state(network net, int b)$/;"	f
reset_wait_stream_events	dark_cuda.c	/^void reset_wait_stream_events() {$/;"	f
resize_avgpool_layer	avgpool_layer.c	/^void resize_avgpool_layer(avgpool_layer *l, int w, int h)$/;"	f
resize_batchnorm_layer	batchnorm_layer.c	/^void resize_batchnorm_layer(layer *l, int w, int h)$/;"	f
resize_conv_lstm_layer	conv_lstm_layer.c	/^void resize_conv_lstm_layer(layer *l, int w, int h)$/;"	f
resize_convolutional_layer	convolutional_layer.c	/^void resize_convolutional_layer(convolutional_layer *l, int w, int h)$/;"	f
resize_cost_layer	cost_layer.c	/^void resize_cost_layer(cost_layer *l, int inputs)$/;"	f
resize_crnn_layer	crnn_layer.c	/^void resize_crnn_layer(layer *l, int w, int h)$/;"	f
resize_crop_layer	crop_layer.c	/^void resize_crop_layer(layer *l, int w, int h)$/;"	f
resize_deconvolutional_layer	deconvolutional_layer.c	/^void resize_deconvolutional_layer(deconvolutional_layer *l, int h, int w)$/;"	f
resize_dropout_layer	dropout_layer.c	/^void resize_dropout_layer(dropout_layer *l, int inputs)$/;"	f
resize_gaussian_yolo_layer	gaussian_yolo_layer.c	/^void resize_gaussian_yolo_layer(layer *l, int w, int h)$/;"	f
resize_image	image.cpp	/^image resize_image(image im, int w, int h)$/;"	f
resize_implicit_layer	representation_layer.c	/^void resize_implicit_layer(layer *l, int w, int h)$/;"	f
resize_matrix	matrix.c	/^matrix resize_matrix(matrix m, int size)$/;"	f
resize_max	image.cpp	/^image resize_max(image im, int max)$/;"	f
resize_maxpool_layer	maxpool_layer.c	/^void resize_maxpool_layer(maxpool_layer *l, int w, int h)$/;"	f
resize_min	image.cpp	/^image resize_min(image im, int min)$/;"	f
resize_network	network.c	/^int resize_network(network *net, int w, int h)$/;"	f
resize_normalization_layer	normalization_layer.c	/^void resize_normalization_layer(layer *layer, int w, int h)$/;"	f
resize_region_layer	region_layer.c	/^void resize_region_layer(layer *l, int w, int h)$/;"	f
resize_reorg_layer	reorg_layer.c	/^void resize_reorg_layer(layer *l, int w, int h)$/;"	f
resize_reorg_old_layer	reorg_old_layer.c	/^void resize_reorg_old_layer(layer *l, int w, int h)$/;"	f
resize_route_layer	route_layer.c	/^void resize_route_layer(route_layer *l, network *net)$/;"	f
resize_sam_layer	sam_layer.c	/^void resize_sam_layer(layer *l, int w, int h)$/;"	f
resize_scale_channels_layer	scale_channels_layer.c	/^void resize_scale_channels_layer(layer *l, network *net)$/;"	f
resize_shortcut_layer	shortcut_layer.c	/^void resize_shortcut_layer(layer *l, int w, int h, network *net)$/;"	f
resize_upsample_layer	upsample_layer.c	/^void resize_upsample_layer(layer *l, int w, int h)$/;"	f
resize_window_cv	image_opencv.cpp	/^extern "C" void resize_window_cv(char const* window_name, int width, int height) {}$/;"	f
resize_window_cv	image_opencv.cpp	/^extern "C" void resize_window_cv(char const* window_name, int width, int height)$/;"	f
resize_yolo_layer	yolo_layer.c	/^void resize_yolo_layer(layer *l, int w, int h)$/;"	f
response_handler	httplib.h	/^  ResponseHandler response_handler;$/;"	m	struct:httplib::Request
restore_network_recurrent_state	network.c	/^void restore_network_recurrent_state(network net)$/;"	f
restore_state_conv_lstm	conv_lstm_layer.c	/^void restore_state_conv_lstm(layer l)$/;"	f
reverse_32_bit	gemm.c	/^uint32_t reverse_32_bit(uint32_t a)$/;"	f
reverse_8_bit	gemm.c	/^uint8_t reverse_8_bit(uint8_t a) {$/;"	f
reverse_byte	gemm.c	/^unsigned char reverse_byte(unsigned char a)$/;"	f
reverse_byte_1	gemm.c	/^unsigned char reverse_byte_1(char a)$/;"	f
reverse_byte_3	gemm.c	/^unsigned char reverse_byte_3(unsigned char n) {$/;"	f
rgb_to_hsv	image.cpp	/^void rgb_to_hsv(image im)$/;"	f
rgbgr_image	image.cpp	/^void rgbgr_image(image im)$/;"	f
rgbgr_net	darknet.c	/^void rgbgr_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
rgbgr_weights	convolutional_layer.c	/^void rgbgr_weights(convolutional_layer l)$/;"	f
rotate_crop_image	image.cpp	/^image rotate_crop_image(image im, float rad, float s, int w, int h, float dx, float dy, float aspect)$/;"	f
rotate_image	image.cpp	/^image rotate_image(image im, float rad)$/;"	f
rotate_image_cw	image.cpp	/^void rotate_image_cw(image im, int times)$/;"	f
route_layer	route_layer.h	/^typedef layer route_layer;$/;"	t
routing	httplib.h	/^inline bool Server::routing(Request &req, Response &res, Stream &strm, bool last_connection) {$/;"	f	class:httplib::Server
run_art	art.c	/^void run_art(int argc, char **argv)$/;"	f
run_captcha	captcha.c	/^void run_captcha(int argc, char **argv)$/;"	f
run_char_rnn	rnn.c	/^void run_char_rnn(int argc, char **argv)$/;"	f
run_cifar	cifar.c	/^void run_cifar(int argc, char **argv)$/;"	f
run_classification_in_thread	multidnn.c	/^static volatile int run_classification_in_thread = 0;$/;"	v	file:
run_classifier	classifier.c	/^void run_classifier(int argc, char **argv)$/;"	f
run_coco	coco.c	/^void run_coco(int argc, char **argv)$/;"	f
run_compare	compare.c	/^void run_compare(int argc, char **argv)$/;"	f
run_detect_in_thread	avees.c	/^static volatile int run_detect_in_thread = 0;$/;"	v	file:
run_detect_in_thread	demo.c	/^static volatile int run_detect_in_thread = 0;$/;"	v	file:
run_detect_in_thread	multidnn.c	/^static volatile int run_detect_in_thread = 0;$/;"	v	file:
run_detector	detector.c	/^void run_detector(int argc, char **argv)$/;"	f
run_dice	dice.c	/^void run_dice(int argc, char **argv)$/;"	f
run_display_in_thread	multidnn.c	/^static volatile int run_display_in_thread = 0;$/;"	v	file:
run_fetch_in_thread	avees.c	/^static volatile int run_fetch_in_thread = 0;$/;"	v	file:
run_fetch_in_thread	demo.c	/^static volatile int run_fetch_in_thread = 0;$/;"	v	file:
run_fetch_in_thread	multidnn.c	/^static volatile int run_fetch_in_thread = 0;$/;"	v	file:
run_go	go.c	/^void run_go(int argc, char **argv)$/;"	f
run_load_data	data.c	/^static volatile int * run_load_data = NULL;$/;"	v	file:
run_multidnn	multidnn.c	/^void run_multidnn(int argc, char **argv)$/;"	f
run_nightmare	nightmare.c	/^void run_nightmare(int argc, char **argv)$/;"	f
run_prediction_gpu	multidnn.c	/^static volatile int run_prediction_gpu = 0;$/;"	v	file:
run_super	super.c	/^void run_super(int argc, char **argv)$/;"	f
run_swag	swag.c	/^void run_swag(int argc, char **argv)$/;"	f
run_tag	tag.c	/^void run_tag(int argc, char **argv)$/;"	f
run_thread_loop	data.c	/^void *run_thread_loop(void *ptr)$/;"	f
run_vid_rnn	rnn_vid.c	/^void run_vid_rnn(int argc, char **argv)$/;"	f
run_vid_rnn	rnn_vid.c	/^void run_vid_rnn(int argc, char **argv){}$/;"	f
run_voxel	voxel.c	/^void run_voxel(int argc, char **argv)$/;"	f
run_writing	writing.c	/^void run_writing(int argc, char **argv)$/;"	f
run_yolo	yolo.c	/^void run_yolo(int argc, char **argv)$/;"	f
running_threads_	httplib.h	/^  int running_threads_;$/;"	m	class:httplib::Threads
running_threads_mutex_	httplib.h	/^  std::mutex running_threads_mutex_;$/;"	m	class:httplib::Threads
sample	matrix.c	/^int *sample(int n)$/;"	f
sample_array	utils.c	/^int sample_array(float *a, int n)$/;"	f
sample_array_custom	utils.c	/^int sample_array_custom(float *a, int n)$/;"	f
saturate_exposure_image	image.cpp	/^void saturate_exposure_image(image im, float sat, float exposure)$/;"	f
saturate_image	image.cpp	/^void saturate_image(image im, float sat)$/;"	f
save_batchnorm_weights	parser.c	/^void save_batchnorm_weights(layer l, FILE *fp)$/;"	f
save_connected_weights	parser.c	/^void save_connected_weights(layer l, FILE *fp)$/;"	f
save_convolutional_weights	parser.c	/^void save_convolutional_weights(layer l, FILE *fp)$/;"	f
save_convolutional_weights_binary	parser.c	/^void save_convolutional_weights_binary(layer l, FILE *fp)$/;"	f
save_convolutional_weights_ema	parser.c	/^void save_convolutional_weights_ema(layer l, FILE *fp)$/;"	f
save_cv_jpg	image_opencv.cpp	/^extern "C" void save_cv_jpg(mat_cv *img_src, const char *name)$/;"	f
save_cv_png	image_opencv.cpp	/^extern "C" void save_cv_png(mat_cv *img_src, const char *name)$/;"	f
save_image	image.cpp	/^void save_image(image im, const char *name)$/;"	f
save_image_jpg	image.cpp	/^void save_image_jpg(image p, const char *name)$/;"	f
save_image_options	image.cpp	/^void save_image_options(image im, const char *name, IMTYPE f, int quality)$/;"	f
save_image_png	image.cpp	/^void save_image_png(image im, const char *name)$/;"	f
save_implicit_weights	parser.c	/^void save_implicit_weights(layer l, FILE *fp)$/;"	f
save_mat_jpg	image_opencv.cpp	/^extern "C" void save_mat_jpg(cv::Mat img_src, const char *name)$/;"	f
save_mat_png	image_opencv.cpp	/^extern "C" void save_mat_png(cv::Mat img_src, const char *name)$/;"	f
save_reconstruction	rnn_vid.c	/^image save_reconstruction(network net, image *init, float *feat, char *name, int i)$/;"	f
save_shortcut_weights	parser.c	/^void save_shortcut_weights(layer l, FILE *fp)$/;"	f
save_weights	parser.c	/^void save_weights(network net, char *filename)$/;"	f
save_weights_upto	parser.c	/^void save_weights_upto(network net, char *filename, int cutoff, int save_ema)$/;"	f
scal_add_cpu	blas.c	/^void scal_add_cpu(int N, float ALPHA, float BETA, float *X, int INCX)$/;"	f
scal_cpu	blas.c	/^void scal_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
scale_array	utils.c	/^void scale_array(float *a, int n, float s)$/;"	f
scale_bias	convolutional_layer.c	/^void scale_bias(float *output, float *scales, int batch, int n, int size)$/;"	f
scale_data_rows	data.c	/^void scale_data_rows(data d, float s)$/;"	f
scale_image	image.cpp	/^void scale_image(image m, float s)$/;"	f
scale_image_channel	image.cpp	/^void scale_image_channel(image im, int c, float v)$/;"	f
scale_matrix	matrix.c	/^void scale_matrix(matrix m, float scale)$/;"	f
score_game	go.c	/^float score_game(float *board)$/;"	f
sec	utils.c	/^float sec(clock_t clocks)$/;"	f
sech	activations.h	/^static inline float sech(float x) { return 2 \/ (expf(x) + expf(-x)); }$/;"	f
section	parser.c	/^}section;$/;"	t	typeref:struct:__anon10	file:
select_read	httplib.h	/^inline int select_read(socket_t sock, time_t sec, time_t usec) {$/;"	f	namespace:httplib::detail
selected	image_opencv.cpp	/^std::atomic<bool> draw_select, selected;$/;"	v
self_go	go.c	/^void self_go(char *filename, char *weightfile, char *f2, char *w2, int multi)$/;"	f
selu_activate	activations.h	/^static inline float selu_activate(float x) { return (x >= 0)*1.0507f*x + (x < 0)*1.0507f*1.6732f*(expf(x) - 1); }$/;"	f
selu_gradient	activations.h	/^static inline float selu_gradient(float x) { return (x >= 0)*1.0507f + (x < 0)*(x + 1.0507f*1.6732f); }$/;"	f
send	httplib.h	/^inline bool Client::send(const Request &req, Response &res) {$/;"	f	class:httplib::Client
send	httplib.h	/^inline bool Client::send(const std::vector<Request> &requests,$/;"	f	class:httplib::Client
send	yolo_console_dll.cpp	/^    void send(T const& _obj) {$/;"	f	class:send_one_replaceable_object_t
send_http_post_request	http_stream.cpp	/^int send_http_post_request(char *http_post_host, int server_port, const char *videosource,$/;"	f
send_json	http_stream.cpp	/^void send_json(detection *dets, int nboxes, int classes, char **names, long long int frame_id, int port, int timeout)$/;"	f
send_json_custom	http_stream.cpp	/^void send_json_custom(char const* send_buf, int port, int timeout)$/;"	f
send_mjpeg	http_stream.cpp	/^void send_mjpeg(mat_cv* mat, int port, int timeout, int quality)$/;"	f
send_one_replaceable_object_t	yolo_console_dll.cpp	/^    send_one_replaceable_object_t(bool _sync) : sync(_sync), a_ptr(NULL)$/;"	f	class:send_one_replaceable_object_t
send_one_replaceable_object_t	yolo_console_dll.cpp	/^class send_one_replaceable_object_t {$/;"	c	file:
send_with_content_provider	httplib.h	/^inline std::shared_ptr<Response> Client::send_with_content_provider($/;"	f	class:httplib::Client
server_certificate_verification_	httplib.h	/^  bool server_certificate_verification_ = false;$/;"	m	class:httplib::SSLClient
set_base_dir	httplib.h	/^inline bool Server::set_base_dir(const char *dir, const char *mount_point) {$/;"	f	class:httplib::Server
set_batch_network	network.c	/^void set_batch_network(network *net, int b)$/;"	f
set_bit	gemm.h	/^static inline void set_bit(unsigned char *const dst, size_t index) {$/;"	f
set_ca_cert_path	httplib.h	/^inline void SSLClient::set_ca_cert_path(const char *ca_cert_file_path,$/;"	f	class:httplib::SSLClient
set_capture_position_frame_cv	image_opencv.cpp	/^extern "C" int set_capture_position_frame_cv(cap_cv *cap, int index)$/;"	f
set_capture_property_cv	image_opencv.cpp	/^extern "C" int set_capture_property_cv(cap_cv *cap, int property_id, double value)$/;"	f
set_chunked_content_provider	httplib.h	/^inline void Response::set_chunked_content_provider($/;"	f	class:httplib::Response
set_content	httplib.h	/^inline void Response::set_content(const char *s, size_t n,$/;"	f	class:httplib::Response
set_content	httplib.h	/^inline void Response::set_content(const std::string &s,$/;"	f	class:httplib::Response
set_content_provider	httplib.h	/^inline void Response::set_content_provider($/;"	f	class:httplib::Response
set_error_handler	httplib.h	/^inline void Server::set_error_handler(Handler handler) {$/;"	f	class:httplib::Server
set_file_request_handler	httplib.h	/^inline void Server::set_file_request_handler(Handler handler) {$/;"	f	class:httplib::Server
set_header	httplib.h	/^inline void Request::set_header(const char *key, const char *val) {$/;"	f	class:httplib::Request
set_header	httplib.h	/^inline void Request::set_header(const char *key, const std::string &val) {$/;"	f	class:httplib::Request
set_header	httplib.h	/^inline void Response::set_header(const char *key, const char *val) {$/;"	f	class:httplib::Response
set_header	httplib.h	/^inline void Response::set_header(const char *key, const std::string &val) {$/;"	f	class:httplib::Response
set_keep_alive_max_count	httplib.h	/^inline void Client::set_keep_alive_max_count(size_t count) {$/;"	f	class:httplib::Client
set_keep_alive_max_count	httplib.h	/^inline void Server::set_keep_alive_max_count(size_t count) {$/;"	f	class:httplib::Server
set_logger	httplib.h	/^inline void Server::set_logger(Logger logger) { logger_ = std::move(logger); }$/;"	f	class:httplib::Server
set_nonblocking	httplib.h	/^inline void set_nonblocking(socket_t sock, bool nonblocking) {$/;"	f	namespace:httplib::detail
set_payload_max_length	httplib.h	/^inline void Server::set_payload_max_length(size_t length) {$/;"	f	class:httplib::Server
set_pixel	image.cpp	/^static void set_pixel(image m, int x, int y, int c, float val)$/;"	f	file:
set_read_timeout	httplib.h	/^inline void Client::set_read_timeout(time_t sec, time_t usec) {$/;"	f	class:httplib::Client
set_read_timeout	httplib.h	/^inline void Server::set_read_timeout(time_t sec, time_t usec) {$/;"	f	class:httplib::Server
set_redirect	httplib.h	/^inline void Response::set_redirect(const char *url) {$/;"	f	class:httplib::Response
set_specified_workspace_limit	convolutional_layer.c	/^void set_specified_workspace_limit(convolutional_layer *l, size_t workspace_size_limit)$/;"	f
set_track_id	http_stream.cpp	/^void set_track_id(detection *new_dets, int new_dets_num, float thresh, float sim_thresh, float track_ciou_norm, int deque_size, int dets_for_track, int dets_for_show)$/;"	f
set_train_only_bn	parser.c	/^void set_train_only_bn(network net)$/;"	f
shortcut_cpu	blas.c	/^void shortcut_cpu(int batch, int w1, int h1, int c1, float *add, int w2, int h2, int c2, float *out)$/;"	f
shortcut_multilayer_cpu	blas.c	/^void shortcut_multilayer_cpu(int size, int src_outputs, int batch, int n, int *outputs_of_layers, float **layers_output, float *out, float *in, float *weights, int nweights, WEIGHTS_NORMALIZATION_T weights_normalization)$/;"	f
show_acnhors	image_opencv.cpp	/^extern "C" void show_acnhors(int number_of_boxes, int num_of_clusters, float *rel_width_height_array, model anchors_data, int width, int height)$/;"	f
show_console_result	yolo_console_dll.cpp	/^void show_console_result(std::vector<bbox_t> const result_vec, std::vector<std::string> const obj_names, int frame_id = -1) {$/;"	f
show_cuda_cudnn_info	dark_cuda.c	/^void show_cuda_cudnn_info()$/;"	f
show_image	image.cpp	/^void show_image(image p, const char *name)$/;"	f
show_image_collapsed	image.cpp	/^void show_image_collapsed(image p, char *name)$/;"	f
show_image_cv	image_opencv.cpp	/^extern "C" void show_image_cv(image p, const char *name)$/;"	f
show_image_layers	image.cpp	/^void show_image_layers(image p, char *name)$/;"	f
show_image_mat	image_opencv.cpp	/^extern "C" void show_image_mat(mat_cv *mat_ptr, const char *name)$/;"	f
show_image_normalized	image.cpp	/^void show_image_normalized(image im, const char *name)$/;"	f
show_images	image.cpp	/^void show_images(image *ims, int n, char *window)$/;"	f
show_img	avees.c	/^mat_cv* show_img;$/;"	v
show_img	demo.c	/^mat_cv* show_img;$/;"	v
show_img	multidnn.c	/^mat_cv* show_img;$/;"	v
show_opencv_info	image_opencv.cpp	/^extern "C" void show_opencv_info()$/;"	f
show_opencv_info	image_opencv.cpp	/^void show_opencv_info()$/;"	f
show_total_time	http_stream.cpp	/^void show_total_time() {$/;"	f
shuffle	utils.c	/^void shuffle(void *arr, size_t n, size_t size)$/;"	f
shutdown_	httplib.h	/^  bool shutdown_;$/;"	m	class:httplib::ThreadPool
shutdown_socket	httplib.h	/^inline int shutdown_socket(socket_t sock) {$/;"	f	namespace:httplib::detail
sim	http_stream.cpp	/^    float sim;$/;"	m	struct:similarity_detections_t	file:
similarity_detections_t	http_stream.cpp	/^struct similarity_detections_t {$/;"	s	file:
size	httplib.h	/^  size_t size() const {$/;"	f	class:httplib::detail::stream_line_reader
size	list.h	/^    int size;$/;"	m	struct:list
size_params	parser.c	/^typedef struct size_params{$/;"	s	file:
size_params	parser.c	/^} size_params;$/;"	t	typeref:struct:size_params	file:
size_to_IEC_string	utils.c	/^const char * size_to_IEC_string(const size_t size)$/;"	f
skip_content_with_length	httplib.h	/^inline void skip_content_with_length(Stream &strm, uint64_t len) {$/;"	f	namespace:httplib::detail
slMat2cvMat	yolo_console_dll.cpp	/^cv::Mat slMat2cvMat(sl::Mat &input) {$/;"	f
smooth	nightmare.c	/^void smooth(image recon, image update, float lambda, int num)$/;"	f
smooth_data	data.c	/^void smooth_data(data d)$/;"	f
smooth_l1_cpu	blas.c	/^void smooth_l1_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
snprintf	httplib.h	76;"	d
sock	http_stream.cpp	/^    SOCKET sock;$/;"	m	class:JSON_sender	file:
sock	http_stream.cpp	/^    SOCKET sock;$/;"	m	class:MJPG_sender	file:
sock_	httplib.h	/^  socket_t sock_;$/;"	m	class:httplib::SSLSocketStream
sock_	httplib.h	/^  socket_t sock_;$/;"	m	class:httplib::SocketStream
softmax	blas.c	/^void softmax(float *input, int n, float temp, float *output, int stride)$/;"	f
softmax_cpu	blas.c	/^void softmax_cpu(float *input, int n, int batch, int batch_offset, int groups, int group_offset, int stride, float temp, float *output)$/;"	f
softmax_layer	softmax_layer.h	/^typedef layer softmax_layer;$/;"	t
softmax_tree	softmax_layer.c	/^void softmax_tree(float *input, int batch, int inputs, float temp, tree *hierarchy, float *output)$/;"	f
softmax_x_ent_cpu	blas.c	/^void softmax_x_ent_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
softplus_activate	activations.h	/^static inline float softplus_activate(float x, float threshold) {$/;"	f
sorta_shuffle	utils.c	/^void sorta_shuffle(void *arr, size_t n, size_t size, size_t sections)$/;"	f
sortable_bbox	box.c	/^} sortable_bbox;$/;"	t	typeref:struct:__anon5	file:
sortable_bbox	compare.c	/^} sortable_bbox;$/;"	t	typeref:struct:__anon8	file:
speed	darknet.c	/^void speed(char *cfgfile, int tics)$/;"	f
split	httplib.h	/^template <class Fn> void split(const char *b, const char *e, char d, Fn fn) {$/;"	f	namespace:httplib::detail
split_data	data.c	/^data *split_data(data d, int part, int total)$/;"	f
split_str	utils.c	/^list *split_str(char *s, char delim)$/;"	f
srandom	darkunistd.h	17;"	d
ssize_t	darkunistd.h	39;"	d
ssl	httplib.h	/^  const SSL *ssl;$/;"	m	struct:httplib::Request
ssl_	httplib.h	/^  SSL *ssl_;$/;"	m	class:httplib::SSLSocketStream
sslinit_	httplib.h	/^static SSLInit sslinit_;$/;"	m	namespace:httplib::detail
stair_activate	activations.h	/^static inline float stair_activate(float x)$/;"	f
stair_gradient	activations.h	/^static inline float stair_gradient(float x)$/;"	f
start_cycle	avees.c	/^static double start_cycle;$/;"	v	file:
start_display	avees.c	/^static double start_display;$/;"	v	file:
start_fetch	avees.c	/^static double start_fetch;$/;"	v	file:
start_inference	avees.c	/^static double start_inference;$/;"	v	file:
start_timer	http_stream.cpp	/^void start_timer() {$/;"	f
start_timer	http_stream.cpp	/^void start_timer() {}$/;"	f
state	yolo_layer.c	/^    network_state state;$/;"	m	struct:train_yolo_args	file:
statistics_connected_layer	connected_layer.c	/^void statistics_connected_layer(layer l)$/;"	f
statistics_net	darknet.c	/^void statistics_net(char *cfgfile, char *weightfile)$/;"	f
status	httplib.h	/^  int status;$/;"	m	struct:httplib::Response
status_message	httplib.h	/^inline const char *status_message(int status) {$/;"	f	namespace:httplib::detail
steady_end	http_stream.cpp	/^static std::chrono::steady_clock::time_point steady_start, steady_end;$/;"	v	file:
steady_start	http_stream.cpp	/^static std::chrono::steady_clock::time_point steady_start, steady_end;$/;"	v	file:
stop	httplib.h	/^inline void Server::stop() {$/;"	f	class:httplib::Server
stop_timer	http_stream.cpp	/^void stop_timer() {$/;"	f
stop_timer	http_stream.cpp	/^void stop_timer() {}$/;"	f
stop_timer_and_show	http_stream.cpp	/^void stop_timer_and_show() {$/;"	f
stop_timer_and_show_name	http_stream.cpp	/^void stop_timer_and_show_name(char *name) { stop_timer_and_show(); }$/;"	f
stop_timer_and_show_name	http_stream.cpp	/^void stop_timer_and_show_name(char *name) {$/;"	f
strcasecmp	httplib.h	105;"	d
streamInit	dark_cuda.c	/^static int streamInit[16] = { 0 };$/;"	v	file:
stream_line_reader	httplib.h	/^  stream_line_reader(Stream &strm, char *fixed_buffer, size_t fixed_buffer_size)$/;"	f	class:httplib::detail::stream_line_reader
stream_line_reader	httplib.h	/^class stream_line_reader {$/;"	c	namespace:httplib::detail
streamsArray	dark_cuda.c	/^static cudaStream_t streamsArray[16];    \/\/ cudaStreamSynchronize( get_cuda_stream() );$/;"	v	file:
string_to_board	go.c	/^void string_to_board(char *s, float *board)$/;"	f
string_to_layer_type	parser.c	/^LAYER_TYPE string_to_layer_type(char * type)$/;"	f
strip	utils.c	/^void strip(char *s)$/;"	f
strip_args	utils.c	/^void strip_args(char *s)$/;"	f
strip_char	utils.c	/^void strip_char(char *s, char bad)$/;"	f
strm	httplib.h	/^  z_stream strm;$/;"	m	class:httplib::detail::decompressor
strm_	httplib.h	/^  Stream &strm_;$/;"	m	class:httplib::detail::stream_line_reader
suicide_go	go.c	/^int suicide_go(float *b, int p, int r, int c)$/;"	f
sum_array	utils.c	/^float sum_array(float *a, int n)$/;"	f
svr_sock_	httplib.h	/^  std::atomic<socket_t> svr_sock_;$/;"	m	class:httplib::Server
swap	gemm.c	370;"	d	file:
swap_binary	convolutional_layer.c	/^void swap_binary(convolutional_layer *l)$/;"	f
switchBlasHandle	dark_cuda.c	/^static cublasHandle_t switchBlasHandle[16];$/;"	v	file:
switchBlasInit	dark_cuda.c	/^static int switchBlasInit[16] = { 0 };$/;"	v	file:
switchCudnnHandle	dark_cuda.c	/^static cudnnHandle_t switchCudnnHandle[16];$/;"	v	file:
switchCudnnInit	dark_cuda.c	/^static int switchCudnnInit[16];$/;"	v	file:
switchEventsArray	dark_cuda.c	/^static cudaEvent_t switchEventsArray[1024];$/;"	v	file:
switchStreamInit	dark_cuda.c	/^static int switchStreamInit[16] = { 0 };$/;"	v	file:
switchStreamsArray	dark_cuda.c	/^static cudaStream_t switchStreamsArray[16];$/;"	v	file:
switch_stream	dark_cuda.c	/^cudaStream_t switch_stream(int i) {$/;"	f
sync	yolo_console_dll.cpp	/^    const bool sync;$/;"	m	class:send_one_replaceable_object_t	file:
system_count	demo.c	/^int system_count;$/;"	v
system_count_	classifier.c	/^int system_count_;$/;"	v
system_exit_flag	multidnn.c	/^volatile system_exit_flag;$/;"	v
tanh_activate	activations.h	/^static inline float tanh_activate(float x) { return (2 \/ (1 + expf(-2 * x)) - 1); }$/;"	f
tanh_gradient	activations.h	/^static inline float tanh_gradient(float x){return 1-x*x;}$/;"	f
target	httplib.h	/^  std::string target;$/;"	m	struct:httplib::Request
test_box	box.c	/^void test_box()$/;"	f
test_captcha	captcha.c	/^void test_captcha(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_char_rnn	rnn.c	/^void test_char_rnn(char *cfgfile, char *weightfile, int num, char *seed, float temp, int rseed, char *token_file)$/;"	f
test_cifar	cifar.c	/^void test_cifar(char *filename, char *weightfile)$/;"	f
test_cifar_csv	cifar.c	/^void test_cifar_csv(char *filename, char *weightfile)$/;"	f
test_cifar_csvtrain	cifar.c	/^void test_cifar_csvtrain(char *filename, char *weightfile)$/;"	f
test_cifar_multi	cifar.c	/^void test_cifar_multi(char *filename, char *weightfile)$/;"	f
test_classifier	classifier.c	/^void test_classifier(char *datacfg, char *cfgfile, char *weightfile, int target_layer)$/;"	f
test_coco	coco.c	/^void test_coco(char *cfgfile, char *weightfile, char *filename, float thresh)$/;"	f
test_convolutional_layer	convolutional_layer.c	/^void test_convolutional_layer()$/;"	f
test_detector	detector.c	/^void test_detector(char *datacfg, char *cfgfile, char *weightfile, char *filename, float thresh,$/;"	f
test_dice	dice.c	/^void test_dice(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_dintersect	box.c	/^void test_dintersect()$/;"	f
test_dunion	box.c	/^void test_dunion()$/;"	f
test_go	go.c	/^void test_go(char *cfg, char *weights, int multi)$/;"	f
test_gpu_accuracy	gemm.c	/^void test_gpu_accuracy(int TA, int TB, int m, int k, int n)$/;"	f
test_gpu_blas	gemm.c	/^int test_gpu_blas()$/;"	f
test_resize	image.cpp	/^void test_resize(char *filename)$/;"	f
test_super	super.c	/^void test_super(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_tactic_rnn	rnn.c	/^void test_tactic_rnn(char *cfgfile, char *weightfile, int num, float temp, int rseed, char *token_file)$/;"	f
test_tag	tag.c	/^void test_tag(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_voxel	voxel.c	/^void test_voxel(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_writing	writing.c	/^void test_writing(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_yolo	yolo.c	/^void test_yolo(char *cfgfile, char *weightfile, char *filename, float thresh)$/;"	f
this_thread_sleep_for	http_stream.cpp	/^void this_thread_sleep_for(int ms_time)$/;"	f
this_thread_yield	http_stream.cpp	/^void this_thread_yield()$/;"	f
thread_init_	httplib.h	/^  SSLThreadLocks thread_init_;$/;"	m	class:httplib::detail::SSLInit
thread_sleep	multidnn.c	/^struct timespec thread_sleep = {THREAD_SLEEP_SEC, THREAD_SLEEP_NSEC};$/;"	v	typeref:struct:timespec
thread_wait_ms	avees.c	/^static const int thread_wait_ms = 1;$/;"	v	file:
thread_wait_ms	data.c	/^static const int thread_wait_ms = 5;$/;"	v	file:
thread_wait_ms	demo.c	/^static const int thread_wait_ms = 1;$/;"	v	file:
thread_wait_ms	multidnn.c	/^static const int thread_wait_ms = 1;$/;"	v	file:
threads	data.c	/^static pthread_t* threads = NULL;$/;"	v	file:
threads_	httplib.h	/^  std::vector<std::thread> threads_;$/;"	m	class:httplib::ThreadPool
threat_classifier	classifier.c	/^void threat_classifier(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename)$/;"	f
three_way_max	image.cpp	/^float three_way_max(float a, float b, float c)$/;"	f
three_way_min	image.cpp	/^float three_way_min(float a, float b, float c)$/;"	f
thresh	multidnn.h	/^    float thresh;$/;"	m	struct:DEMO_DETECTOR
threshold_image	image.cpp	/^image threshold_image(image im, float thresh)$/;"	f
tile_images	image.cpp	/^image tile_images(image a, image b, int dx)$/;"	f
time_array	demo.c	/^double time_array[MEAS];$/;"	v
time_array_	classifier.c	/^double time_array_[MEAS_];$/;"	v
time_gpu_random_matrix	gemm.c	/^void time_gpu_random_matrix(int TA, int TB, int m, int k, int n)$/;"	f
time_limit_sec	multidnn.h	/^    int time_limit_sec;$/;"	m	struct:DEMO_DETECTOR
time_ongpu	gemm.c	/^void time_ongpu(int TA, int TB, int m, int k, int n)$/;"	f
time_random_matrix	gemm.c	/^void time_random_matrix(int TA, int TB, int m, int k, int n)$/;"	f
time_steps	parser.c	/^    int time_steps;$/;"	m	struct:size_params	file:
timeout	http_stream.cpp	/^    int timeout; \/\/ master sock timeout, shutdown after timeout usec.$/;"	m	class:JSON_sender	file:
timeout	http_stream.cpp	/^    int timeout; \/\/ master sock timeout, shutdown after timeout usec.$/;"	m	class:MJPG_sender	file:
timeout_sec_	httplib.h	/^  time_t timeout_sec_;$/;"	m	class:httplib::Client
timersub	gettimeofday.h	13;"	d
tisnan	region_layer.c	/^float tisnan(float x)$/;"	f
tmp_lock	multidnn.c	/^pthread_mutex_t tmp_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v
to_lower	httplib.h	/^inline std::string to_lower(const char *beg, const char *end) {$/;"	f	namespace:httplib::detail
to_tblr	box.c	/^boxabs to_tblr(box a) {$/;"	f
to_utf8	httplib.h	/^inline size_t to_utf8(int code, char *buff) {$/;"	f	namespace:httplib::detail
top_k	utils.c	/^void top_k(float *a, int n, int k, int *index)$/;"	f
top_max_index	utils.c	/^int top_max_index(float *a, int n, int k)$/;"	f
top_predictions	network.c	/^void top_predictions(network net, int k, int *index)$/;"	f
tot_giou_loss	yolo_layer.c	/^    float tot_giou_loss;$/;"	m	struct:train_yolo_args	file:
tot_iou	yolo_layer.c	/^    float tot_iou;$/;"	m	struct:train_yolo_args	file:
tot_iou_loss	yolo_layer.c	/^    float tot_iou_loss;$/;"	m	struct:train_yolo_args	file:
total_compares	compare.c	/^int total_compares = 0;$/;"	v
total_time	http_stream.cpp	/^static double total_time;$/;"	v	file:
total_time	http_stream.cpp	/^void total_time() {}$/;"	f
track_id	csharp/YoloCSharpWrapper.cs	/^            public UInt32 track_id;      \/\/ tracking id for video (0 - untracked, 1 - inf - tracked object)$/;"	f	struct:Darknet.YoloWrapper.bbox_t
track_id	yolo_v2_class.cpp	/^    unsigned int *track_id;$/;"	m	struct:detector_gpu_t	file:
tracking_id	yolo_v2_class.cpp	/^LIB_API std::vector<bbox_t> Detector::tracking_id(std::vector<bbox_t> cur_bbox_vec, bool const change_history,$/;"	f	class:Detector
train	parser.c	/^    int train;$/;"	m	struct:size_params	file:
train_captcha	captcha.c	/^void train_captcha(char *cfgfile, char *weightfile)$/;"	f
train_char_rnn	rnn.c	/^void train_char_rnn(char *cfgfile, char *weightfile, char *filename, int clear, int tokenized)$/;"	f
train_cifar	cifar.c	/^void train_cifar(char *cfgfile, char *weightfile)$/;"	f
train_cifar_distill	cifar.c	/^void train_cifar_distill(char *cfgfile, char *weightfile)$/;"	f
train_classifier	classifier.c	/^void train_classifier(char *datacfg, char *cfgfile, char *weightfile, int *gpus, int ngpus, int clear, int dontuse_opencv, int dont_show, int mjpeg_port, int calc_topk, int show_imgs, char* chart_path)$/;"	f
train_coco	coco.c	/^void train_coco(char *cfgfile, char *weightfile)$/;"	f
train_compare	compare.c	/^void train_compare(char *cfgfile, char *weightfile)$/;"	f
train_detector	detector.c	/^void train_detector(char *datacfg, char *cfgfile, char *weightfile, int *gpus, int ngpus, int clear, int dont_show, int calc_map, float thresh, float iou_thresh, int mjpeg_port, int show_imgs, int benchmark_layers, char* chart_path)$/;"	f
train_dice	dice.c	/^void train_dice(char *cfgfile, char *weightfile)$/;"	f
train_go	go.c	/^void train_go(char *cfgfile, char *weightfile)$/;"	f
train_network	network.c	/^float train_network(network net, data d)$/;"	f
train_network_batch	network.c	/^float train_network_batch(network net, data d, int n)$/;"	f
train_network_datum	network.c	/^float train_network_datum(network net, float *x, float *y)$/;"	f
train_network_sgd	network.c	/^float train_network_sgd(network net, data d, int n)$/;"	f
train_network_waitkey	network.c	/^float train_network_waitkey(network net, data d, int wait_key)$/;"	f
train_super	super.c	/^void train_super(char *cfgfile, char *weightfile)$/;"	f
train_swag	swag.c	/^void train_swag(char *cfgfile, char *weightfile)$/;"	f
train_tag	tag.c	/^void train_tag(char *cfgfile, char *weightfile, int clear)$/;"	f
train_vid_rnn	rnn_vid.c	/^void train_vid_rnn(char *cfgfile, char *weightfile)$/;"	f
train_voxel	voxel.c	/^void train_voxel(char *cfgfile, char *weightfile)$/;"	f
train_writing	writing.c	/^void train_writing(char *cfgfile, char *weightfile)$/;"	f
train_yolo	yolo.c	/^void train_yolo(char *cfgfile, char *weightfile)$/;"	f
train_yolo_args	yolo_layer.c	/^typedef struct train_yolo_args {$/;"	s	file:
train_yolo_args	yolo_layer.c	/^} train_yolo_args;$/;"	t	typeref:struct:train_yolo_args	file:
translate_array	utils.c	/^void translate_array(float *a, int n, float s)$/;"	f
translate_data_rows	data.c	/^void translate_data_rows(data d, float s)$/;"	f
translate_image	image.cpp	/^void translate_image(image m, float s)$/;"	f
translate_image_channel	image.cpp	/^void translate_image_channel(image im, int c, float v)$/;"	f
transpose32_optimized	gemm.c	/^void transpose32_optimized(uint32_t A[32]) {$/;"	f
transpose4x4_SSE	gemm.c	/^static inline void transpose4x4_SSE(float *A, float *B, const int lda, const int ldb)$/;"	f	file:
transpose8rS32_reversed_diagonale	gemm.c	/^void transpose8rS32_reversed_diagonale(unsigned char* A, unsigned char* B, int m, int n)$/;"	f
transpose_32x32_bits_reversed_diagonale	gemm.c	/^void transpose_32x32_bits_reversed_diagonale(uint32_t *A, uint32_t *B, int m, int n)$/;"	f
transpose_8x8_bits_my	gemm.c	/^void transpose_8x8_bits_my(unsigned char *A, unsigned char *B, int lda, int ldb)$/;"	f
transpose_bin	gemm.c	/^void transpose_bin(uint32_t *A, uint32_t *B, const int n, const int m,$/;"	f
transpose_block_SSE4x4	gemm.c	/^void transpose_block_SSE4x4(float *A, float *B, const int n, const int m,$/;"	f
transpose_image	image.cpp	/^void transpose_image(image im)$/;"	f
transpose_matrix	parser.c	/^void transpose_matrix(float *a, int rows, int cols)$/;"	f
transpose_scalar_block	gemm.c	/^static inline void transpose_scalar_block(float *A, float *B, const int lda, const int ldb, const int block_size)$/;"	f	file:
transpose_uint32	gemm.c	/^void transpose_uint32(uint32_t *src, uint32_t *dst, int src_h, int src_w, int src_align, int dst_align)$/;"	f
trim	utils.c	/^void trim(char *str)$/;"	f
truth_flag	detector.c	/^    int truth_flag;$/;"	m	struct:__anon11	file:
try_classifier	classifier.c	/^void try_classifier(char *datacfg, char *cfgfile, char *weightfile, char *filename, int layer_num)$/;"	f
type	parser.c	/^    char *type;$/;"	m	struct:__anon10	file:
uint_rand	utils.c	/^unsigned int uint_rand(unsigned int less_than)$/;"	f
unique_truth_index	detector.c	/^    int unique_truth_index;$/;"	m	struct:__anon11	file:
unlink	darkunistd.h	31;"	d
update_batchnorm_layer	batchnorm_layer.c	/^void update_batchnorm_layer(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_batchnorm_layer_gpu	batchnorm_layer.c	/^void update_batchnorm_layer_gpu(layer l, int batch, float learning_rate_init, float momentum, float decay, float loss_scale)$/;"	f
update_connected_layer	connected_layer.c	/^void update_connected_layer(connected_layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_connected_layer_gpu	connected_layer.c	/^void update_connected_layer_gpu(connected_layer l, int batch, float learning_rate_init, float momentum, float decay, float loss_scale)$/;"	f
update_conv_lstm_layer	conv_lstm_layer.c	/^void update_conv_lstm_layer(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_conv_lstm_layer_gpu	conv_lstm_layer.c	/^void update_conv_lstm_layer_gpu(layer l, int batch, float learning_rate, float momentum, float decay, float loss_scale)$/;"	f
update_convolutional_layer	convolutional_layer.c	/^void update_convolutional_layer(convolutional_layer l, int batch, float learning_rate_init, float momentum, float decay)$/;"	f
update_crnn_layer	crnn_layer.c	/^void update_crnn_layer(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_crnn_layer_gpu	crnn_layer.c	/^void update_crnn_layer_gpu(layer l, int batch, float learning_rate, float momentum, float decay, float loss_scale)$/;"	f
update_deconvolutional_layer	deconvolutional_layer.c	/^void update_deconvolutional_layer(deconvolutional_layer l, int skip, float learning_rate, float momentum, float decay)$/;"	f
update_gru_layer	gru_layer.c	/^void update_gru_layer(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_gru_layer_gpu	gru_layer.c	/^void update_gru_layer_gpu(layer l, int batch, float learning_rate, float momentum, float decay, float loss_scale)$/;"	f
update_implicit_layer	representation_layer.c	/^void update_implicit_layer(layer l, int batch, float learning_rate_init, float momentum, float decay)$/;"	f
update_implicit_layer_gpu	representation_layer.c	/^void update_implicit_layer_gpu(layer l, int batch, float learning_rate_init, float momentum, float decay, float loss_scale)$/;"	f
update_local_layer	local_layer.c	/^void update_local_layer(local_layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_local_layer_gpu	local_layer.c	/^void update_local_layer_gpu(local_layer l, int batch, float learning_rate, float momentum, float decay, float loss_scale)$/;"	f
update_lstm_layer	lstm_layer.c	/^void update_lstm_layer(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_lstm_layer_gpu	lstm_layer.c	/^void update_lstm_layer_gpu(layer l, int batch, float learning_rate, float momentum, float decay, float loss_scale)$/;"	f
update_network	network.c	/^void update_network(network net)$/;"	f
update_rnn_layer	rnn_layer.c	/^void update_rnn_layer(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_rnn_layer_gpu	rnn_layer.c	/^void update_rnn_layer_gpu(layer l, int batch, float learning_rate, float momentum, float decay, float loss_scale)$/;"	f
update_shortcut_layer	shortcut_layer.c	/^void update_shortcut_layer(layer l, int batch, float learning_rate_init, float momentum, float decay)$/;"	f
update_shortcut_layer_gpu	shortcut_layer.c	/^void update_shortcut_layer_gpu(layer l, int batch, float learning_rate_init, float momentum, float decay, float loss_scale)$/;"	f
upsample_cpu	blas.c	/^void upsample_cpu(float *in, int w, int h, int c, int batch, int stride, int forward, float scale, float *out)$/;"	f
used	option_list.h	/^    int used;$/;"	m	struct:__anon6
v1_0	httplib.h	/^enum class HttpVersion { v1_0 = 0, v1_1 };$/;"	m	class:httplib::HttpVersion
val	getopt.c	/^  int val; \/* its associated status value		*\/$/;"	m	struct:option	file:
val	list.h	/^    void *val;$/;"	m	struct:node
val	option_list.h	/^    char *val;$/;"	m	struct:__anon6
valid_captcha	captcha.c	/^void valid_captcha(char *cfgfile, char *weightfile, char *filename)$/;"	f
valid_char_rnn	rnn.c	/^void valid_char_rnn(char *cfgfile, char *weightfile, char *seed)$/;"	f
valid_go	go.c	/^void valid_go(char *cfgfile, char *weightfile, int multi)$/;"	f
valid_tactic_rnn	rnn.c	/^void valid_tactic_rnn(char *cfgfile, char *weightfile, char *seed)$/;"	f
validate_classifier_10	classifier.c	/^void validate_classifier_10(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_classifier_crop	classifier.c	/^void validate_classifier_crop(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_classifier_full	classifier.c	/^void validate_classifier_full(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_classifier_multi	classifier.c	/^void validate_classifier_multi(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_classifier_single	classifier.c	/^float validate_classifier_single(char *datacfg, char *filename, char *weightfile, network *existing_net, int topk_custom)$/;"	f
validate_coco	coco.c	/^void validate_coco(char *cfgfile, char *weightfile)$/;"	f
validate_coco_recall	coco.c	/^void validate_coco_recall(char *cfgfile, char *weightfile)$/;"	f
validate_compare	compare.c	/^void validate_compare(char *filename, char *weightfile)$/;"	f
validate_detector	detector.c	/^void validate_detector(char *datacfg, char *cfgfile, char *weightfile, char *outfile)$/;"	f
validate_detector_map	detector.c	/^float validate_detector_map(char *datacfg, char *cfgfile, char *weightfile, float thresh_calc_avg_iou, const float iou_thresh, const int map_points, int letter_box, network *existing_net)$/;"	f
validate_detector_recall	detector.c	/^void validate_detector_recall(char *datacfg, char *cfgfile, char *weightfile)$/;"	f
validate_dice	dice.c	/^void validate_dice(char *filename, char *weightfile)$/;"	f
validate_yolo	yolo.c	/^void validate_yolo(char *cfgfile, char *weightfile)$/;"	f
validate_yolo_recall	yolo.c	/^void validate_yolo_recall(char *cfgfile, char *weightfile)$/;"	f
variance_array	utils.c	/^float variance_array(float *a, int n)$/;"	f
variance_cpu	blas.c	/^void variance_cpu(float *x, float *mean, int batch, int filters, int spatial, float *variance)$/;"	f
variance_delta_cpu	batchnorm_layer.c	/^void  variance_delta_cpu(float *x, float *delta, float *mean, float *variance, int batch, int filters, int spatial, float *variance_delta)$/;"	f
vec_char_rnn	rnn.c	/^void vec_char_rnn(char *cfgfile, char *weightfile, char *seed)$/;"	f
verify_host	httplib.h	/^inline bool SSLClient::verify_host(X509 *server_cert) const {$/;"	f	class:httplib::SSLClient
verify_host_with_common_name	httplib.h	/^inline bool SSLClient::verify_host_with_common_name(X509 *server_cert) const {$/;"	f	class:httplib::SSLClient
verify_host_with_subject_alt_name	httplib.h	/^SSLClient::verify_host_with_subject_alt_name(X509 *server_cert) const {$/;"	f	class:httplib::SSLClient
verify_result_	httplib.h	/^  long verify_result_ = 0;$/;"	m	class:httplib::SSLClient
version	httplib.h	/^  std::string version;$/;"	m	struct:httplib::Request
version	httplib.h	/^  std::string version;$/;"	m	struct:httplib::Response
visualize	darknet.c	/^void visualize(char *cfgfile, char *weightfile)$/;"	f
visualize_convolutional_layer	convolutional_layer.c	/^image *visualize_convolutional_layer(convolutional_layer l, char *window, image *prev_weights)$/;"	f
visualize_network	network.c	/^void visualize_network(network net)$/;"	f
voc_names	yolo.c	/^char *voc_names[] = {"aeroplane", "bicycle", "bird", "boat", "bottle", "bus", "car", "cat", "chair", "cow", "diningtable", "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor"};$/;"	v
w	csharp/YoloCSharpWrapper.cs	/^            public UInt32 x, y, w, h;    \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	f	struct:Darknet.YoloWrapper.bbox_t
w	detector.c	/^    float w, h;$/;"	m	struct:__anon12	file:
w	http_stream.cpp	/^    WSADATA w;$/;"	m	struct:_INIT_W32DATA	file:
w	parser.c	/^    int w;$/;"	m	struct:size_params	file:
wait_for_stream	image_opencv.cpp	/^extern "C" int wait_for_stream(cap_cv *cap, cv::Mat* src, int dont_close)$/;"	f
wait_key_cv	image_opencv.cpp	/^extern "C" int wait_key_cv(int delay) { return 0; }$/;"	f
wait_key_cv	image_opencv.cpp	/^extern "C" int wait_key_cv(int delay)$/;"	f
wait_stream	dark_cuda.c	/^void wait_stream(int i) {$/;"	f
wait_until_press_key_cv	image_opencv.cpp	/^extern "C" int wait_until_press_key_cv() { return 0; }$/;"	f
wait_until_press_key_cv	image_opencv.cpp	/^extern "C" int wait_until_press_key_cv()$/;"	f
wait_until_socket_is_ready	httplib.h	/^inline bool wait_until_socket_is_ready(socket_t sock, time_t sec, time_t usec) {$/;"	f	namespace:httplib::detail
wall_time_1	multidnn.c	/^double wall_time_1()$/;"	f
wall_time_2	multidnn.c	/^double wall_time_2()$/;"	f
wall_time_3	multidnn.c	/^double wall_time_3()$/;"	f
wall_time_4	multidnn.c	/^double wall_time_4()$/;"	f
wall_time_5	multidnn.c	/^double wall_time_5()$/;"	f
warnx	getopt.c	/^warnx(const char* fmt, ...)$/;"	f	file:
webcam_is_ok	multidnn.c	/^volatile int webcam_is_ok;$/;"	v
weighted_delta_cpu	blas.c	/^void weighted_delta_cpu(float *a, float *b, float *s, float *da, float *db, float *ds, int n, float *dc)$/;"	f
weighted_sum_cpu	blas.c	/^void weighted_sum_cpu(float *a, float *b, float *s, int n, float *c)$/;"	f
weightfile	multidnn.h	/^    char *weightfile;$/;"	m	struct:DEMO_CLASSI
weightfile	multidnn.h	/^    char *weightfile;$/;"	m	struct:DEMO_DETECTOR
what_time_is_it_now	utils.c	/^double what_time_is_it_now()$/;"	f
worker	httplib.h	/^    explicit worker(ThreadPool &pool) : pool_(pool) {}$/;"	f	struct:httplib::ThreadPool::worker
worker	httplib.h	/^  struct worker {$/;"	s	class:httplib::ThreadPool
write	http_stream.cpp	/^    bool write(char const* outputbuf)$/;"	f	class:JSON_sender
write	http_stream.cpp	/^    bool write(const Mat & frame)$/;"	f	class:MJPG_sender
write	httplib.h	/^inline int BufferStream::write(const char *ptr) {$/;"	f	class:httplib::BufferStream
write	httplib.h	/^inline int BufferStream::write(const char *ptr, size_t size) {$/;"	f	class:httplib::BufferStream
write	httplib.h	/^inline int BufferStream::write(const std::string &s) {$/;"	f	class:httplib::BufferStream
write	httplib.h	/^inline int SSLSocketStream::write(const char *ptr) {$/;"	f	class:httplib::SSLSocketStream
write	httplib.h	/^inline int SSLSocketStream::write(const char *ptr, size_t size) {$/;"	f	class:httplib::SSLSocketStream
write	httplib.h	/^inline int SSLSocketStream::write(const std::string &s) {$/;"	f	class:httplib::SSLSocketStream
write	httplib.h	/^inline int SocketStream::write(const char *ptr) {$/;"	f	class:httplib::SocketStream
write	httplib.h	/^inline int SocketStream::write(const char *ptr, size_t size) {$/;"	f	class:httplib::SocketStream
write	httplib.h	/^inline int SocketStream::write(const std::string &s) {$/;"	f	class:httplib::SocketStream
write_all	utils.c	/^void write_all(int fd, char *buffer, size_t bytes)$/;"	f
write_all_fail	utils.c	/^int write_all_fail(int fd, char *buffer, size_t bytes)$/;"	f
write_content	httplib.h	/^inline ssize_t write_content(Stream &strm,$/;"	f	namespace:httplib::detail
write_content_chunked	httplib.h	/^write_content_chunked(Stream &strm,$/;"	f	namespace:httplib::detail
write_content_with_provider	httplib.h	/^Server::write_content_with_provider(Stream &strm, const Request &req,$/;"	f	class:httplib::Server
write_cv	image_opencv.h	/^typedef void* write_cv;$/;"	t
write_format	httplib.h	/^inline int Stream::write_format(const char *fmt, const Args &... args) {$/;"	f	class:httplib::Stream
write_frame_cv	image_opencv.cpp	/^extern "C" void write_frame_cv(write_cv *output_video_writer, mat_cv *mat)$/;"	f
write_headers	httplib.h	/^inline int write_headers(Stream &strm, const T &info, const Headers &headers) {$/;"	f	namespace:httplib::detail
write_int	utils.c	/^void write_int(int fd, int n)$/;"	f
write_multipart_ranges_data	httplib.h	/^inline bool write_multipart_ranges_data(Stream &strm, const Request &req,$/;"	f	namespace:httplib::detail
write_request	httplib.h	/^inline void Client::write_request(Stream &strm, const Request &req,$/;"	f	class:httplib::Client
write_response	httplib.h	/^inline bool Server::write_response(Stream &strm, bool last_connection,$/;"	f	class:httplib::Server
wsinit_	httplib.h	/^static WSInit wsinit_;$/;"	m	namespace:httplib::detail
x	csharp/YoloCSharpWrapper.cs	/^            public UInt32 x, y, w, h;    \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	f	struct:Darknet.YoloWrapper.bbox_t
x	rnn.c	/^    float *x;$/;"	m	struct:__anon13	file:
x	rnn_vid.c	/^    float *x;$/;"	m	struct:__anon4	file:
x	utils.c	/^static unsigned int x = 123456789, y = 362436069, z = 521288629;$/;"	v	file:
x_3d	csharp/YoloCSharpWrapper.cs	/^            public float x_3d, y_3d, z_3d;  \/\/ 3-D coordinates, if there is used 3D-stereo camera$/;"	f	struct:Darknet.YoloWrapper.bbox_t
x_end	image_opencv.cpp	/^std::atomic<int> x_end, y_end;$/;"	v
x_size	image_opencv.cpp	/^std::atomic<int> x_size, y_size;$/;"	v
x_start	image_opencv.cpp	/^std::atomic<int> x_start, y_start;$/;"	v
xcalloc	utils.h	31;"	d
xcalloc_location	utils.c	/^void *xcalloc_location(const size_t nmemb, const size_t size, const char * const filename, const char * const funcname, const int line) {$/;"	f
xmalloc	utils.h	30;"	d
xmalloc_location	utils.c	/^void *xmalloc_location(const size_t size, const char * const filename, const char * const funcname, const int line) {$/;"	f
xnor	gemm.c	/^static inline unsigned char xnor(unsigned char a, unsigned char b) {$/;"	f	file:
xnor_avx2_popcnt	gemm.c	/^static inline void xnor_avx2_popcnt(__m256i a_bit256, __m256i b_bit256, __m256i *count_sum) {$/;"	f	file:
xnor_int32	gemm.c	/^static inline uint32_t xnor_int32(uint32_t a, uint32_t b) {$/;"	f	file:
xnor_int64	gemm.c	/^static inline uint64_t xnor_int64(uint64_t a, uint64_t b) {$/;"	f	file:
xrealloc	utils.h	32;"	d
xrealloc_location	utils.c	/^void *xrealloc_location(void *ptr, const size_t size, const char * const filename, const char * const funcname, const int line) {$/;"	f
y	csharp/YoloCSharpWrapper.cs	/^            public UInt32 x, y, w, h;    \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	f	struct:Darknet.YoloWrapper.bbox_t
y	rnn.c	/^    float *y;$/;"	m	struct:__anon13	file:
y	rnn_vid.c	/^    float *y;$/;"	m	struct:__anon4	file:
y	utils.c	/^static unsigned int x = 123456789, y = 362436069, z = 521288629;$/;"	v	file:
y_3d	csharp/YoloCSharpWrapper.cs	/^            public float x_3d, y_3d, z_3d;  \/\/ 3-D coordinates, if there is used 3D-stereo camera$/;"	f	struct:Darknet.YoloWrapper.bbox_t
y_end	image_opencv.cpp	/^std::atomic<int> x_end, y_end;$/;"	v
y_size	image_opencv.cpp	/^std::atomic<int> x_size, y_size;$/;"	v
y_start	image_opencv.cpp	/^std::atomic<int> x_start, y_start;$/;"	v
yolo_num_detections	yolo_layer.c	/^int yolo_num_detections(layer l, float thresh)$/;"	f
yolo_num_detections_batch	yolo_layer.c	/^int yolo_num_detections_batch(layer l, float thresh, int batch)$/;"	f
z	utils.c	/^static unsigned int x = 123456789, y = 362436069, z = 521288629;$/;"	v	file:
z_3d	csharp/YoloCSharpWrapper.cs	/^            public float x_3d, y_3d, z_3d;  \/\/ 3-D coordinates, if there is used 3D-stereo camera$/;"	f	struct:Darknet.YoloWrapper.bbox_t
zed	yolo_console_dll.cpp	/^static sl::Camera zed; \/\/ ZED-camera$/;"	v	file:
zed_capture_3d	yolo_console_dll.cpp	/^cv::Mat zed_capture_3d(sl::Camera &zed) {$/;"	f
zed_capture_rgb	yolo_console_dll.cpp	/^cv::Mat zed_capture_rgb(sl::Camera &zed) {$/;"	f
zero_objectness	region_layer.c	/^void zero_objectness(layer l)$/;"	f
~Client	httplib.h	/^inline Client::~Client() {}$/;"	f	class:httplib::Client
~Detector	yolo_v2_class.cpp	/^LIB_API Detector::~Detector()$/;"	f	class:Detector
~JSON_sender	http_stream.cpp	/^    ~JSON_sender()$/;"	f	class:JSON_sender
~MJPG_sender	http_stream.cpp	/^    ~MJPG_sender()$/;"	f	class:MJPG_sender
~NoThread	httplib.h	/^  virtual ~NoThread() {}$/;"	f	class:httplib::NoThread
~Response	httplib.h	/^  ~Response() {$/;"	f	struct:httplib::Response
~SSLClient	httplib.h	/^inline SSLClient::~SSLClient() {$/;"	f	class:httplib::SSLClient
~SSLInit	httplib.h	/^  ~SSLInit() {$/;"	f	class:httplib::detail::SSLInit
~SSLServer	httplib.h	/^inline SSLServer::~SSLServer() {$/;"	f	class:httplib::SSLServer
~SSLSocketStream	httplib.h	/^inline SSLSocketStream::~SSLSocketStream() {}$/;"	f	class:httplib::SSLSocketStream
~SSLThreadLocks	httplib.h	/^  ~SSLThreadLocks() { CRYPTO_set_locking_callback(nullptr); }$/;"	f	class:httplib::detail::SSLThreadLocks
~Server	httplib.h	/^inline Server::~Server() {}$/;"	f	class:httplib::Server
~SocketStream	httplib.h	/^inline SocketStream::~SocketStream() {}$/;"	f	class:httplib::SocketStream
~Threads	httplib.h	/^  virtual ~Threads() {}$/;"	f	class:httplib::Threads
~WSInit	httplib.h	/^  ~WSInit() { WSACleanup(); }$/;"	f	class:httplib::detail::WSInit
~decompressor	httplib.h	/^  ~decompressor() { inflateEnd(&strm); }$/;"	f	class:httplib::detail::decompressor
~detection_t	http_stream.cpp	/^    ~detection_t() {$/;"	f	struct:detection_t
