#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "multidnn.h"
#ifdef WIN32
#include <time.h>
#include "gettimeofday.h"
#else
#include <sys/time.h>
#endif

#include "network.h"
#include "utils.h"
#include "parser.h"
#include "option_list.h"
#include "blas.h"
#include "assert.h"
#include "dark_cuda.h"
#include "detection_layer.h"

#include "region_layer.h"
#include "cost_layer.h"
#include "box.h"
#include "image.h"
#include "darknet.h"
#include "http_stream.h"

#define ALEXNET_SEC 0
#define ALEXNET_NSEC 100000000 // 100ms
#define ALEXNET_PRIOR 5

#define DARKNET19_SEC 0
#define DARKNET19_NSEC 100000000 // 100ms
#define DARKNET19_PRIOR 6

#define DENSENET201_SEC 0
#define DENSENET201_NSEC 100000000 // 100ms
#define DENSENET201_PRIOR 7


#define YOLOV2_SEC 0
#define YOLOV2_NSEC 150000000 // 150ms
#define YOLOV3_SEC 0
#define YOLOV3_NSEC 150000000 // 150ms
#define YOLOV4_SEC 0
#define YOLOV4_NSEC 150000000 // 150ms
#define YOLO_PRIOR 10

#define THREAD_SLEEP_SEC 0
#define THREAD_SLEEP_NSEC 10000000  // 10ms
struct timespec thread_sleep = {THREAD_SLEEP_SEC, THREAD_SLEEP_NSEC};
//thread_sleep.tv_sec = THREAD_SLEEP_SEC;
//thread_sleep.tv_nsec = THREAD_SLEEP_NSEC;


pthread_mutex_t main_lock = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t tmp_lock = PTHREAD_MUTEX_INITIALIZER;

volatile MultiDNN dnn_buffer[3];
pthread_t demo_thread[2];

/*****  DemoDetector *****/
static char **demo_names;
static image **demo_alphabet;
static int demo_classes;

static int nboxes = 0;
static detection *dets = NULL;

static network net;
static image in_s ;
static image det_s;

static cap_cv *cap;
static float fps = 0;
static float demo_thresh = 0;
static int demo_ext_output = 0;
static long long int frame_id = 0;
static int demo_json_port = -1;
static bool demo_skip_frame = false;


static int avg_frames;
static int demo_index = 0;
static mat_cv** cv_images;

mat_cv* in_img;
mat_cv* det_img;
mat_cv* show_img;

static volatile int flag_exit;
static int letter_box = 0;

static const int thread_wait_ms = 1;
static volatile int run_fetch_in_thread = 0;
static volatile int run_detect_in_thread = 0;
/*************************/

void *demo_detector_thread(void *arg);
/*******************************************
void *set_classification_thread(void *arg)
{
    Args *argm = (Args *)arg;
    int idx = argm->idx;
    int argc = argm->argc;
    char **argv = argm->argv;

    printf("-------------------------------------------\n");
    printf("Classification Create Part %d\n", idx);

    char *name=NULL;
    int prior = 0;
    struct timespec period;

    if(0==strcmp(argv[3+idx], "alexnet")) {
        name = "alexnet";
        period.tv_sec = ALEXNET_SEC;
        period.tv_nsec = ALEXNET_NSEC;
        prior = ALEXNET_PRIOR;

    } else if(0==strcmp(argv[3+idx], "darknet19")) {
        name = "darknet19";
        period.tv_sec = DARKNET19_SEC;
        period.tv_nsec = DARKNET19_NSEC;
        prior = DARKNET19_PRIOR;

    } else if(0==strcmp(argv[3+idx], "densenet201")) {
        name = "densenet201";
        period.tv_sec = DENSENET201_SEC;
        period.tv_nsec = DENSENET201_NSEC;
        prior = DENSENET201_PRIOR;

    } else {
        perror("No match Network ");
        exit(0);
    }

    dnn_buffer[idx].on = 0;
    dnn_buffer[idx].period = period;
    dnn_buffer[idx].name = name;
    dnn_buffer[idx].prior = prior;

    printf("- This part create DNN: \n");
    printf("       Name: %s\n", dnn_buffer[idx].name);
    printf("     Period: %ld ms\n", dnn_buffer[idx].period.tv_nsec/1000000);
    printf("   Priority: %d\n", dnn_buffer[idx].prior);
    


    int benchmark = find_arg(argc, argv, "-benchmark");
    int benchmark_layers = find_arg(argc, argv, "-benchmark_layers");
    if (benchmark_layers) benchmark = 1;
    int cam_index = find_int_arg(argc, argv, "-c", 0);
    char *data = argv[6];
    char *cfg = argv[7 + 2*idx];
    char *weights = argv[7 + 2*idx + 1];
    char *filename = (argc > 11) ? argv[11]: 0;

    DemoClassi *args = (DemoClassi *)malloc(sizeof(DemoClassi));
    
    args->idx = idx;
    args->datacfg = data;
    args->cfgfile = cfg;
    args->weightfile = weights;
    args->cam_index = cam_index;
    args->filename = filename;
    args->benchmark = benchmark;
    args->benchmark_layers = benchmark_layers;

    int err = pthread_create(&demo_thread[idx], NULL, demo_classification_thread, (void *) args);
    if (err < 0) {
        perror("Detector thread create error : ");
        exit(0);
    }

    while (!dnn_buffer[idx].on) {};
    free(args);

    dnn_buffer[idx].release = 1; // += 1?
    printf("---------------------------- Creat Complete\n");
    
    
}

// Detector
void *set_detection_thread(void *arg)
{
    printf("-------------------------------------------\n");
    printf("Detector Create Part\n");
    Args *argm = (Args *)arg;
    int idx = argm->idx;
    int argc = argm->argc;
    char **argv = argm->argv;
 
    char *name=NULL;
    int prior = 0;
    struct timespec period;
   
    if(0==strcmp(argv[3+idx], "yolov2")) {
        name = "yolov2";
        period.tv_sec = YOLOV2_SEC;
        period.tv_nsec = YOLOV2_NSEC;
        prior = YOLO_PRIOR;

    } else if(0==strcmp(argv[3+idx], "yolov3")) {
        name = "yolov3";
        period.tv_sec = YOLOV3_SEC;
        period.tv_nsec = YOLOV3_NSEC;
        prior = YOLO_PRIOR;

    } else if(0==strcmp(argv[3+idx], "yolov4")) {
        name = "yolov4";
        period.tv_sec = YOLOV4_SEC;
        period.tv_nsec = YOLOV4_NSEC;
        prior = YOLO_PRIOR;

    } else {
        perror("No match Network ");
        exit(0);
    }


    dnn_buffer[idx].on = 0;
    dnn_buffer[idx].period = period;
    dnn_buffer[idx].name = name;
    dnn_buffer[idx].prior = prior;

    printf("- This part create DNN: \n");
    printf("       Name: %s\n", dnn_buffer[idx].name);
    printf("     Period: %ld ms\n", dnn_buffer[idx].period.tv_nsec/1000000);
    printf("   Priority: %d\n", dnn_buffer[idx].prior);
    
    int dont_show = find_arg(argc, argv, "-dont_show");
    int benchmark = find_arg(argc, argv, "-benchmark");
    int benchmark_layers = find_arg(argc, argv, "-benchmark_layers");
    //if (benchmark_layers) benchmark = 1;
    if (benchmark) dont_show = 1;
    int letter_box = find_arg(argc, argv, "-letter_box");
    int mjpeg_port = find_int_arg(argc, argv, "-mjpeg_port", -1);
    int avgframes = find_int_arg(argc, argv, "-avgframes", 3);
    int dontdraw_bbox = find_arg(argc, argv, "-dontdraw_bbox");
    int json_port = find_int_arg(argc, argv, "-json_port", -1);
    char *http_post_host = find_char_arg(argc, argv, "-http_post_host", 0);
    int time_limit_sec = find_int_arg(argc, argv, "-time_limit_sec", 0);
    char *out_filename = find_char_arg(argc, argv, "-out_filename", 0);
    char *prefix = find_char_arg(argc, argv, "-prefix", 0);
    float thresh = find_float_arg(argc, argv, "-thresh", .25);    // 0.24
    float hier_thresh = find_float_arg(argc, argv, "-hier", .5);
    int cam_index = find_int_arg(argc, argv, "-c", 0);
    int frame_skip = find_int_arg(argc, argv, "-s", 0);
    int ext_output = find_arg(argc, argv, "-ext_output");
    
    char *datacfg = argv[5];
    char *cfg = argv[7];
    char *weights = (argc > 8) ? argv[8] : 0;
    if (weights)
        if (strlen(weights) > 0)
            if (weights[strlen(weights) - 1] == 0x0d) weights[strlen(weights) - 1] = 0;
    char *filename = (argc > 11) ? argv[11] : 0;

    list *options = read_data_cfg(datacfg);
    int classes = option_find_int(options, "classes", 20);
    char *name_list = option_find_str(options, "names", "data/names.list");
    char **names = get_labels(name_list);

    DemoDetector *args = (DemoDetector *)malloc(sizeof(DemoDetector));
    
    args->idx = idx;
    args->cfgfile = cfg;
    args->weightfile = weights;
    args->thresh = thresh;
    args->hier_thresh = hier_thresh;
    args->cam_index = cam_index;
    args->filename = filename;
    args->names = names;
    args->classes = classes;
    args->avgframes = avgframes;
    args->frame_skip = frame_skip;
    args->prefix = prefix;
    args->out_filename = out_filename;
    args->mjpeg_port = mjpeg_port;
    args->dontdraw_bbox = dontdraw_bbox;
    args->json_port = json_port;
    args->ext_output = ext_output;
    args->letter_box_in = letter_box;
    args->time_limit_sec = time_limit_sec;
    args->http_post_host = http_post_host;
    args->benchmark = benchmark;
    args->benchmark_layers = benchmark_layers;

    int err = pthread_create(&demo_thread[idx], NULL, demo_detector_thread, (void *) args);
    if (err < 0) {
        perror("Detector thread create error : ");
        exit(0);
    }

    while (!dnn_buffer[idx].on) {};
    free(args);

    dnn_buffer[idx].release = 1; // += 1?
    printf("---------------------------- Creat Complete\n");
    
   
}
*************************************88
*/

// Classifier

void *set_classification_thread(void *arg)
{
    Args *argm = (Args *)arg;
    int idx = argm->idx;
    int argc = argm->argc;
    char **argv = argm->argv;

    printf("-------------------------------------------\n");
    printf("Classification Create Part %d\n", idx);

    char *name=NULL;
    int prior = 0;
    struct timespec period;

    if(0==strcmp(argv[3+idx], "alexnet")) {
        name = "alexnet";
        period.tv_sec = ALEXNET_SEC;
        period.tv_nsec = ALEXNET_NSEC;
        prior = ALEXNET_PRIOR;

    } else if(0==strcmp(argv[3+idx], "darknet19")) {
        name = "darknet19";
        period.tv_sec = DARKNET19_SEC;
        period.tv_nsec = DARKNET19_NSEC;
        prior = DARKNET19_PRIOR;

    } else if(0==strcmp(argv[3+idx], "densenet201")) {
        name = "densenet201";
        period.tv_sec = DENSENET201_SEC;
        period.tv_nsec = DENSENET201_NSEC;
        prior = DENSENET201_PRIOR;

    } else {
        perror("No match Network ");
        exit(0);
    }

    dnn_buffer[idx].on = 0;
    dnn_buffer[idx].period = period;
    dnn_buffer[idx].name = name;
    dnn_buffer[idx].prior = prior;

    printf("- This part create DNN: \n");
    printf("       Name: %s\n", dnn_buffer[idx].name);
    printf("     Period: %ld ms\n", dnn_buffer[idx].period.tv_nsec/1000000);
    printf("   Priority: %d\n", dnn_buffer[idx].prior);
    


    int benchmark = find_arg(argc, argv, "-benchmark");
    int benchmark_layers = find_arg(argc, argv, "-benchmark_layers");
    if (benchmark_layers) benchmark = 1;
    int cam_index = find_int_arg(argc, argv, "-c", 0);
    char *data = argv[6];
    char *cfg = argv[7 + 2*idx];
    char *weights = argv[7 + 2*idx + 1];
    char *filename = (argc > 11) ? argv[11]: 0;

    DemoClassi *args = (DemoClassi *)malloc(sizeof(DemoClassi));
    
    args->idx = idx;
    args->datacfg = data;
    args->cfgfile = cfg;
    args->weightfile = weights;
    args->cam_index = cam_index;
    args->filename = filename;
    args->benchmark = benchmark;
    args->benchmark_layers = benchmark_layers;

    int err = pthread_create(&demo_thread[idx], NULL, demo_classification_thread, (void *) args);
    if (err < 0) {
        perror("Detector thread create error : ");
        exit(0);
    }

    while (!dnn_buffer[idx].on) {};
    free(args);

    printf("---------------------------- Creat Complete\n");
    
    while(1) {


        if(dnn_buffer[idx].on) {
            printf("idx: %d, dnn name: %s\n",
                    idx, dnn_buffer[idx].name);
            nanosleep(&dnn_buffer[idx].period, NULL);
            dnn_buffer[idx].release = 1; // += 1?
        }

    }

}

// Detector
void *set_detection_thread(void *arg)
{
    printf("-------------------------------------------\n");
    printf("Detector Create Part\n");
    Args *argm = (Args *)arg;
    int idx = argm->idx;
    int argc = argm->argc;
    char **argv = argm->argv;
 
    char *name=NULL;
    int prior = 0;
    struct timespec period;
   
    if(0==strcmp(argv[3+idx], "yolov2")) {
        name = "yolov2";
        period.tv_sec = YOLOV2_SEC;
        period.tv_nsec = YOLOV2_NSEC;
        prior = YOLO_PRIOR;

    } else if(0==strcmp(argv[3+idx], "yolov3")) {
        name = "yolov3";
        period.tv_sec = YOLOV3_SEC;
        period.tv_nsec = YOLOV3_NSEC;
        prior = YOLO_PRIOR;

    } else if(0==strcmp(argv[3+idx], "yolov4")) {
        name = "yolov4";
        period.tv_sec = YOLOV4_SEC;
        period.tv_nsec = YOLOV4_NSEC;
        prior = YOLO_PRIOR;

    } else {
        perror("No match Network ");
        exit(0);
    }


    dnn_buffer[idx].on = 0;
    dnn_buffer[idx].period = period;
    dnn_buffer[idx].name = name;
    dnn_buffer[idx].prior = prior;

    printf("- This part create DNN: \n");
    printf("       Name: %s\n", dnn_buffer[idx].name);
    printf("     Period: %ld ms\n", dnn_buffer[idx].period.tv_nsec/1000000);
    printf("   Priority: %d\n", dnn_buffer[idx].prior);
    
    int dont_show = find_arg(argc, argv, "-dont_show");
    int benchmark = find_arg(argc, argv, "-benchmark");
    int benchmark_layers = find_arg(argc, argv, "-benchmark_layers");
    //if (benchmark_layers) benchmark = 1;
    if (benchmark) dont_show = 1;
    int letter_box = find_arg(argc, argv, "-letter_box");
    int mjpeg_port = find_int_arg(argc, argv, "-mjpeg_port", -1);
    int avgframes = find_int_arg(argc, argv, "-avgframes", 3);
    int dontdraw_bbox = find_arg(argc, argv, "-dontdraw_bbox");
    int json_port = find_int_arg(argc, argv, "-json_port", -1);
    char *http_post_host = find_char_arg(argc, argv, "-http_post_host", 0);
    int time_limit_sec = find_int_arg(argc, argv, "-time_limit_sec", 0);
    char *out_filename = find_char_arg(argc, argv, "-out_filename", 0);
    char *prefix = find_char_arg(argc, argv, "-prefix", 0);
    float thresh = find_float_arg(argc, argv, "-thresh", .25);    // 0.24
    float hier_thresh = find_float_arg(argc, argv, "-hier", .5);
    int cam_index = find_int_arg(argc, argv, "-c", 0);
    int frame_skip = find_int_arg(argc, argv, "-s", 0);
    int ext_output = find_arg(argc, argv, "-ext_output");
    
    char *datacfg = argv[5];
    char *cfg = argv[7];
    char *weights = (argc > 8) ? argv[8] : 0;
    if (weights)
        if (strlen(weights) > 0)
            if (weights[strlen(weights) - 1] == 0x0d) weights[strlen(weights) - 1] = 0;
    char *filename = (argc > 11) ? argv[11] : 0;

    list *options = read_data_cfg(datacfg);
    int classes = option_find_int(options, "classes", 20);
    char *name_list = option_find_str(options, "names", "data/names.list");
    char **names = get_labels(name_list);

    DemoDetector *args = (DemoDetector *)malloc(sizeof(DemoDetector));
    
    args->idx = idx;
    args->cfgfile = cfg;
    args->weightfile = weights;
    args->thresh = thresh;
    args->hier_thresh = hier_thresh;
    args->cam_index = cam_index;
    args->filename = filename;
    args->names = names;
    args->classes = classes;
    args->avgframes = avgframes;
    args->frame_skip = frame_skip;
    args->prefix = prefix;
    args->out_filename = out_filename;
    args->mjpeg_port = mjpeg_port;
    args->dontdraw_bbox = dontdraw_bbox;
    args->json_port = json_port;
    args->ext_output = ext_output;
    args->letter_box_in = letter_box;
    args->time_limit_sec = time_limit_sec;
    args->http_post_host = http_post_host;
    args->benchmark = benchmark;
    args->benchmark_layers = benchmark_layers;

    int err = pthread_create(&demo_thread[idx], NULL, demo_detector_thread, (void *) args);
    if (err < 0) {
        perror("Detector thread create error : ");
        exit(0);
    }

    while (!dnn_buffer[idx].on) {};
    free(args);

    printf("---------------------------- Creat Complete\n");
    
    
    while(1) {

        if(dnn_buffer[idx].on) {
            printf("idx: %d, dnn name: %s\n",
                    idx, dnn_buffer[idx].name);
            nanosleep(&dnn_buffer[idx].period, NULL);
            dnn_buffer[idx].release = 1; // += 1?
        }

    }

}

void *demo_classification_thread(void *arg)
{
#ifdef OPENCV
    printf("- Classifier Demo\n");

    DemoClassi *argm = (DemoClassi *)arg;
    int idx = argm->idx;
    char *datacfg = argm->datacfg;
    char *cfgfile = argm->cfgfile;
    char *weightfile = argm->weightfile;
    int cam_index = argm->cam_index;
    const char *filename = argm->filename;
    int benchmark = argm->benchmark;
    int benchmark_layers = argm->benchmark_layers;

    
    printf("        idx: %d\n", idx);
    printf("    Datacfg: %s\n", datacfg);
    printf("    Cfgfile: %s\n", cfgfile);
    printf(" Weightfile: %s\n", weightfile);
    printf("  Cam_index: %d\n", cam_index);
    printf("   Filename: %s\n", filename);

    network net = parse_network_cfg_custom(cfgfile, 1, 0);
    if(weightfile){
        load_weights(&net, weightfile);
    }
    net.benchmark_layers = benchmark_layers;
    set_batch_network(&net, 1);
    list *options = read_data_cfg(datacfg);

    fuse_conv_batchnorm(net);
    calculate_binary_weights(net);

    srand(2222222);
    cap_cv * cap_c;

    if(filename){
        cap_c = get_capture_video_stream(filename);
    }else{
        cap_c = get_capture_webcam(cam_index);
    }

    int classes = option_find_int(options, "classes", 2);
    int top = option_find_int(options, "top", 1);
    if (top > classes) top = classes;

    char *name_list = option_find_str(options, "names", 0);
    char **names = get_labels(name_list);

    int* indexes = (int*)xcalloc(top, sizeof(int));

    if(!cap_c) error("Couldn't connect to webcam.", DARKNET_LOC);
    if (!benchmark) create_window_cv("Classifier", 0, 512, 512);
//    if (!benchmark) create_window_cv("Demo", 0, 512, 512);
    float fps = 0;
    int i;

    double start_time = get_time_point();
    float avg_fps = 0;
    int frame_counter = 0;
    
// thesis
    double thesis_cycletime = 0;
    double thesis_executiontime = 0;
    double old_time = 0;
    double time = 0;
    double cycle_time = 0;
    int thesis_idx = 0;

    dnn_buffer[idx].on = 1;

    while(1){
        printf("in classifi\n");
        nanosleep(&dnn_buffer[idx].period, NULL);
        if(dnn_buffer[idx].release) {
            dnn_buffer[idx].release = 0;
            printf("classification release\n");
        
            struct timeval tval_before, tval_after, tval_result;
            gettimeofday(&tval_before, NULL);
    
            //image in = get_image_from_stream(cap);
            image in_c, in;
            if (!benchmark) {
                printf("classifier show image\n");
                in = get_image_from_stream_cpp(cap_c);
                in_c = resize_image(in, net.w, net.h);
                show_image(in, "Classifier");
            }
            else {
                static image tmp;
                if (!tmp.data) tmp = make_image(net.w, net.h, 3);
                in_c = tmp;
            }
    
            old_time = time;
            time = get_time_point();
            cycle_time = (time - old_time)/1000;
            float *predictions = network_predict(net, in_c.data);
            double frame_time_ms = (get_time_point() - time)/1000;
    // thesis
    //        printf("     cycle time : %lf\n", cycle_time);
    //        printf(" execution time : %lf\n", frame_time_ms);
    
            frame_counter++;
    // thesis
            thesis_idx += 1;      
    
            if(net.hierarchy) hierarchy_predictions(predictions, net.outputs, net.hierarchy, 1);
            top_predictions(net, top, indexes);
    
    #ifndef _WIN32
            printf("\033[2J");
            printf("\033[1;1H");
    #endif
    
    
            if (!benchmark) {
                printf("\ridx: %d, FPS: %.2f  (use -benchmark command line flag for correct measurement)\n", thesis_idx, fps);
                for (i = 0; i < top; ++i) {
                    int index = indexes[i];
                    printf("%.1f%%: %s\n", predictions[index] * 100, names[index]);
                }
                printf("\n");
    
                free_image(in_c);
                free_image(in);
    
                printf("classifi check key 1\n");
                int c = wait_key_cv(10);// cvWaitKey(10);
                printf("classifi check key 2\n");
                if (c == 27 || c == 1048603) break;
            }
            else {
                printf("\rFPS: %.2f \t AVG_FPS = %.2f ", fps, avg_fps);
            }
    
            //gettimeofday(&tval_after, NULL);
            //timersub(&tval_after, &tval_before, &tval_result);
            //float curr = 1000000.f/((long int)tval_result.tv_usec);
            float curr = 1000.f / frame_time_ms;
            if (fps == 0) fps = curr;
            else fps = .9*fps + .1*curr;
    
            float spent_time = (get_time_point() - start_time) / 1000000;
    
    // thesis  
            if(thesis_idx>25) {
                thesis_cycletime += cycle_time;
                thesis_executiontime += frame_time_ms;
            }
            if(thesis_idx==1025) {
                printf("Classifier: %s  \n", weightfile);
                printf("    Avg     Cycle time: %lf\n", thesis_cycletime/1000);
                printf("    Avg Execution time: %lf\n", thesis_executiontime/1000);
                break;
            }
    
            if (spent_time >= 3.0f) {
                //printf(" spent_time = %f \n", spent_time);
                avg_fps = frame_counter / spent_time;
                frame_counter = 0;
                start_time = get_time_point();
            }
        }
        nanosleep(&thread_sleep ,NULL);
    }

#endif
}
void *multi_fetch_in_thread(void *ptr)
{
    while (!custom_atomic_load_int(&flag_exit)) {
        while (!custom_atomic_load_int(&run_fetch_in_thread)) {
            if (custom_atomic_load_int(&flag_exit)) return 0;
            if (demo_skip_frame)
                consume_frame(cap);
            this_thread_yield();
        }
        int dont_close_stream = 0;    // set 1 if your IP-camera periodically turns off and turns on video-stream
        if (letter_box)
            in_s = get_image_from_stream_letterbox(cap, net.w, net.h, net.c, &in_img, dont_close_stream);
        else
            in_s = get_image_from_stream_resize(cap, net.w, net.h, net.c, &in_img, dont_close_stream);
        if (!in_s.data) {
            printf("Stream closed.\n");
            custom_atomic_store_int(&flag_exit, 1);
            custom_atomic_store_int(&run_fetch_in_thread, 0);
            //exit(EXIT_FAILURE);
            return 0;
        }
        //in_s = resize_image(in, net.w, net.h);

        custom_atomic_store_int(&run_fetch_in_thread, 0);
    }
    return 0;
}

void *multi_fetch_in_thread_sync(void *ptr)
{
    custom_atomic_store_int(&run_fetch_in_thread, 1);
    while (custom_atomic_load_int(&run_fetch_in_thread)) this_thread_sleep_for(thread_wait_ms);
    return 0;
}

void *multi_detect_in_thread(void *ptr)
{
    while (!custom_atomic_load_int(&flag_exit)) {
        while (!custom_atomic_load_int(&run_detect_in_thread)) {
            if (custom_atomic_load_int(&flag_exit)) return 0;
            this_thread_yield();
        }

        layer l = net.layers[net.n - 1];
        float *X = det_s.data;
        //float *prediction = 
        network_predict(net, X);

        cv_images[demo_index] = det_img;
        det_img = cv_images[(demo_index + avg_frames / 2 + 1) % avg_frames];
        demo_index = (demo_index + 1) % avg_frames;
//        printf("hansaem detect, demo_thresh %f\n", demo_thresh);

        if (letter_box)
            dets = get_network_boxes(&net, get_width_mat(in_img), get_height_mat(in_img), demo_thresh, demo_thresh, 0, 1, &nboxes, 1); // letter box
        else
            dets = get_network_boxes(&net, net.w, net.h, demo_thresh, demo_thresh, 0, 1, &nboxes, 0); // resized

        //const float nms = .45;
        //if (nms) {
        //    if (l.nms_kind == DEFAULT_NMS) do_nms_sort(dets, nboxes, l.classes, nms);
        //    else diounms_sort(dets, nboxes, l.classes, nms, l.nms_kind, l.beta_nms);
        //}
//        printf("hansaem detect, nboxes %d\n", nboxes);

        custom_atomic_store_int(&run_detect_in_thread, 0);
    }

    return 0;
}

void *multi_detect_in_thread_sync(void *ptr)
{
    custom_atomic_store_int(&run_detect_in_thread, 1);
    while (custom_atomic_load_int(&run_detect_in_thread)) this_thread_sleep_for(thread_wait_ms);
    return 0;
}

double multi_get_wall_time()
{
    struct timeval walltime;
    if (gettimeofday(&walltime, NULL)) {
        return 0;
    }
    return (double)walltime.tv_sec + (double)walltime.tv_usec * .000001;
}

void *demo_detector_thread(void *arg)
{
    DemoDetector *argm = (DemoDetector *)arg;
    int idx = argm->idx;
    char *cfgfile = argm->cfgfile;
    char *weightfile = argm->weightfile;
    float thresh = argm->thresh;
    float hier_thresh = argm->hier_thresh;
//    int cam_index = argm->cam_index;
    int cam_index = 1;
    const char *filename = argm->filename;
    char **names = argm->names;
    int classes = argm->classes;
    int avgframes = argm->avgframes;
    int frame_skip = argm->frame_skip;
    char *prefix = argm->prefix;
    char *out_filename = out_filename;
    int mjpeg_port = argm->mjpeg_port;
    int dontdraw_bbox = argm->dontdraw_bbox;
    int json_port = argm->json_port;
    int dont_show = argm->dont_show;
    int ext_output = argm->ext_output;
    int letter_box_in = argm->letter_box_in;
    int time_limit_sec = argm->time_limit_sec;
    char *http_post_host = argm->http_post_host;
    int benchmark = argm->benchmark;
    int benchmark_layers = argm->benchmark_layers;


    if (avgframes < 1) avgframes = 1;
    avg_frames = avgframes;
    letter_box = letter_box_in;
    in_img = det_img = show_img = NULL;
    //skip = frame_skip;
    image **alphabet = load_alphabet();
    int delay = frame_skip;
    demo_names = names;
    demo_alphabet = alphabet;
    demo_classes = classes;
    demo_thresh = thresh;
    demo_ext_output = ext_output;
    demo_json_port = json_port;
    printf("Demo\n");
    net = parse_network_cfg_custom(cfgfile, 1, 1);    // set batch=1
    if(weightfile){
        load_weights(&net, weightfile);
    }
    if (net.letter_box) letter_box = 1;
    net.benchmark_layers = benchmark_layers;
    fuse_conv_batchnorm(net);
    calculate_binary_weights(net);
    srand(2222222);

    printf("thesis check 1\n");

    if(filename){
        printf("video file: %s\n", filename);
        cap = get_capture_video_stream(filename);
        demo_skip_frame = is_live_stream(filename);
    }else{
        printf("Webcam index: %d\n", cam_index);
        cap = get_capture_webcam(cam_index);
        printf("thesis check 1-1\n");
        demo_skip_frame = true;
    }

    printf("thesis check 2\n");
    if (!cap) {
#ifdef WIN32
        printf("Check that you have copied file opencv_ffmpeg340_64.dll to the same directory where is darknet.exe \n");
#endif
        error("Couldn't connect to webcam.", DARKNET_LOC);
    }

    layer l = net.layers[net.n-1];
    int j;

    cv_images = (mat_cv**)xcalloc(avg_frames, sizeof(mat_cv));

    printf("thesis check 3\n");
    int i;
    for (i = 0; i < net.n; ++i) {
        layer lc = net.layers[i];
        if (lc.type == YOLO) {
            lc.mean_alpha = 1.0 / avg_frames;
            l = lc;
        }
    }

    printf("thesis check 4\n");
    if (l.classes != demo_classes) {
        printf("\n Parameters don't match: in cfg-file classes=%d, in data-file classes=%d \n", l.classes, demo_classes);
        getchar();
        exit(0);
    }

    printf("thesis check 5\n");
    flag_exit = 0;

    custom_thread_t fetch_thread = NULL;
    custom_thread_t detect_thread = NULL;
    if (custom_create_thread(&fetch_thread, 0, multi_fetch_in_thread, 0)) error("Thread creation failed", DARKNET_LOC);
    if (custom_create_thread(&detect_thread, 0, multi_detect_in_thread, 0)) error("Thread creation failed", DARKNET_LOC);

    printf("thesis check 6\n");
    multi_fetch_in_thread_sync(0); //fetch_in_thread(0);
    det_img = in_img;
    det_s = in_s;
    printf("thesis check 7\n");

    multi_fetch_in_thread_sync(0); //fetch_in_thread(0);
    multi_detect_in_thread_sync(0); //fetch_in_thread(0);
    det_img = in_img;
    det_s = in_s;
    printf("thesis check 8\n");

    for (j = 0; j < avg_frames / 2; ++j) {
        free_detections(dets, nboxes);
        multi_fetch_in_thread_sync(0); //fetch_in_thread(0);
        multi_detect_in_thread_sync(0); //fetch_in_thread(0);
        det_img = in_img;
        det_s = in_s;
    }

    printf("thesis check 9\n");
    int count = 0;
    if(!prefix && !dont_show){
        int full_screen = 0;
        printf("thesis check 9-1\n");
//        create_window_cv("Demo", full_screen, 1352, 1013);
//        create_window_cv("Demo", 0, 512, 512);
        printf("thesis check 9-2\n");
    }


    printf("thesis check 10\n");
    write_cv* output_video_writer = NULL;
    if (out_filename && !flag_exit)
    {
        int src_fps = 25;
        src_fps = get_stream_fps_cpp_cv(cap);
        output_video_writer =
            create_video_writer(out_filename, 'D', 'I', 'V', 'X', src_fps, get_width_mat(det_img), get_height_mat(det_img), 1);

        //'H', '2', '6', '4'
        //'D', 'I', 'V', 'X'
        //'M', 'J', 'P', 'G'
        //'M', 'P', '4', 'V'
        //'M', 'P', '4', '2'
        //'X', 'V', 'I', 'D'
        //'W', 'M', 'V', '2'
    }

    int send_http_post_once = 0;
    const double start_time_lim = get_time_point();
    double before = get_time_point();
    double start_time = get_time_point();
    float avg_fps = 0;
    int frame_counter = 0;
    int global_frame_counter = 0;

// mutex main
    pthread_mutex_lock(&main_lock);

// thesis
    printf("THESIS hansaem demo.c net size : %ld\n", sizeof(net));
    dnn_buffer[idx].on = 1;

    while(1){
        ++count;
        if(dnn_buffer[idx].release) {
            dnn_buffer[idx].release = 0;
            printf("multi dnn check onetwo onetwo\n");
            
            {
                const float nms = .45;    // 0.4F
                int local_nboxes = nboxes;
                detection *local_dets = dets;
                this_thread_yield();
                printf("thesis check 11\n");
    
                if (!benchmark) custom_atomic_store_int(&run_fetch_in_thread, 1); // if (custom_create_thread(&fetch_thread, 0, fetch_in_thread, 0)) error("Thread creation failed", DARKNET_LOC);
                custom_atomic_store_int(&run_detect_in_thread, 1); // if (custom_create_thread(&detect_thread, 0, detect_in_thread, 0)) error("Thread creation failed", DARKNET_LOC);
    
                printf("thesis check 12\n");
                //if (nms) do_nms_obj(local_dets, local_nboxes, l.classes, nms);    // bad results
                if (nms) {
                    if (l.nms_kind == DEFAULT_NMS) do_nms_sort(local_dets, local_nboxes, l.classes, nms);
                    else diounms_sort(local_dets, local_nboxes, l.classes, nms, l.nms_kind, l.beta_nms);
                }
                printf("thesis check 13\n");
    
                if (l.embedding_size) set_track_id(local_dets, local_nboxes, demo_thresh, l.sim_thresh, l.track_ciou_norm, l.track_history_size, l.dets_for_track, l.dets_for_show);
                printf("thesis check 14\n");
    
                //printf("\033[2J");
                //printf("\033[1;1H");
                //printf("\nFPS:%.1f\n", fps);
                printf("Objects:\n\n");
    
                ++frame_id;
                if (demo_json_port > 0) {
                    int timeout = 400000;
                    send_json(local_dets, local_nboxes, l.classes, demo_names, frame_id, demo_json_port, timeout);
                }
    
                printf("thesis check 15\n");
                //char *http_post_server = "webhook.site/898bbd9b-0ddd-49cf-b81d-1f56be98d870";
                if (http_post_host && !send_http_post_once) {
                    int timeout = 3;            // 3 seconds
                    int http_post_port = 80;    // 443 https, 80 http
                    if (send_http_post_request(http_post_host, http_post_port, filename,
                        local_dets, nboxes, classes, names, frame_id, ext_output, timeout))
                    {
                        if (time_limit_sec > 0) send_http_post_once = 1;
                    }
                }
                printf("thesis check 16\n");
    
                if (!benchmark && !dontdraw_bbox) draw_detections_cv_v3(show_img, local_dets, local_nboxes, demo_thresh, demo_names, demo_alphabet, demo_classes, demo_ext_output);
                free_detections(local_dets, local_nboxes);
                printf("thesis check 17\n");
    
                printf("\nFPS:%.1f \t AVG_FPS:%.1f\n", fps, avg_fps);
    
                if(!prefix){
                    if (!dont_show) {
                        printf("thesis check 18\n");
                        const int each_frame = max_val_cmp(1, avg_fps / 60);
                        printf("thesis check 18-2\n");
                        if(global_frame_counter % each_frame == 0) show_image_mat(show_img, "Demo");
                        printf("thesis check 18-3\n");
                        int c = wait_key_cv(1);
                        printf("thesis check 19\n");
                        if (c == 10) {
                            if (frame_skip == 0) frame_skip = 60;
                            else if (frame_skip == 4) frame_skip = 0;
                            else if (frame_skip == 60) frame_skip = 4;
                            else frame_skip = 0;
                        }
                        else if (c == 27 || c == 1048603) // ESC - exit (OpenCV 2.x / 3.x)
                        {
                            flag_exit = 1;
                        }
                    }
                }else{
                    char buff[256];
                    sprintf(buff, "%s_%08d.jpg", prefix, count);
                    if(show_img) save_cv_jpg(show_img, buff);
                }
                printf("thesis check 20\n");
    
                // if you run it with param -mjpeg_port 8090  then open URL in your web-browser: http://localhost:8090
                if (mjpeg_port > 0 && show_img) {
                    int port = mjpeg_port;
                    int timeout = 400000;
                    int jpeg_quality = 40;    // 1 - 100
                    send_mjpeg(show_img, port, timeout, jpeg_quality);
                }
                printf("thesis check 21\n");
    
                // save video file
                if (output_video_writer && show_img) {
                    write_frame_cv(output_video_writer, show_img);
                    printf("\n cvWriteFrame \n");
                }
                printf("thesis check 22\n");
    
                while (custom_atomic_load_int(&run_detect_in_thread)) {
                    if(avg_fps > 180) this_thread_yield();
                    else this_thread_sleep_for(thread_wait_ms);   // custom_join(detect_thread, 0);
                }
                printf("thesis check 23\n");
                if (!benchmark) {
                    while (custom_atomic_load_int(&run_fetch_in_thread)) {
                        if (avg_fps > 180) this_thread_yield();
                        else this_thread_sleep_for(thread_wait_ms);   // custom_join(fetch_thread, 0);
                    }
                    free_image(det_s);
                }
                printf("thesis check 24\n");
    
                if (time_limit_sec > 0 && (get_time_point() - start_time_lim)/1000000 > time_limit_sec) {
                    printf(" start_time_lim = %f, get_time_point() = %f, time spent = %f \n", start_time_lim, get_time_point(), get_time_point() - start_time_lim);
                    break;
                }
    
                if (flag_exit == 1) break;
    
                if(delay == 0){
                    if(!benchmark) release_mat(&show_img);
                    show_img = det_img;
                }
                det_img = in_img;
                det_s = in_s;
            }
            --delay;
            if(delay < 0){
                delay = frame_skip;
    
                //double after = get_wall_time();
                //float curr = 1./(after - before);
                double after = get_time_point();    // more accurate time measurements
                float curr = 1000000. / (after - before);
                fps = fps*0.9 + curr*0.1;
                before = after;
    
                float spent_time = (get_time_point() - start_time) / 1000000;
                frame_counter++;
                global_frame_counter++;
                if (spent_time >= 3.0f) {
                    //printf(" spent_time = %f \n", spent_time);
                    avg_fps = frame_counter / spent_time;
                    frame_counter = 0;
                    start_time = get_time_point();
                }
            }
        }

        nanosleep(&thread_sleep, NULL);
    }
    pthread_mutex_unlock(&main_lock);
    printf("input video stream closed. \n");
    if (output_video_writer) {
        release_video_writer(&output_video_writer);
        printf("output_video_writer closed. \n");
    }

    this_thread_sleep_for(thread_wait_ms);

    custom_join(detect_thread, 0);
    custom_join(fetch_thread, 0);

    // free memory
    free_image(in_s);
    free_detections(dets, nboxes);

    demo_index = (avg_frames + demo_index - 1) % avg_frames;
    for (j = 0; j < avg_frames; ++j) {
            release_mat(&cv_images[j]);
    }
    free(cv_images);

    free_ptrs((void **)names, net.layers[net.n - 1].classes);

    const int nsize = 8;
    for (j = 0; j < nsize; ++j) {
        for (i = 32; i < 127; ++i) {
            free_image(alphabet[j][i]);
        }
        free(alphabet[j]);
    }
    free(alphabet);
    free_network(net);
    //cudaProfilerStop();
}


void run_multidnn(int argc, char **argv)
{
    int numberof_dnn = atoi(argv[2]);
    pthread_t set_thread[3];
    Args *args = (Args *)malloc(sizeof(Args));
    
    args->argc = argc;
    args->argv = argv;

    printf("Run Multi-DNN\n");

    for (int i = 0 ; i < numberof_dnn ; ++i) {
        args->idx = i;
        if (i == 0) { // Detector: yolo
            int err = pthread_create(&set_thread[i], NULL, set_detection_thread, (void *) args);
            if (err < 0) {
                perror("Detector thread create error : ");
                exit(0);
            }

        } else { // Classifier: alexnet, darknet19
            int err = pthread_create(&set_thread[i], NULL, set_classification_thread, (void *) args);
            if (err < 0) {
                perror("Classification thread create error : ");
                exit(0);
            }

        } // if else end
        sleep(1);

    } // for end



    free(args);

    int start_flag = 1;
    printf("\n\n\n\n\n");

    while(!dnn_buffer[0].on) {};
// mutex main
    pthread_mutex_lock(&main_lock);

    while(1) {
        printf("in main\n");
//        nanosleep(&thread_sleep, NULL);
//        
//        start_flag += 1;
//
//        if(start_flag%15 ==0) {
//
//            args->idx = 0;
//            int err = pthread_create(&set_thread[0], NULL, set_detection_thread, (void *) args);
//        } else if (start_flag%10==0) {
//            args->idx = 1;
//            int err = pthread_create(&set_thread[1], NULL, set_classification_thread, (void *) args);
//
//        }
       
     // for end

/*
        if(start_flag) {
            start_flag = 0;
            for(int i=0;i<numberof_dnn;++i) {
                dnn_buffer[i].on = 1;
            }
        }
*/
        sleep(1000);

    }
}

